<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Jun 20 13:26:10 2016
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25317b4]">Reset_Handler</a>
 <LI><a href="#[253173c]">FIQ_Handler</a>
 <LI><a href="#[25319d0]">Undef_Handler</a>
 <LI><a href="#[2531994]">SWI_Handler</a>
 <LI><a href="#[2531958]">PAbt_Handler</a>
 <LI><a href="#[253191c]">DAbt_Handler</a>
 <LI><a href="#[25318e0]">IRQ_Handler</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2530698]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2530698]">mutex_lock</a><BR>
 <LI><a href="#[30794d4]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30794d4]">_float_round</a><BR>
 <LI><a href="#[25319d0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25319d0]">Undef_Handler</a><BR>
 <LI><a href="#[2531994]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2531994]">SWI_Handler</a><BR>
 <LI><a href="#[2531958]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2531958]">PAbt_Handler</a><BR>
 <LI><a href="#[253191c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253191c]">DAbt_Handler</a><BR>
 <LI><a href="#[25318e0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25318e0]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2530620]">voidvoid</a>
 <LI><a href="#[2530710]">intvoid</a>
 <LI><a href="#[252fb94]">voidint</a>
 <LI><a href="#[2530620]">voidvoid</a>
 <LI><a href="#[2530710]">intvoid</a>
 <LI><a href="#[25317b4]">Reset_Handler</a>
 <LI><a href="#[25319d0]">Undef_Handler</a>
 <LI><a href="#[2531994]">SWI_Handler</a>
 <LI><a href="#[2531958]">PAbt_Handler</a>
 <LI><a href="#[253191c]">DAbt_Handler</a>
 <LI><a href="#[25318e0]">IRQ_Handler</a>
 <LI><a href="#[253173c]">FIQ_Handler</a>
 <LI><a href="#[307b25c]">__main</a>
 <LI><a href="#[2531d18]">main</a>
 <LI><a href="#[2531070]">asched_get_timestamp</a>
 <LI><a href="#[252e85c]">dn_error_transmit</a>
 <LI><a href="#[252e898]">dn_blue_heartbeat</a>
 <LI><a href="#[252e7a8]">dn_get_motor_vel_rads</a>
 <LI><a href="#[252e7e4]">dn_get_motor_pos_rads</a>
 <LI><a href="#[252e6b8]">dn_get_raw_motor_current</a>
 <LI><a href="#[252e76c]">dn_get_p0</a>
 <LI><a href="#[252e730]">dn_get_p1</a>
 <LI><a href="#[252e67c]">dn_get_raw_right_hs</a>
 <LI><a href="#[252e6f4]">dn_get_raw_left_hs</a>
 <LI><a href="#[252cf84]">dn_rx_timestamp</a>
 <LI><a href="#[252d4ac]">can_rx_setter_float_dummy</a>
 <LI><a href="#[252d470]">can_rx_setter_int_dummy</a>
 <LI><a href="#[252e424]">mc_set_command_current</a>
 <LI><a href="#[252e3ac]">mc_set_stiffness</a>
 <LI><a href="#[252e3e8]">mc_set_dampness</a>
 <LI><a href="#[252ced0]">mc_set_target_current</a>
 <LI><a href="#[252cf48]">mc_set_shutdown</a>
 <LI><a href="#[252cf0c]">mc_set_sleep</a>
 <LI><a href="#[2530878]">error_get_time</a>
 <LI><a href="#[253083c]">error_get_info</a>
 <LI><a href="#[2531070]">asched_get_timestamp</a>
 <LI><a href="#[252e7e4]">dn_get_motor_pos_rads</a>
 <LI><a href="#[252e7a8]">dn_get_motor_vel_rads</a>
 <LI><a href="#[252d0b0]">dn_get_motor_current</a>
 <LI><a href="#[252e820]">dn_get_ankle_pos_rads</a>
 <LI><a href="#[252d308]">dn_get_ankle_vel_rads</a>
 <LI><a href="#[252d290]">dn_get_battery_power</a>
 <LI><a href="#[252cffc]">dn_get_right_ls</a>
 <LI><a href="#[252d128]">dn_get_left_ls</a>
 <LI><a href="#[252d038]">dn_get_right_hs</a>
 <LI><a href="#[252d164]">dn_get_left_hs</a>
 <LI><a href="#[252cfc0]">dn_get_status</a>
 <LI><a href="#[252d2cc]">dn_get_battery_current</a>
 <LI><a href="#[252d254]">dn_get_battery_voltage</a>
 <LI><a href="#[252d1dc]">dn_get_hbridge_temp</a>
 <LI><a href="#[252d074]">dn_get_right_heel_sense</a>
 <LI><a href="#[252d1a0]">dn_get_left_heel_sense</a>
 <LI><a href="#[252d218]">dn_get_execution_time</a>
 <LI><a href="#[252d0ec]">dn_get_max_execution_time</a>
 <LI><a href="#[252ca5c]">can_rx1_isr</a>
 <LI><a href="#[252cb10]">adcx_isr</a>
 <LI><a href="#[252cb4c]">adci_isr</a>
 <LI><a href="#[252f5b8]">timer1_isr</a>
 <LI><a href="#[252ca98]">can_error_isr</a>
 <LI><a href="#[252cad4]">ae_isr</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[2526918]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
 <LI><a href="#[25268dc]">__switch$$</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252ecd0]">can_tx_angle</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252e910]">can_tx_rate</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252e8d4]">can_tx_right_heel_sense</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252eaf0]">can_tx_hs_right</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252eb2c]">can_tx_hs_left</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252e988]">can_tx_motor_pos</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252eab4]">can_tx_left_heel_sense</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252ec58]">can_tx_batt_power</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[252efdc]">task_every_row</a>
 <LI><a href="#[252efa0]">run_occasionally</a>
 <LI><a href="#[252e5c8]">dn_sched_done</a>
 <LI><a href="#[2530620]">voidvoid</a>
 <LI><a href="#[2530710]">intvoid</a>
 <LI><a href="#[252fb94]">voidint</a>
 <LI><a href="#[2530620]">voidvoid</a>
 <LI><a href="#[2530710]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25317b4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[307b25c]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[3079c18]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3079b28]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30792f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3079aec]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30792f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30799fc]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[307ba54]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[252ca5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
<LI><a href="#[307b5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[307b61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[307b658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
</UL>

<P><STRONG><a name="[2531d54]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[2531c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[2531c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2531d18]"></a>main</STRONG> (ARM, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[2531c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[2531c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[2531cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[2531124]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[25310e8]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252f5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[25310ac]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252cf84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[2531cdc]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2531070]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2530968]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2531034]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[253065c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2530698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25306d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2527f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_write
<LI><a href="#[2527f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_read_buffer
<LI><a href="#[2529744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_run_no_control
<LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[2529870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[252a860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_efilter_add
<LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[252bdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[252cad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_isr
<LI><a href="#[252cb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_isr
<LI><a href="#[252cb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_isr
<LI><a href="#[252ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[252e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[252e2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[252e49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[252e514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_init_switch
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[252ee38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[252ee74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[252eeec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[252ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[252fb1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[252fb94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[2530620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
<LI><a href="#[2530710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[25310e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[253092c]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[253065c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2530698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25306d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[252ca98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[25308f0]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253065c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2530698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25306d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[25308b4]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2530878]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[253083c]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2530800]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[25307c4]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[2530788]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[253074c]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[25306d4]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25308f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[253092c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2530698]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2530698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2530698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[25308f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[253092c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[253065c]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25308f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[253092c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252fdb0]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[252f9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[25298e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_unsafe_target_current
<LI><a href="#[252ced0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[252e3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[252e3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[252e424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[252fd74]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252fd38]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fixed_to_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[252f9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[252fcfc]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[252fcc0]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[252fc84]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[252fc48]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[252f9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[252c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[252c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[252e6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
</UL>

<P><STRONG><a name="[252fc0c]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2530620]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[252fbd0]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252fb94]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[252fb58]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252fb1c]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252fae0]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2530710]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[252faa4]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252fa68]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252fa2c]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[252f9f0]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2531c64]"></a>init_hardware</STRONG> (ARM, 1172 bytes, Stack size 16 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2531d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[252f5b8]"></a>timer1_isr</STRONG> (ARM, 40 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer1_isr &rArr; asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[25310e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[252efdc]"></a>task_every_row</STRONG> (ARM, 72 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[252e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[252e2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[252e334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
<LI><a href="#[252e370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[252e49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[252e4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_update
<LI><a href="#[252e58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252ed0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[252ed48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[252edc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
<LI><a href="#[252ee74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[252eeb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_conversion_wait
<LI><a href="#[252ef64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[25308b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252efa0]"></a>run_occasionally</STRONG> (ARM, 256 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = run_occasionally &rArr; dn_outer_feet_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252e8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_right_heel_sense
<LI><a href="#[252e910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rate
<LI><a href="#[252e94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_vel
<LI><a href="#[252e9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_current
<LI><a href="#[252ea00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[252ea3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_right
<LI><a href="#[252ea78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_left
<LI><a href="#[252eb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hbridge_temp
<LI><a href="#[252eba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[252ebe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[252ec1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_voltage
<LI><a href="#[252ec94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_current
<LI><a href="#[253074c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2531bec]"></a>init_software</STRONG> (ARM, 388 bytes, Stack size 64 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[252e3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[252e424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_init_switch
<LI><a href="#[252e550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[252ee38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[252eeec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[252ef28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_init
<LI><a href="#[2530968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[2531124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2531d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2531bb0]"></a>init_values</STRONG> (ARM, 32 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_values &rArr; qdc_tmr0_cap23_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[252e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[252e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[252e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[252ed84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_wait
<LI><a href="#[252edc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2531d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2531ca0]"></a>init_can</STRONG> (ARM, 800 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[252d380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[252d3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[252d3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[252d434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[252d4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[252d524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2531d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[252e988]"></a>can_tx_motor_pos</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_pos &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252e94c]"></a>can_tx_motor_vel</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_vel &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252e9c4]"></a>can_tx_motor_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252ecd0]"></a>can_tx_angle</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_angle &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252e910]"></a>can_tx_rate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rate &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252ec58]"></a>can_tx_batt_power</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_power &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252ea3c]"></a>can_tx_ls_right</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ls_right &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252ea78]"></a>can_tx_ls_left</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ls_left &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252eaf0]"></a>can_tx_hs_right</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hs_right &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252eb2c]"></a>can_tx_hs_left</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hs_left &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252ebe0]"></a>can_tx_board_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_board_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252ec94]"></a>can_tx_batt_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252ec1c]"></a>can_tx_batt_voltage</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_voltage &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252eb68]"></a>can_tx_hbridge_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hbridge_temp &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252eab4]"></a>can_tx_left_heel_sense</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_left_heel_sense &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252e8d4]"></a>can_tx_right_heel_sense</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_right_heel_sense &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252eba4]"></a>can_tx_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252ea00]"></a>can_tx_max_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_max_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2531c28]"></a>init_interrupts</STRONG> (ARM, 200 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2531d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[252d128]"></a>dn_get_left_ls</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_left_ls &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252cffc]"></a>dn_get_right_ls</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_right_ls &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e7e4]"></a>dn_get_motor_pos_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_pos_rads &rArr; qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252bbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e820]"></a>dn_get_ankle_pos_rads</STRONG> (ARM, 36 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_ankle_pos_rads &rArr; ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e604]"></a>dn_safety</STRONG> (ARM, 268 bytes, Stack size 24 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dn_safety &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[252bc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[252bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_direction_control
<LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[252bdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[252bf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e898]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[252bc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252c318]"></a>dn_green_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_blink
</UL>

<P><STRONG><a name="[252c2dc]"></a>dn_red_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
</UL>

<P><STRONG><a name="[252d254]"></a>dn_get_battery_voltage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[252be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252c2a0]"></a>dn_get_raw_battery_voltage</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[252fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[252c264]"></a>dn_get_hbridge_raw_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
</UL>

<P><STRONG><a name="[252d1dc]"></a>dn_get_hbridge_temp</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_hbridge_temp
</UL>
<BR>[Calls]<UL><LI><a href="#[252be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e6b8]"></a>dn_get_raw_motor_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_get_raw_motor_current &rArr; linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252d0b0]"></a>dn_get_motor_current</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_current
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d2cc]"></a>dn_get_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_current
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252c228]"></a>dn_get_raw_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[252d290]"></a>dn_get_battery_power</STRONG> (ARM, 48 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_power
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252be68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e67c]"></a>dn_get_raw_right_hs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_raw_right_hs
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252e6f4]"></a>dn_get_raw_left_hs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_raw_left_hs
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252d038]"></a>dn_get_right_hs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_right_hs &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[252bea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d164]"></a>dn_get_left_hs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_left_hs &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[252bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[252bea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d1a0]"></a>dn_get_left_heel_sense</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_left_heel_sense
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d074]"></a>dn_get_right_heel_sense</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_right_heel_sense
</UL>
<BR>[Calls]<UL><LI><a href="#[252be2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e76c]"></a>dn_get_p0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252e730]"></a>dn_get_p1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252e85c]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[252e7a8]"></a>dn_get_motor_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_vel_rads &rArr; qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252bb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d308]"></a>dn_get_ankle_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_ankle_vel_rads &rArr; qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252bb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252c1ec]"></a>dn_get_left_ankle_pos_rads</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[252c1b0]"></a>dn_set_left_ankle_pos_rads</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[252e640]"></a>dn_outer_feet_motor_encoder_rezero</STRONG> (ARM, 240 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dn_outer_feet_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[252bb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
<LI><a href="#[252bbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[252bdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[252bee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[252bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[252c00c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[252c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[252e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[252efa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[252c174]"></a>dn_get_ankle_position</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
</UL>

<P><STRONG><a name="[252cf84]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25310ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252cfc0]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252c138]"></a>dn_get_dummy_1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bcc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_stiffness
</UL>

<P><STRONG><a name="[252c0fc]"></a>dn_get_dummy_2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_dampness
</UL>

<P><STRONG><a name="[252c0c0]"></a>dn_get_dummy_3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252bd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_command_current
</UL>

<P><STRONG><a name="[252c084]"></a>dn_get_dummy_4</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[252e5c8]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[2531070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[252d218]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[252bea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d0ec]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[252bea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252e550]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252e58c]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252ae3c]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[252ef28]"></a>adci_init</STRONG> (ARM, 200 bytes, Stack size 24 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252a89c]"></a>adci_convert_next</STRONG> (ARM, 124 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[252ef64]"></a>adci_convert_all</STRONG> (ARM, 144 bytes, Stack size 8 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adci_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252a860]"></a>adci_efilter_add</STRONG> (ARM, 88 bytes, Stack size 16 bytes, adc_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252cb4c]"></a>adci_isr</STRONG> (ARM, 240 bytes, Stack size 40 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adci_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[252be68]"></a>adci_get_result</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252c264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_raw_temp
<LI><a href="#[252c2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[252d1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[252d254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[252d290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
</UL>

<P><STRONG><a name="[252a824]"></a>adci_get_raw</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[252a7e8]"></a>adci_get_filter</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[252e514]"></a>ls_init_switch</STRONG> (ARM, 84 bytes, Stack size 8 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_init_switch &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252e4d8]"></a>ls_update</STRONG> (ARM, 124 bytes, Stack size 24 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ls_update
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252bdb4]"></a>ls_get_state</STRONG> (ARM, 56 bytes, Stack size 8 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252cffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_ls
<LI><a href="#[252d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_hs
<LI><a href="#[252d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_ls
<LI><a href="#[252d164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_hs
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[252e460]"></a>mc_init</STRONG> (ARM, 332 bytes, Stack size 56 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mc_init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2529708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[252bf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[252fcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[252fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252ced0]"></a>mc_set_target_current</STRONG> (ARM, 72 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_target_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[25298e8]"></a>mc_set_unsafe_target_current</STRONG> (ARM, 20 bytes, Stack size 8 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[25298ac]"></a>mc_update_watchdog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[2529870]"></a>mc_set_pwm</STRONG> (ARM, 384 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[2529834]"></a>mc_pid_current</STRONG> (ARM, 868 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2529690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_on
<LI><a href="#[25296cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_off
<LI><a href="#[2529870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[252fc84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult_to_long
<LI><a href="#[252fcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[252fcfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_int
<LI><a href="#[252fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252e49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[252e49c]"></a>mc_compliant_control</STRONG> (ARM, 148 bytes, Stack size 24 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc_compliant_control &rArr; mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[252fcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e424]"></a>mc_set_command_current</STRONG> (ARM, 44 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_command_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252bd3c]"></a>mc_get_command_current</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252c0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_3
</UL>

<P><STRONG><a name="[252e3ac]"></a>mc_set_stiffness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_stiffness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252bcc4]"></a>mc_get_stiffness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252c138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_1
</UL>

<P><STRONG><a name="[252e3e8]"></a>mc_set_dampness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_dampness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252bd00]"></a>mc_get_dampness</STRONG> (ARM, 24 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252c0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_2
</UL>

<P><STRONG><a name="[252bd78]"></a>mc_direction_control</STRONG> (ARM, 28 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[25297f8]"></a>mc_get_parameters</STRONG> (ARM, 8 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[25297bc]"></a>mc_get_pwm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[252cf48]"></a>mc_set_shutdown</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252cf0c]"></a>mc_set_sleep</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2529780]"></a>mc_get_mult</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[2529744]"></a>mc_run_no_control</STRONG> (ARM, 152 bytes, Stack size 16 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252edfc]"></a>ae_init_encoder</STRONG> (ARM, 124 bytes, Stack size 16 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ae_init_encoder &rArr; __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2528de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2528e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252edc0]"></a>ae_update</STRONG> (ARM, 140 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[252bdf0]"></a>ae_get_pos</STRONG> (ARM, 52 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252c174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_position
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
</UL>

<P><STRONG><a name="[252ed84]"></a>ae_wait</STRONG> (ARM, 20 bytes, Stack size 0 bytes, abs_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[252cad4]"></a>ae_isr</STRONG> (ARM, 224 bytes, Stack size 48 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ae_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[25288f8]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[25288bc]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2528880]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[25296cc]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[252e370]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2529690]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2529834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[252bc4c]"></a>mcu_led_green_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252c318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_green_heartbeat
</UL>

<P><STRONG><a name="[2528844]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[252bc88]"></a>mcu_led_blue_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[2528808]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[252bc10]"></a>mcu_led_red_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252c2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_red_heartbeat
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[25287cc]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2528790]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2528754]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2528718]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[25286dc]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[25286a0]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2528088]"></a>adcx_register_write</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[252804c]"></a>adcx_convert_cfg</STRONG> (ARM, 72 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[2528010]"></a>adcx_convert_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[2527fd4]"></a>adcx_register_read</STRONG> (ARM, 56 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[2527f98]"></a>adcx_read_buffer</STRONG> (ARM, 56 bytes, Stack size 8 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252cb10]"></a>adcx_isr</STRONG> (ARM, 336 bytes, Stack size 40 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adcx_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[252ee74]"></a>adcx_convert_all</STRONG> (ARM, 148 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2527f5c]"></a>adcx_write</STRONG> (ARM, 40 bytes, Stack size 16 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[252be2c]"></a>adcx_get_result</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252c228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[252d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_heel_sense
<LI><a href="#[252d0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[252d1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_heel_sense
<LI><a href="#[252d290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[252d2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[252e67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_right_hs
<LI><a href="#[252e6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
<LI><a href="#[252e6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_left_hs
</UL>

<P><STRONG><a name="[252ee38]"></a>adcx_init</STRONG> (ARM, 136 bytes, Stack size 8 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcx_init &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252eeec]"></a>adcx_add_config</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_add_config &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[252eeb0]"></a>adcx_conversion_wait</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e2bc]"></a>qdc_tmr0_cap01_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap01_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[252f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[307ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[25277dc]"></a>qdc_tmr0_cap01_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[307ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[252e208]"></a>qdc_tmr0_cap23_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap23_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[252f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[307ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[25277a0]"></a>qdc_tmr0_cap23_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[307ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2527764]"></a>qdc_tmr0_cap01_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[252bbd4]"></a>qdc_tmr0_cap01_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252e7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_pos_rads
</UL>

<P><STRONG><a name="[2527728]"></a>qdc_tmr0_cap01_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[252bb98]"></a>qdc_tmr0_cap01_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[252e7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_vel_rads
</UL>

<P><STRONG><a name="[25276ec]"></a>qdc_tmr0_cap23_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[25276b0]"></a>qdc_tmr0_cap23_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[2527674]"></a>qdc_tmr0_cap23_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[252bb5c]"></a>qdc_tmr0_cap23_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[252d308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_vel_rads
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[252e2f8]"></a>qdc_tmr0_cap01_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap01_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[307abcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[307af50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e244]"></a>qdc_tmr0_cap23_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap23_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2531034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[307abcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[307af50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e334]"></a>qdc_tmr0_cap01_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap01_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[307abcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e280]"></a>qdc_tmr0_cap23_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap23_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[307abcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252e1cc]"></a>qdc_tmr0_init</STRONG> (ARM, 1224 bytes, Stack size 96 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2527638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[2528de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[252bf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[252bf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[252bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[252c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[252f978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[252f9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2531bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[25270d4]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[252d4ac]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[252d470]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2527098]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[252705c]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2527020]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526fe4]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526fa8]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526f6c]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526f30]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[252d380]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[252d3bc]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2526ef4]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526eb8]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526e7c]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2526e40]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[252d3f8]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[252d434]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2526e04]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[252d524]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[307ba18]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[252ed0c]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[307b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[307b9dc]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b9a0]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[307b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[307b964]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b928]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[307b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[307b8ec]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b8b0]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[307b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[307b874]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b838]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b7fc]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b7c0]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b784]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b748]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[252ed0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[307b8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[307b928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[307b9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[307b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[307b70c]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[307b388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[307b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[252d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
<LI><a href="#[307b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>

<P><STRONG><a name="[252d344]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[307b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[252e85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
<LI><a href="#[252e8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_right_heel_sense
<LI><a href="#[252e910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rate
<LI><a href="#[252e94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_vel
<LI><a href="#[252e988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_pos
<LI><a href="#[252e9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_current
<LI><a href="#[252ea00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[252ea3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_right
<LI><a href="#[252ea78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_left
<LI><a href="#[252eab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_left_heel_sense
<LI><a href="#[252eaf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hs_right
<LI><a href="#[252eb2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hs_left
<LI><a href="#[252eb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hbridge_temp
<LI><a href="#[252eba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[252ebe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[252ec1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_voltage
<LI><a href="#[252ec58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_power
<LI><a href="#[252ec94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_current
<LI><a href="#[252ecd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_angle
</UL>

<P><STRONG><a name="[307b6d0]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[307b388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[307b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[252ed48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[307b694]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[252ed48]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[307b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[252efdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[252ca5c]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx1_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[307ba54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[307b658]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307ba54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[307b61c]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307ba54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[307b5e0]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307ba54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[307b5a4]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b568]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b52c]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b4f0]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[252d4e8]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2531ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[307b4b4]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b478]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b43c]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b400]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[307b3c4]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[252ca98]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[253092c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[307af8c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[307af50]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3079894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[252e2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
</UL>

<P><STRONG><a name="[307ae24]"></a>__aeabi_ldivmod</STRONG> (ARM, 168 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30797a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25277a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[25277dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[252e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[252e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
</UL>

<P><STRONG><a name="[307acf8]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25277a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[25277dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[252e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[252e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[30797a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[307acbc]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[307abcc]"></a>__aeabi_lasr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[252e280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[252e2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[252e334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
</UL>

<P><STRONG><a name="[307ab90]"></a>_ll_sshift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[307a848]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307a884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[252bee0]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[307a884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[252bf1c]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[307a884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[252bf58]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252d0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[252d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[252d218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
<LI><a href="#[252d254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[252d290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[252d2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[2529708]"></a>__aeabi_fdiv</STRONG> (ARM, 140 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[252f9b4]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[252fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[307a578]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[252c00c]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[307a44c]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[307a410]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[252bfd0]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[307a398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[2528de4]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[307a398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[252f93c]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25276b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_angle_float
<LI><a href="#[252bb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
<LI><a href="#[252bb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
<LI><a href="#[252bbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[252d074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_heel_sense
<LI><a href="#[252d0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[252d1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_heel_sense
<LI><a href="#[252d1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[252d254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[252d290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[252d2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[252e460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[252e604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[252fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[252bea4]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252d038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_hs
<LI><a href="#[252d0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[252d164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_hs
<LI><a href="#[252d218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[252f978]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[252e2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[252fc48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[252fdb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[2527638]"></a>__aeabi_f2uiz</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
</UL>

<P><STRONG><a name="[2528e20]"></a>__aeabi_d2iz</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[30796b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[252bf94]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[252edfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[252c048]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252e1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[252e640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[30798d0]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3079894]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[307af50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[30797a4]"></a>__aeabi_uldivmod</STRONG> (ARM, 144 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30796b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[307ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[30796b4]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2528e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[30797a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[3079678]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[30795c4]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[30794d4]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30794d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[30794d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[307a7d0]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30794d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2529708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[252bea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[252c048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[252f93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[307a884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[30793e4]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[307a398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[307a398]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30793e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2528de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[252bfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[307a488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[30792f4]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3079aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3079b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[30792b8]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3078dcc]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3078d90]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[253173c]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qdc_2x_fiq_handler.o(FIQ_HANDLER))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[307b388]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[307b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[307b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[3078f34]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3078f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3078f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[3078ef8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3078ebc]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25319d0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25319d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25319d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2531994]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2531994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2531994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2531958]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2531958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2531958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[253191c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[253191c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[253191c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25318e0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25318e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25318e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2526918]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[25268dc]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[307a884]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[307a7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[252bee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[252bf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[307a848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[307a488]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30796b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[307a398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[307acf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[252c00c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[307a410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[307a44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
