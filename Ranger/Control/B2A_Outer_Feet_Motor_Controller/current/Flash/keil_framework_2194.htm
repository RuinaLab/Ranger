<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Fri Mar 04 13:49:42 2016
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f327b4]">Reset_Handler</a>
 <LI><a href="#[1f3273c]">FIQ_Handler</a>
 <LI><a href="#[1f329d0]">Undef_Handler</a>
 <LI><a href="#[1f32994]">SWI_Handler</a>
 <LI><a href="#[1f32958]">PAbt_Handler</a>
 <LI><a href="#[1f3291c]">DAbt_Handler</a>
 <LI><a href="#[1f328e0]">IRQ_Handler</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f31698]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f31698]">mutex_lock</a><BR>
 <LI><a href="#[1fac4d4]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fac4d4]">_float_round</a><BR>
 <LI><a href="#[1f329d0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f329d0]">Undef_Handler</a><BR>
 <LI><a href="#[1f32994]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f32994]">SWI_Handler</a><BR>
 <LI><a href="#[1f32958]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f32958]">PAbt_Handler</a><BR>
 <LI><a href="#[1f3291c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f3291c]">DAbt_Handler</a><BR>
 <LI><a href="#[1f328e0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f328e0]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f31620]">voidvoid</a>
 <LI><a href="#[1f31710]">intvoid</a>
 <LI><a href="#[1f30b94]">voidint</a>
 <LI><a href="#[1f31620]">voidvoid</a>
 <LI><a href="#[1f31710]">intvoid</a>
 <LI><a href="#[1f327b4]">Reset_Handler</a>
 <LI><a href="#[1f329d0]">Undef_Handler</a>
 <LI><a href="#[1f32994]">SWI_Handler</a>
 <LI><a href="#[1f32958]">PAbt_Handler</a>
 <LI><a href="#[1f3291c]">DAbt_Handler</a>
 <LI><a href="#[1f328e0]">IRQ_Handler</a>
 <LI><a href="#[1f3273c]">FIQ_Handler</a>
 <LI><a href="#[1fae25c]">__main</a>
 <LI><a href="#[1f32d18]">main</a>
 <LI><a href="#[1f32070]">asched_get_timestamp</a>
 <LI><a href="#[1f2f85c]">dn_error_transmit</a>
 <LI><a href="#[1f2f898]">dn_blue_heartbeat</a>
 <LI><a href="#[1f2f7a8]">dn_get_motor_vel_rads</a>
 <LI><a href="#[1f2f7e4]">dn_get_motor_pos_rads</a>
 <LI><a href="#[1f2f6b8]">dn_get_raw_motor_current</a>
 <LI><a href="#[1f2f76c]">dn_get_p0</a>
 <LI><a href="#[1f2f730]">dn_get_p1</a>
 <LI><a href="#[1f2f67c]">dn_get_raw_right_hs</a>
 <LI><a href="#[1f2f6f4]">dn_get_raw_left_hs</a>
 <LI><a href="#[1f2df84]">dn_rx_timestamp</a>
 <LI><a href="#[1f2e4ac]">can_rx_setter_float_dummy</a>
 <LI><a href="#[1f2e470]">can_rx_setter_int_dummy</a>
 <LI><a href="#[1f2f424]">mc_set_command_current</a>
 <LI><a href="#[1f2f3ac]">mc_set_stiffness</a>
 <LI><a href="#[1f2f3e8]">mc_set_dampness</a>
 <LI><a href="#[1f2ded0]">mc_set_target_current</a>
 <LI><a href="#[1f2df48]">mc_set_shutdown</a>
 <LI><a href="#[1f2df0c]">mc_set_sleep</a>
 <LI><a href="#[1f31878]">error_get_time</a>
 <LI><a href="#[1f3183c]">error_get_info</a>
 <LI><a href="#[1f32070]">asched_get_timestamp</a>
 <LI><a href="#[1f2f7e4]">dn_get_motor_pos_rads</a>
 <LI><a href="#[1f2f7a8]">dn_get_motor_vel_rads</a>
 <LI><a href="#[1f2e0b0]">dn_get_motor_current</a>
 <LI><a href="#[1f2f820]">dn_get_ankle_pos_rads</a>
 <LI><a href="#[1f2e308]">dn_get_ankle_vel_rads</a>
 <LI><a href="#[1f2e290]">dn_get_battery_power</a>
 <LI><a href="#[1f2dffc]">dn_get_right_ls</a>
 <LI><a href="#[1f2e128]">dn_get_left_ls</a>
 <LI><a href="#[1f2e038]">dn_get_right_hs</a>
 <LI><a href="#[1f2e164]">dn_get_left_hs</a>
 <LI><a href="#[1f2dfc0]">dn_get_status</a>
 <LI><a href="#[1f2e2cc]">dn_get_battery_current</a>
 <LI><a href="#[1f2e254]">dn_get_battery_voltage</a>
 <LI><a href="#[1f2e1dc]">dn_get_hbridge_temp</a>
 <LI><a href="#[1f2e074]">dn_get_right_heel_sense</a>
 <LI><a href="#[1f2e1a0]">dn_get_left_heel_sense</a>
 <LI><a href="#[1f2e218]">dn_get_execution_time</a>
 <LI><a href="#[1f2e0ec]">dn_get_max_execution_time</a>
 <LI><a href="#[1f2da5c]">can_rx1_isr</a>
 <LI><a href="#[1f2db10]">adcx_isr</a>
 <LI><a href="#[1f2db4c]">adci_isr</a>
 <LI><a href="#[1f305b8]">timer1_isr</a>
 <LI><a href="#[1f2da98]">can_error_isr</a>
 <LI><a href="#[1f2dad4]">ae_isr</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f27918]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
 <LI><a href="#[1f278dc]">__switch$$</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2fcd0]">can_tx_angle</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2f910]">can_tx_rate</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2f8d4]">can_tx_right_heel_sense</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2faf0]">can_tx_hs_right</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2fb2c]">can_tx_hs_left</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2f988]">can_tx_motor_pos</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2fab4]">can_tx_left_heel_sense</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2f9c4]">can_tx_motor_current</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f2ffdc]">task_every_row</a>
 <LI><a href="#[1f2ffa0]">run_occasionally</a>
 <LI><a href="#[1f2f5c8]">dn_sched_done</a>
 <LI><a href="#[1f31620]">voidvoid</a>
 <LI><a href="#[1f31710]">intvoid</a>
 <LI><a href="#[1f30b94]">voidint</a>
 <LI><a href="#[1f31620]">voidvoid</a>
 <LI><a href="#[1f31710]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f327b4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1fae25c]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[1facc18]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1facb28]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1fac2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1facaec]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1fac2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1fac9fc]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[1faea54]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2da5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
<LI><a href="#[1fae5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[1fae61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[1fae658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
</UL>

<P><STRONG><a name="[1f32d54]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[1f32c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[1f32c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1f32d18]"></a>main</STRONG> (ARM, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[1f32c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[1f32c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[1f32cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1f32124]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f320e8]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f305b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[1f320ac]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2df84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[1f32cdc]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f32070]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f31968]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f32034]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3165c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1f31698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f28f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_write
<LI><a href="#[1f28f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_read_buffer
<LI><a href="#[1f2a744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_run_no_control
<LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[1f2a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[1f2b860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_efilter_add
<LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[1f2cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[1f2dad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_isr
<LI><a href="#[1f2db10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_isr
<LI><a href="#[1f2db4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_isr
<LI><a href="#[1f2ded0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[1f2f244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[1f2f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[1f2f49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[1f2f514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_init_switch
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[1f2fe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[1f2fe74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[1f2feec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[1f2ff64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[1f30b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[1f30b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[1f31620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
<LI><a href="#[1f31710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[1f320e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[1f3192c]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3165c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1f31698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2da98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[1f318f0]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3165c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[1f31698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[1f318b4]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f31878]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f3183c]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f31800]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[1f317c4]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[1f31788]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[1f3174c]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f316d4]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f318f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[1f3192c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f31698]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f31698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f31698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[1f318f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[1f3192c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f3165c]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f318f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[1f3192c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f30db0]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1f309b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2a8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_unsafe_target_current
<LI><a href="#[1f2ded0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[1f2f3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[1f2f3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[1f2f424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[1f30d74]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f30d38]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fixed_to_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f309b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[1f30cfc]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[1f30cc0]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[1f30c84]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[1f30c48]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1f309b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2d228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[1f2d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[1f2f6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
</UL>

<P><STRONG><a name="[1f30c0c]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f31620]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[1f30bd0]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f30b94]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[1f30b58]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f30b1c]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f30ae0]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f31710]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[1f30aa4]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f30a68]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f30a2c]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f309f0]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[1f32c64]"></a>init_hardware</STRONG> (ARM, 1172 bytes, Stack size 16 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f32d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f305b8]"></a>timer1_isr</STRONG> (ARM, 40 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer1_isr &rArr; asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f320e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1f2ffdc]"></a>task_every_row</STRONG> (ARM, 72 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2f244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[1f2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[1f2f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[1f2f334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
<LI><a href="#[1f2f370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[1f2f49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[1f2f4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_update
<LI><a href="#[1f2f58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2fd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[1f2fd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[1f2fdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
<LI><a href="#[1f2fe74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[1f2feb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_conversion_wait
<LI><a href="#[1f2ff64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[1f318b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2ffa0]"></a>run_occasionally</STRONG> (ARM, 256 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = run_occasionally &rArr; dn_outer_feet_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_right_heel_sense
<LI><a href="#[1f2f910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rate
<LI><a href="#[1f2f94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_vel
<LI><a href="#[1f2fa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[1f2fa3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_right
<LI><a href="#[1f2fa78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_left
<LI><a href="#[1f2fb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hbridge_temp
<LI><a href="#[1f2fba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[1f2fbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[1f2fc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_voltage
<LI><a href="#[1f2fc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_power
<LI><a href="#[1f2fc94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_current
<LI><a href="#[1f3174c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f32bec]"></a>init_software</STRONG> (ARM, 388 bytes, Stack size 64 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[1f2f3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[1f2f424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_init_switch
<LI><a href="#[1f2f550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[1f2fe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[1f2feec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[1f2ff28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_init
<LI><a href="#[1f31968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[1f32124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f32d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f32bb0]"></a>init_values</STRONG> (ARM, 32 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_values &rArr; qdc_tmr0_cap23_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2f208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[1f2f2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[1f2f820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[1f2fd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_wait
<LI><a href="#[1f2fdc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f32d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f32ca0]"></a>init_can</STRONG> (ARM, 800 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[1f2e3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[1f2e3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[1f2e434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[1f2e4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[1f2e524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f32d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f2f988]"></a>can_tx_motor_pos</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_pos &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2f94c]"></a>can_tx_motor_vel</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_vel &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2f9c4]"></a>can_tx_motor_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2fcd0]"></a>can_tx_angle</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_angle &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2f910]"></a>can_tx_rate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rate &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2fc58]"></a>can_tx_batt_power</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_power &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fa3c]"></a>can_tx_ls_right</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ls_right &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fa78]"></a>can_tx_ls_left</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ls_left &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2faf0]"></a>can_tx_hs_right</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hs_right &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2fb2c]"></a>can_tx_hs_left</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hs_left &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2fbe0]"></a>can_tx_board_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_board_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fc94]"></a>can_tx_batt_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fc1c]"></a>can_tx_batt_voltage</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_batt_voltage &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fb68]"></a>can_tx_hbridge_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_hbridge_temp &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fab4]"></a>can_tx_left_heel_sense</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_left_heel_sense &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2f8d4]"></a>can_tx_right_heel_sense</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_right_heel_sense &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2fba4]"></a>can_tx_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2fa00]"></a>can_tx_max_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_max_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f32c28]"></a>init_interrupts</STRONG> (ARM, 200 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f32d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1f2e128]"></a>dn_get_left_ls</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_left_ls &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2dffc]"></a>dn_get_right_ls</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_right_ls &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f7e4]"></a>dn_get_motor_pos_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_pos_rads &rArr; qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f820]"></a>dn_get_ankle_pos_rads</STRONG> (ARM, 36 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_ankle_pos_rads &rArr; ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f604]"></a>dn_safety</STRONG> (ARM, 268 bytes, Stack size 24 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dn_safety &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[1f2cc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[1f2cd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_direction_control
<LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[1f2cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[1f2cf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f898]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f2cc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2d318]"></a>dn_green_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2cc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_blink
</UL>

<P><STRONG><a name="[1f2d2dc]"></a>dn_red_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2cc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
</UL>

<P><STRONG><a name="[1f2e254]"></a>dn_get_battery_voltage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2d2a0]"></a>dn_get_raw_battery_voltage</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[1f30c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[1f2d264]"></a>dn_get_hbridge_raw_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
</UL>

<P><STRONG><a name="[1f2e1dc]"></a>dn_get_hbridge_temp</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_hbridge_temp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f6b8]"></a>dn_get_raw_motor_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_get_raw_motor_current &rArr; linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f30c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e0b0]"></a>dn_get_motor_current</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_current
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e2cc]"></a>dn_get_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_current
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2d228]"></a>dn_get_raw_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f30c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[1f2e290]"></a>dn_get_battery_power</STRONG> (ARM, 48 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f2ce68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f67c]"></a>dn_get_raw_right_hs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_raw_right_hs
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f6f4]"></a>dn_get_raw_left_hs</STRONG> (ARM, 52 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_raw_left_hs
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e038]"></a>dn_get_right_hs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_right_hs &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[1f2cea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e164]"></a>dn_get_left_hs</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_left_hs &rArr; ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_get_state
<LI><a href="#[1f2cea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e1a0]"></a>dn_get_left_heel_sense</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_left_heel_sense
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e074]"></a>dn_get_right_heel_sense</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_right_heel_sense
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2ce2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f76c]"></a>dn_get_p0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f730]"></a>dn_get_p1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f85c]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f7a8]"></a>dn_get_motor_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_vel_rads &rArr; qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e308]"></a>dn_get_ankle_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_ankle_vel_rads &rArr; qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2d1ec]"></a>dn_get_left_ankle_pos_rads</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[1f2d1b0]"></a>dn_set_left_ankle_pos_rads</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[1f2f640]"></a>dn_outer_feet_motor_encoder_rezero</STRONG> (ARM, 240 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dn_outer_feet_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
<LI><a href="#[1f2cbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[1f2cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[1f2cee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f2cf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f2cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f2d00c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1f2d048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f2f2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[1f2d174]"></a>dn_get_ankle_position</STRONG> (ARM, 24 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2cdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
</UL>

<P><STRONG><a name="[1f2df84]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f320ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2dfc0]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2d138]"></a>dn_get_dummy_1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2ccc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_stiffness
</UL>

<P><STRONG><a name="[1f2d0fc]"></a>dn_get_dummy_2</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2cd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_dampness
</UL>

<P><STRONG><a name="[1f2d0c0]"></a>dn_get_dummy_3</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2cd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_get_command_current
</UL>

<P><STRONG><a name="[1f2d084]"></a>dn_get_dummy_4</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[1f2f5c8]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1f2e218]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e0ec]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2cea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2f550]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2f58c]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2be3c]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[1f2ff28]"></a>adci_init</STRONG> (ARM, 200 bytes, Stack size 24 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2b89c]"></a>adci_convert_next</STRONG> (ARM, 124 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[1f2ff64]"></a>adci_convert_all</STRONG> (ARM, 144 bytes, Stack size 8 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adci_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2b860]"></a>adci_efilter_add</STRONG> (ARM, 88 bytes, Stack size 16 bytes, adc_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f2db4c]"></a>adci_isr</STRONG> (ARM, 240 bytes, Stack size 40 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adci_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1f2ce68]"></a>adci_get_result</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2d264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_raw_temp
<LI><a href="#[1f2d2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[1f2e1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[1f2e254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[1f2e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
</UL>

<P><STRONG><a name="[1f2b824]"></a>adci_get_raw</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[1f2b7e8]"></a>adci_get_filter</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[1f2f514]"></a>ls_init_switch</STRONG> (ARM, 84 bytes, Stack size 8 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_init_switch &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2f4d8]"></a>ls_update</STRONG> (ARM, 124 bytes, Stack size 24 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ls_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2cdb4]"></a>ls_get_state</STRONG> (ARM, 56 bytes, Stack size 8 bytes, limit_switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_get_state &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2dffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_ls
<LI><a href="#[1f2e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_hs
<LI><a href="#[1f2e128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_ls
<LI><a href="#[1f2e164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_hs
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[1f2f460]"></a>mc_init</STRONG> (ARM, 332 bytes, Stack size 56 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mc_init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1f2cf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f30cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[1f30d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2ded0]"></a>mc_set_target_current</STRONG> (ARM, 72 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_target_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2a8e8]"></a>mc_set_unsafe_target_current</STRONG> (ARM, 20 bytes, Stack size 8 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[1f2a8ac]"></a>mc_update_watchdog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[1f2a870]"></a>mc_set_pwm</STRONG> (ARM, 384 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[1f2a834]"></a>mc_pid_current</STRONG> (ARM, 868 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2a690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_on
<LI><a href="#[1f2a6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_off
<LI><a href="#[1f2a870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[1f30c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult_to_long
<LI><a href="#[1f30cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[1f30cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_int
<LI><a href="#[1f30d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[1f2f49c]"></a>mc_compliant_control</STRONG> (ARM, 148 bytes, Stack size 24 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc_compliant_control &rArr; mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[1f30cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f424]"></a>mc_set_command_current</STRONG> (ARM, 44 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_command_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2cd3c]"></a>mc_get_command_current</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2d0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_3
</UL>

<P><STRONG><a name="[1f2f3ac]"></a>mc_set_stiffness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_stiffness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2ccc4]"></a>mc_get_stiffness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2d138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_1
</UL>

<P><STRONG><a name="[1f2f3e8]"></a>mc_set_dampness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_dampness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2cd00]"></a>mc_get_dampness</STRONG> (ARM, 24 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2d0fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_dummy_2
</UL>

<P><STRONG><a name="[1f2cd78]"></a>mc_direction_control</STRONG> (ARM, 28 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[1f2a7f8]"></a>mc_get_parameters</STRONG> (ARM, 8 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[1f2a7bc]"></a>mc_get_pwm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[1f2df48]"></a>mc_set_shutdown</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2df0c]"></a>mc_set_sleep</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2a780]"></a>mc_get_mult</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[1f2a744]"></a>mc_run_no_control</STRONG> (ARM, 152 bytes, Stack size 16 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f2fdfc]"></a>ae_init_encoder</STRONG> (ARM, 124 bytes, Stack size 16 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ae_init_encoder &rArr; __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f29de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f29e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f2cf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2fdc0]"></a>ae_update</STRONG> (ARM, 140 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[1f2cdf0]"></a>ae_get_pos</STRONG> (ARM, 52 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2d174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_position
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2f820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
</UL>

<P><STRONG><a name="[1f2fd84]"></a>ae_wait</STRONG> (ARM, 20 bytes, Stack size 0 bytes, abs_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[1f2dad4]"></a>ae_isr</STRONG> (ARM, 224 bytes, Stack size 48 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ae_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1f298f8]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f298bc]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f29880]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f2a6cc]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[1f2f370]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2a690]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2a834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[1f2cc4c]"></a>mcu_led_green_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f2d318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_green_heartbeat
</UL>

<P><STRONG><a name="[1f29844]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f2cc88]"></a>mcu_led_blue_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[1f29808]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f2cc10]"></a>mcu_led_red_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2d2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_red_heartbeat
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[1f297cc]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f29790]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f29754]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f29718]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f296dc]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f296a0]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[1f29088]"></a>adcx_register_write</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[1f2904c]"></a>adcx_convert_cfg</STRONG> (ARM, 72 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[1f29010]"></a>adcx_convert_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[1f28fd4]"></a>adcx_register_read</STRONG> (ARM, 56 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[1f28f98]"></a>adcx_read_buffer</STRONG> (ARM, 56 bytes, Stack size 8 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f2db10]"></a>adcx_isr</STRONG> (ARM, 336 bytes, Stack size 40 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adcx_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1f2fe74]"></a>adcx_convert_all</STRONG> (ARM, 148 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f28f5c]"></a>adcx_write</STRONG> (ARM, 40 bytes, Stack size 16 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[1f2ce2c]"></a>adcx_get_result</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2d228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[1f2e074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_heel_sense
<LI><a href="#[1f2e0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[1f2e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_heel_sense
<LI><a href="#[1f2e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[1f2e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[1f2f67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_right_hs
<LI><a href="#[1f2f6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
<LI><a href="#[1f2f6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_left_hs
</UL>

<P><STRONG><a name="[1f2fe38]"></a>adcx_init</STRONG> (ARM, 136 bytes, Stack size 8 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcx_init &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2feec]"></a>adcx_add_config</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_add_config &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f2feb0]"></a>adcx_conversion_wait</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f2bc]"></a>qdc_tmr0_cap01_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap01_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1fade24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[1f287dc]"></a>qdc_tmr0_cap01_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1fade24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1f2f208]"></a>qdc_tmr0_cap23_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap23_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f30978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1fade24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[1f287a0]"></a>qdc_tmr0_cap23_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1fade24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1f28764]"></a>qdc_tmr0_cap01_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[1f2cbd4]"></a>qdc_tmr0_cap01_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap01_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2f7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_pos_rads
</UL>

<P><STRONG><a name="[1f28728]"></a>qdc_tmr0_cap01_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[1f2cb98]"></a>qdc_tmr0_cap01_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_vel_rads
</UL>

<P><STRONG><a name="[1f286ec]"></a>qdc_tmr0_cap23_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[1f286b0]"></a>qdc_tmr0_cap23_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[1f28674]"></a>qdc_tmr0_cap23_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[1f2cb5c]"></a>qdc_tmr0_cap23_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2e308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_vel_rads
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[1f2f2f8]"></a>qdc_tmr0_cap01_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap01_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[1fadbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1fadf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f244]"></a>qdc_tmr0_cap23_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap23_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f32034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[1fadbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1fadf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f334]"></a>qdc_tmr0_cap01_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap01_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1fadbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f280]"></a>qdc_tmr0_cap23_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap23_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1fadbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2f1cc]"></a>qdc_tmr0_init</STRONG> (ARM, 1224 bytes, Stack size 96 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f28638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1f29de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f2cf58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1f2cf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1f2cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1f2d048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f30978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1f309b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[1f280d4]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f2e4ac]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f2e470]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[1f28098]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f2805c]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f28020]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27fe4]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27fa8]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27f6c]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27f30]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f2e380]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1f2e3bc]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1f27ef4]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27eb8]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27e7c]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f27e40]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f2e3f8]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1f2e434]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1f27e04]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[1f2e524]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1faea18]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1f2fd0c]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[1fae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[1fae9dc]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae9a0]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[1fae964]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae928]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[1fae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[1fae8ec]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae8b0]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[1fae874]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae838]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae7fc]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae7c0]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae784]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae748]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2fd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[1fae8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[1fae928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[1fae9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fae70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[1fae70c]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1fae388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[1fae748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2e344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
<LI><a href="#[1fae6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>

<P><STRONG><a name="[1f2e344]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1fae70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
<LI><a href="#[1f2f8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_right_heel_sense
<LI><a href="#[1f2f910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rate
<LI><a href="#[1f2f94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_vel
<LI><a href="#[1f2f988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_pos
<LI><a href="#[1f2f9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_current
<LI><a href="#[1f2fa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[1f2fa3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_right
<LI><a href="#[1f2fa78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ls_left
<LI><a href="#[1f2fab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_left_heel_sense
<LI><a href="#[1f2faf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hs_right
<LI><a href="#[1f2fb2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hs_left
<LI><a href="#[1f2fb68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_hbridge_temp
<LI><a href="#[1f2fba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[1f2fbe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[1f2fc1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_voltage
<LI><a href="#[1f2fc58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_power
<LI><a href="#[1f2fc94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_batt_current
<LI><a href="#[1f2fcd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_angle
</UL>

<P><STRONG><a name="[1fae6d0]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1fae388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[1fae70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2fd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[1fae694]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1f2fd48]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx1
</UL>
<BR>[Calls]<UL><LI><a href="#[1fae6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2ffdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[1f2da5c]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx1_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1faea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1fae658]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1faea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[1fae61c]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1faea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[1fae5e0]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1faea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[1fae5a4]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae568]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae52c]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae4f0]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1f2e4e8]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f32ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[1fae4b4]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae478]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae43c]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae400]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1fae3c4]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[1f2da98]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3192c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[1fadf8c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[1fadf50]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[1f2f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
</UL>

<P><STRONG><a name="[1fade24]"></a>__aeabi_ldivmod</STRONG> (ARM, 168 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f287a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[1f287dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[1f2f208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[1f2f2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
</UL>

<P><STRONG><a name="[1fadcf8]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f287a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[1f287dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[1f2f208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[1f2f2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[1fac7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1fadcbc]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1fadbcc]"></a>__aeabi_lasr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[1f2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[1f2f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[1f2f334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
</UL>

<P><STRONG><a name="[1fadb90]"></a>_ll_sshift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1fad848]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fad884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[1f2cee0]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[1f2cf1c]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[1f2cf58]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2e0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[1f2e0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[1f2e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
<LI><a href="#[1f2e254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[1f2e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[1f2e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2f820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[1f2a708]"></a>__aeabi_fdiv</STRONG> (ARM, 140 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[1f309b4]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f30c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[1f30d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[1fad578]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[1f2d00c]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[1fad44c]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1fad410]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1f2cfd0]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[1f29de4]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[1f3093c]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f286b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_angle_float
<LI><a href="#[1f2cb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
<LI><a href="#[1f2cb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
<LI><a href="#[1f2cbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[1f2e074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_heel_sense
<LI><a href="#[1f2e0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[1f2e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_heel_sense
<LI><a href="#[1f2e1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[1f2e254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[1f2e290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[1f2e2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[1f2f460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[1f2f604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2f820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_ankle_pos_rads
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[1f30d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[1f2cea4]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2e038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_right_hs
<LI><a href="#[1f2e0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[1f2e164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_left_hs
<LI><a href="#[1f2e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[1f30978]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[1f2f2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[1f30c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[1f30db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[1f28638]"></a>__aeabi_f2uiz</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
</UL>

<P><STRONG><a name="[1f29e20]"></a>__aeabi_d2iz</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[1f2cf94]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
<LI><a href="#[1f2fdfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[1f2d048]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[1f2f640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_outer_feet_motor_encoder_rezero
</UL>

<P><STRONG><a name="[1fac8d0]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1fac894]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fadf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1fac7a4]"></a>__aeabi_uldivmod</STRONG> (ARM, 144 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fade24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[1fac6b4]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f29e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1fac7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1fac678]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1fac5c4]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1fac4d4]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fac4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1fac4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[1fad7d0]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fac4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2a708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1f2cea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1f2d048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f3093c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1fad884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[1fac3e4]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1fad398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1fad398]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f29de4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f2cfd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1fad488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1fac2f4]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1facaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1facb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1fac2b8]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1fabdcc]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1fabd90]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f3273c]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qdc_2x_fiq_handler.o(FIQ_HANDLER))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1fae388]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[1fae6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[1fae70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[1fabf34]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fabf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fabf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1fabef8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1fabebc]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1f329d0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f329d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f329d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f32994]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f32994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f32958]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f32958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f32958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f3291c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f3291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3291c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f328e0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f328e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f328e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f27918]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1f278dc]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1fad884]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[1fad7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2cee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1f2cf1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1fad848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1fad488]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fac6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fad398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1fadcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2d00c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1fad410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1fad44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
