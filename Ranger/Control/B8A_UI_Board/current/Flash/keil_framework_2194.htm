<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Aug 31 22:09:24 2015
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6a8694]">Reset_Handler</a>
 <LI><a href="#[6a88b0]">Undef_Handler</a>
 <LI><a href="#[6a8874]">SWI_Handler</a>
 <LI><a href="#[6a8838]">PAbt_Handler</a>
 <LI><a href="#[6a87fc]">DAbt_Handler</a>
 <LI><a href="#[6a87c0]">IRQ_Handler</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6a4b84]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a4b84]">mutex_lock</a><BR>
 <LI><a href="#[2fc26a0]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2fc26a0]">_float_round</a><BR>
 <LI><a href="#[6a88b0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a88b0]">Undef_Handler</a><BR>
 <LI><a href="#[6a8874]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a8874]">SWI_Handler</a><BR>
 <LI><a href="#[6a8838]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a8838]">PAbt_Handler</a><BR>
 <LI><a href="#[6a87fc]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a87fc]">DAbt_Handler</a><BR>
 <LI><a href="#[6a87c0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a87c0]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
 <LI><a href="#[6a4080]">voidint</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0a20]">can_tx_roll</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0cb4]">can_tx_ang_rate_x</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0d68]">run_occasionally</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
 <LI><a href="#[6a8694]">Reset_Handler</a>
 <LI><a href="#[6a88b0]">Undef_Handler</a>
 <LI><a href="#[6a8874]">SWI_Handler</a>
 <LI><a href="#[6a8838]">PAbt_Handler</a>
 <LI><a href="#[6a87fc]">DAbt_Handler</a>
 <LI><a href="#[6a87c0]">IRQ_Handler</a>
 <LI><a href="#[6a861c]">FIQ_Handler</a>
 <LI><a href="#[2fce1a8]">__main</a>
 <LI><a href="#[6a38c4]">main</a>
 <LI><a href="#[6a186c]">can_rx2_isr</a>
 <LI><a href="#[6a1830]">lcd_isr</a>
 <LI><a href="#[6a17b8]">rcx_isr</a>
 <LI><a href="#[6a17f4]">msimu_isr</a>
 <LI><a href="#[6a18a8]">can_error_isr</a>
 <LI><a href="#[6a555c]">asched_get_timestamp</a>
 <LI><a href="#[6a3180]">dn_error_transmit</a>
 <LI><a href="#[6a31bc]">dn_blue_heartbeat</a>
 <LI><a href="#[6a5610]">asched_tick</a>
 <LI><a href="#[6a2f28]">dn_rx_timestamp</a>
 <LI><a href="#[69fae4]">can_rx_setter_float_dummy</a>
 <LI><a href="#[69faa8]">can_rx_setter_int_dummy</a>
 <LI><a href="#[6a2eb0]">dn_rx_lcd_quad_1</a>
 <LI><a href="#[6a2e74]">dn_rx_lcd_quad_2</a>
 <LI><a href="#[6a2e38]">dn_rx_lcd_quad_3</a>
 <LI><a href="#[6a2dfc]">dn_rx_lcd_quad_4</a>
 <LI><a href="#[6a2dc0]">dn_rx_led_1</a>
 <LI><a href="#[6a2d84]">dn_rx_led_2</a>
 <LI><a href="#[6a2d48]">dn_rx_led_3</a>
 <LI><a href="#[6a2d0c]">dn_rx_led_4</a>
 <LI><a href="#[6a2cd0]">dn_rx_led_5</a>
 <LI><a href="#[6a2c94]">dn_rx_led_6</a>
 <LI><a href="#[6a2c1c]">dn_rx_buzzer</a>
 <LI><a href="#[6a2be0]">dn_rx_buzzer_amp</a>
 <LI><a href="#[6a2ba4]">dn_rx_play_song</a>
 <LI><a href="#[6a4d64]">error_get_time</a>
 <LI><a href="#[6a4d28]">error_get_info</a>
 <LI><a href="#[6a555c]">asched_get_timestamp</a>
 <LI><a href="#[6a30cc]">dn_get_roll</a>
 <LI><a href="#[6a3090]">dn_get_pitch</a>
 <LI><a href="#[6a3054]">dn_get_yam</a>
 <LI><a href="#[6a3018]">dn_get_angRateX</a>
 <LI><a href="#[6a2fdc]">dn_get_angRateY</a>
 <LI><a href="#[6a2fa0]">dn_get_angRateZ</a>
 <LI><a href="#[6a2c58]">dn_get_buttons</a>
 <LI><a href="#[69f97c]">rcx_get_chan_0</a>
 <LI><a href="#[69f940]">rcx_get_chan_1</a>
 <LI><a href="#[69f904]">rcx_get_chan_2</a>
 <LI><a href="#[69f8c8]">rcx_get_chan_3</a>
 <LI><a href="#[6a2eec]">dn_get_status</a>
 <LI><a href="#[6a2b2c]">dn_get_execution_time</a>
 <LI><a href="#[6a2af0]">dn_get_max_execution_time</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69e680]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69be6c]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b200]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
 <LI><a href="#[69b1c4]">__switch$$</a>
 <LI><a href="#[2fc8334]">_sputc</a>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
 <LI><a href="#[6a4080]">voidint</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0a20]">can_tx_roll</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0cb4]">can_tx_ang_rate_x</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a0da4]">task_every_row</a>
 <LI><a href="#[6a0d68]">run_occasionally</a>
 <LI><a href="#[6a2b68]">dn_sched_done</a>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
 <LI><a href="#[6a4b0c]">voidvoid</a>
 <LI><a href="#[6a4bfc]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a8694]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2fce1a8]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[2fc30f0]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2fc3000]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2fc2178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2fc2fc4]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2fc2178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2fc2ed4]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[69a8dc]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[69a468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[69a4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[69a4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
<LI><a href="#[6a186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
</UL>

<P><STRONG><a name="[6a564c]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[6a5610]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[6a55d4]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[6a5598]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a555c]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a4e54]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[6a5520]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[6a4b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[6a4bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[69b6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan
<LI><a href="#[69b854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_update
<LI><a href="#[69ca9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_set_continuous
<LI><a href="#[69cad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_send_all
<LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
<LI><a href="#[69d348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_push
<LI><a href="#[69f8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_3
<LI><a href="#[69f904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_2
<LI><a href="#[69f940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_1
<LI><a href="#[69f97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_0
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a17f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_isr
<LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
<LI><a href="#[6a4008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[6a4080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[6a4b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
<LI><a href="#[6a4bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[6a5610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[6a4e18]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[6a4b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[6a4bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6a18a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[6a4ddc]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a4b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[6a4b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[6a4bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[6a4da0]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[6a4d64]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a4d28]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a4cec]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[6a4cb0]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[6a4c74]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[6a4c38]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a4bc0]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a4ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[6a4e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[6a4b84]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a4b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[6a4ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[6a4e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[6a4b48]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a4ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[6a4e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[6a429c]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6a3ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[6a4260]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4224]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a3ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[6a41e8]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a41ac]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4170]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4134]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6a3ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[6a40f8]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4b0c]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 3]<UL><LI> error.o(.data)
<LI> lcd.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[6a40bc]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4080]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[6a4044]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4008]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[6a3fcc]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a4bfc]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 3]<UL><LI> error.o(.data)
<LI> ui_sync_led.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[6a3f90]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a3f54]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a3f18]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a3edc]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[6a3900]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[6a3810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[6a384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[6a38c4]"></a>main</STRONG> (ARM, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[6a3810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[6a384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[6a5598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[6a31f8]"></a>dn_safety</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[6a31bc]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a2730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3180]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3144]"></a>dn_tick</STRONG> (ARM, 44 bytes, Stack size 24 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a5610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[6a3108]"></a>dn_error_lcd</STRONG> (ARM, 60 bytes, Stack size 40 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[6a4d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_info
<LI><a href="#[2fc8064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[6a30cc]"></a>dn_get_roll</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3090]"></a>dn_get_pitch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3054]"></a>dn_get_yam</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3018]"></a>dn_get_angRateX</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2fdc]"></a>dn_get_angRateY</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2fa0]"></a>dn_get_angRateZ</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2f64]"></a>dn_get_timer</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_int
</UL>

<P><STRONG><a name="[6a2f28]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a55d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2eec]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2eb0]"></a>dn_rx_lcd_quad_1</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_1 &rArr; lcd_set_quad1 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2e74]"></a>dn_rx_lcd_quad_2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_2 &rArr; lcd_set_quad2 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a27e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2e38]"></a>dn_rx_lcd_quad_3</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_3 &rArr; lcd_set_quad3 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a27a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2dfc]"></a>dn_rx_lcd_quad_4</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_4 &rArr; lcd_set_quad4 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2dc0]"></a>dn_rx_led_1</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_1 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2d84]"></a>dn_rx_led_2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_2 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2d48]"></a>dn_rx_led_3</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_3 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2d0c]"></a>dn_rx_led_4</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_4 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2cd0]"></a>dn_rx_led_5</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_5 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2c94]"></a>dn_rx_led_6</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_6 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2c58]"></a>dn_get_buttons</STRONG> (ARM, 52 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dn_get_buttons &rArr; button_pushed &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2c1c]"></a>dn_rx_buzzer</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dn_rx_buzzer &rArr; buzzer_set_frequency &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a28d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2be0]"></a>dn_rx_buzzer_amp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a2604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2ba4]"></a>dn_rx_play_song</STRONG> (ARM, 40 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_rx_play_song
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_play
<LI><a href="#[6a26b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[6a26f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2b68]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[6a555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[6a2b2c]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a2a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a2af0]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a2a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a3810]"></a>init_interrupts</STRONG> (ARM, 148 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a3900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[6a861c]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a384c]"></a>init_hardware</STRONG> (ARM, 1112 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_hardware
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_all_off
</UL>
<BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a3900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[6a0da4]"></a>task_every_row</STRONG> (ARM, 124 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a069c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_off
<LI><a href="#[6a0714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_flash
<LI><a href="#[6a078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
<LI><a href="#[6a0840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_update
<LI><a href="#[6a08b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[6a096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[6a0cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
<LI><a href="#[6a0d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
<LI><a href="#[6a4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[6a0d68]"></a>run_occasionally</STRONG> (ARM, 256 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = run_occasionally &rArr; can_tx_yaw &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a09a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_yaw
<LI><a href="#[6a09e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_status
<LI><a href="#[6a0a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_roll
<LI><a href="#[6a0a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc3
<LI><a href="#[6a0a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc2
<LI><a href="#[6a0ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc1
<LI><a href="#[6a0b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc0
<LI><a href="#[6a0b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_pitch
<LI><a href="#[6a0b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[6a0bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[6a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_buttons
<LI><a href="#[6a0c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_z
<LI><a href="#[6a0c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_y
<LI><a href="#[6a4c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[6a37d4]"></a>init_software</STRONG> (ARM, 112 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a06d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_init
<LI><a href="#[6a0750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_init
<LI><a href="#[6a07c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_set
<LI><a href="#[6a0804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_init
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[6a0930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[6a4e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[6a564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a3900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[6a3798]"></a>init_values</STRONG> (ARM, 4 bytes, Stack size 0 bytes, software_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a3900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[6a3888]"></a>init_can</STRONG> (ARM, 912 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[69f9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[69f9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[69fa30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[69fa6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[69fb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[69fb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a38c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a3900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[6a0a20]"></a>can_tx_roll</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_roll &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[6a0b4c]"></a>can_tx_pitch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_pitch &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a09a8]"></a>can_tx_yaw</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_yaw &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0cb4]"></a>can_tx_ang_rate_x</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_x &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[6a0c78]"></a>can_tx_ang_rate_y</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_y &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0c3c]"></a>can_tx_ang_rate_z</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_z &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0c00]"></a>can_tx_buttons</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_buttons &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0b10]"></a>can_tx_rc0</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc0 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0ad4]"></a>can_tx_rc1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc1 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0a98]"></a>can_tx_rc2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc2 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0a5c]"></a>can_tx_rc3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc3 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0bc4]"></a>can_tx_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0b88]"></a>can_tx_max_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_max_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a09e4]"></a>can_tx_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[6a0930]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[6a096c]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[69f364]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[69efe0]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69fae4]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[69faa8]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[69efa4]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ef68]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ef2c]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69eef0]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69eeb4]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ee78]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ee3c]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69f9b8]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69f9f4]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69ee00]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69edc4]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ed88]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69ed4c]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[69fa30]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69fa6c]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69ed10]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[6a0750]"></a>ui_led_init</STRONG> (ARM, 144 bytes, Stack size 0 bytes, ui_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[69e950]"></a>ui_led_register_write</STRONG> (ARM, 164 bytes, Stack size 4 bytes, ui_led.o(.text), UNUSED)

<P><STRONG><a name="[69e914]"></a>ui_led_pwm</STRONG> (ARM, 232 bytes, Stack size 8 bytes, ui_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_led_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a258c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>

<P><STRONG><a name="[6a258c]"></a>ui_led_rgb</STRONG> (ARM, 64 bytes, Stack size 16 bytes, ui_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[69e914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_6
<LI><a href="#[6a2cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_5
<LI><a href="#[6a2d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_4
<LI><a href="#[6a2d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_3
<LI><a href="#[6a2d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_2
<LI><a href="#[6a2dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_1
</UL>

<P><STRONG><a name="[6a2910]"></a>button_pushed</STRONG> (ARM, 132 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_pushed &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[69e3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_5
<LI><a href="#[69e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_4
<LI><a href="#[69e464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_3
<LI><a href="#[69e4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_2
<LI><a href="#[69e4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_1
<LI><a href="#[69e518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_0
<LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[6a2c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_buttons
</UL>

<P><STRONG><a name="[69e518]"></a>button_0</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69e4dc]"></a>button_1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69e4a0]"></a>button_2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69e464]"></a>button_3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69e428]"></a>button_4</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69e3ec]"></a>button_5</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[69dd20]"></a>buzzer_on</STRONG> (ARM, 56 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buzzer_on &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fcdd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
</UL>

<P><STRONG><a name="[69dce4]"></a>buzzer_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
</UL>

<P><STRONG><a name="[6a28d4]"></a>buzzer_set_frequency</STRONG> (ARM, 72 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buzzer_set_frequency &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fcdd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a078c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
<LI><a href="#[6a2c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_buzzer
</UL>

<P><STRONG><a name="[69dca8]"></a>buzzer_sine</STRONG> (ARM, 200 bytes, Stack size 16 bytes, buzzer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fcdd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[69d3fc]"></a>lcd_write_bit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[69d3c0]"></a>lcd_write_instruction</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_instruction
</UL>
<BR>[Called By]<UL><LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[6a1830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_isr
</UL>

<P><STRONG><a name="[69d384]"></a>lcd_write_data</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[69d348]"></a>lcd_push</STRONG> (ARM, 208 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[69d30c]"></a>lcd_print_char</STRONG> (ARM, 204 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[6a276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad4
<LI><a href="#[6a27a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad3
<LI><a href="#[6a27e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad2
<LI><a href="#[6a2820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad1
<LI><a href="#[6a285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
</UL>

<P><STRONG><a name="[6a285c]"></a>lcd_print</STRONG> (ARM, 52 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>

<P><STRONG><a name="[69d2d0]"></a>lcd_pop</STRONG> (ARM, 304 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_isr
</UL>

<P><STRONG><a name="[69d294]"></a>lcd_us_delay</STRONG> (ARM, 104 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69d1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69d21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[69d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a2a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[6a2820]"></a>lcd_set_quad1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad1 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_1
</UL>

<P><STRONG><a name="[6a27e4]"></a>lcd_set_quad2</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad2 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_2
</UL>

<P><STRONG><a name="[6a27a8]"></a>lcd_set_quad3</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad3 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_3
</UL>

<P><STRONG><a name="[6a276c]"></a>lcd_set_quad4</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad4 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[69d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_4
</UL>

<P><STRONG><a name="[6a1830]"></a>lcd_isr</STRONG> (ARM, 280 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_isr &rArr; lcd_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[69d2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pop
<LI><a href="#[69d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_instruction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[6a08f4]"></a>lcd_init</STRONG> (ARM, 396 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcd_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69d1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69d21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[69d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[69d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_instruction
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fcde9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[69cad8]"></a>msimu_send_all</STRONG> (ARM, 100 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[69ca9c]"></a>msimu_set_continuous</STRONG> (ARM, 112 bytes, Stack size 8 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[6a087c]"></a>msimu_init</STRONG> (ARM, 164 bytes, Stack size 24 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[69d1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69d21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[69ca60]"></a>msimu_get_length</STRONG> (ARM, 8 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)

<P><STRONG><a name="[6a17f4]"></a>msimu_isr</STRONG> (ARM, 356 bytes, Stack size 40 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msimu_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[6a267c]"></a>msimu_get_data_float</STRONG> (ARM, 12 bytes, Stack size 0 bytes, microstrain_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateZ
<LI><a href="#[6a2fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateY
<LI><a href="#[6a3018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateX
<LI><a href="#[6a3054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_yam
<LI><a href="#[6a3090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_pitch
<LI><a href="#[6a30cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_roll
</UL>

<P><STRONG><a name="[6a2640]"></a>msimu_get_data_int</STRONG> (ARM, 12 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a2f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_timer
</UL>

<P><STRONG><a name="[69ca24]"></a>msimu_parse_buffer</STRONG> (ARM, 508 bytes, Stack size 16 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msimu_parse_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_update
</UL>

<P><STRONG><a name="[6a0840]"></a>msimu_update</STRONG> (ARM, 4 bytes, Stack size 0 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msimu_update &rArr; msimu_parse_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[69ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_parse_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[69c538]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c4fc]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c4c0]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c484]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a08b8]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[69c448]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a26f4]"></a>mcu_led_green_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
</UL>

<P><STRONG><a name="[69c40c]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a2730]"></a>mcu_led_blue_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a31bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[69c3d0]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a26b8]"></a>mcu_led_red_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
</UL>

<P><STRONG><a name="[69c394]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c358]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c31c]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[69c2e0]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a1434]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[69c2a4]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[6a069c]"></a>ui_sync_led_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui_sync_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[6a06d8]"></a>ui_sync_led_init</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ui_sync_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[69bc8c]"></a>ui_sync_led_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui_sync_led.o(.text), UNUSED)

<P><STRONG><a name="[6a0714]"></a>ui_sync_led_flash</STRONG> (ARM, 512 bytes, Stack size 24 bytes, ui_sync_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_sync_led_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[6a0804]"></a>rcx_init</STRONG> (ARM, 112 bytes, Stack size 12 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[69b6ec]"></a>rcx_get_chan</STRONG> (ARM, 92 bytes, Stack size 8 bytes, rc_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[69f97c]"></a>rcx_get_chan_0</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_0 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[69f940]"></a>rcx_get_chan_1</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_1 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[69f904]"></a>rcx_get_chan_2</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_2 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[69f8c8]"></a>rcx_get_chan_3</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_3 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[6a17b8]"></a>rcx_isr</STRONG> (ARM, 328 bytes, Stack size 72 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcx_isr &rArr; rcx_update &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[69b854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[69fb5c]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69a8a0]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a864]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[69a5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[69a828]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[6a0cf0]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[69a5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
<LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[69a7ec]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a7b0]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[69a5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[69a774]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a738]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[69a5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[69a6fc]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a6c0]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a684]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a648]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a60c]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a5d0]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[69a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[69a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[69a864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[6a0cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[69a594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[69a594]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[69a210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[69a5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[69a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[6a2898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>

<P><STRONG><a name="[6a2898]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[69a594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a09a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_yaw
<LI><a href="#[6a09e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_status
<LI><a href="#[6a0a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_roll
<LI><a href="#[6a0a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc3
<LI><a href="#[6a0a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc2
<LI><a href="#[6a0ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc1
<LI><a href="#[6a0b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc0
<LI><a href="#[6a0b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_pitch
<LI><a href="#[6a0b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[6a0bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[6a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_buttons
<LI><a href="#[6a0c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_z
<LI><a href="#[6a0c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_y
<LI><a href="#[6a0cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_x
<LI><a href="#[6a3180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
</UL>

<P><STRONG><a name="[69a558]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[69a210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[69a594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[69a51c]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[6a0d2c]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[69a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[69a4e0]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[6a186c]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx2_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[69a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[69a4a4]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[69a468]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[69a42c]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a3f0]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a3b4]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a378]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69fb20]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a3888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[69a33c]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a300]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a2c4]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a288]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[69a24c]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[6a18a8]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[6a07c8]"></a>song_set</STRONG> (ARM, 40 bytes, Stack size 0 bytes, song.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a37d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2fce658]"></a>song_stop</STRONG> (ARM, 52 bytes, Stack size 4 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[6a078c]"></a>song_update</STRONG> (ARM, 200 bytes, Stack size 16 bytes, song.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = song_update &rArr; buzzer_on &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69dce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[69dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[6a28d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[6a2604]"></a>song_play</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
<LI><a href="#[6a2be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_buzzer_amp
</UL>

<P><STRONG><a name="[2fce61c]"></a>song_pause</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[2fce5e0]"></a>song_fast_forward</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[2fcded8]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2fcde9c]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc8424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2fcdd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[2fcddac]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2fcdd70]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2fcde9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[69dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[6a28d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>

<P><STRONG><a name="[69d1a4]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fadd &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc4428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[2fc43ec]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc4428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[2fc43b0]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc4428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[6a2a78]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a2af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[6a2b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[6a3ea0]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a4134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[6a4224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[6a429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[2fc41d0]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[69dc30]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[2fc2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2fc40a4]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2fc4068]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[69dbb8]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[2fc2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[69dbf4]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6a3e28]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc4374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69b6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan
<LI><a href="#[69f8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_3
<LI><a href="#[69f904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_2
<LI><a href="#[69f940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_1
<LI><a href="#[69f97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_0
<LI><a href="#[6a4224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[6a2a3c]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc4374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[6a2af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[6a2b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[69db7c]"></a>__aeabi_i2d</STRONG> (ARM, 52 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6a3e64]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a4134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[6a429c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[69dc6c]"></a>__aeabi_d2iz</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc2b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[69d1e0]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[69d21c]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc4374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[6a087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[69d258]"></a>__aeabi_cfrcmple</STRONG> (ARM, 24 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[6a08f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[2fc2cb8]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[2fc2c7c]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2fc2b8c]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[2fc2b50]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2fc2790]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2fc26a0]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc26a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc26a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2fc4374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[2fc4374]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc26a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69d21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6a2a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6a3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2fc4428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[2fc25b0]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2fc3fb4]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc25b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2fc3384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[2fc40e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[2fce388]"></a>__ARM_scalbn</STRONG> (ARM, 60 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[2fc24c0]"></a>scalbn</STRONG> (ARM, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[2fc2178]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc2fc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc3000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2fc213c]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2fc3384]"></a>_drem</STRONG> (ARM, 240 bytes, Stack size 64 bytes, drem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2fc1b9c]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fc1b60]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fc80dc]"></a>__0sprintf$6</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc8334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2fc8424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fc80a0]"></a>__1sprintf$6</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[2fc8064]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a3108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>

<P><STRONG><a name="[69a210]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[69a558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[69a594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[2fc3474]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1168 bytes, Stack size 80 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fc3384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[2fc4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fc40a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2fcde9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2fce388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[2fc3744]"></a>__kernel_cos</STRONG> (ARM, 368 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fc2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2fc4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fc40a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2fce388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[2fc2268]"></a>__kernel_poly</STRONG> (ARM, 244 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2fc321c]"></a>__kernel_sin</STRONG> (ARM, 360 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2fc2268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2fc4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fc40a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2fce388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[2fc1d04]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc1d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2fc1cc8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2fc1c8c]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2fc2844]"></a>__set_errno</STRONG> (ARM, 12 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fce3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[2fce3c4]"></a>sin</STRONG> (ARM, 224 bytes, Stack size 32 bytes, sin.o(i.sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc2844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2fc321c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2fc3474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2fc3744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2fce388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[69dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a88b0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6a88b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a88b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a8874]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6a8874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a8838]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6a8838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a87fc]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6a87fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a87fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a87c0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6a87c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a87c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69e680]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, button.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[69be6c]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_sync_led.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ui_sync_led.o(.text)
</UL>
<P><STRONG><a name="[69b854]"></a>rcx_update</STRONG> (ARM, 200 bytes, Stack size 16 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcx_update &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[6a5520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[6a17b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_isr
</UL>

<P><STRONG><a name="[69b200]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[69b1c4]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[2fc8424]"></a>_printf_core</STRONG> (ARM, 1128 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc83ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2fc83e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2fcde9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc80dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[2fc83e8]"></a>_printf_post_padding</STRONG> (ARM, 68 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc8424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fc83ac]"></a>_printf_pre_padding</STRONG> (ARM, 80 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fc8424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fc8334]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2fc80dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL>
<P><STRONG><a name="[2fc4428]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc4374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2fc43b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2fc43ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2fc40e0]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc2b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2fc2cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2fc3fb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2fc4068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fc40a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
