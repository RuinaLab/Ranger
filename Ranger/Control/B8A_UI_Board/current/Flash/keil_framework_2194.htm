<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Thu Feb 21 18:44:00 2013
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b68694]">Reset_Handler</a>
 <LI><a href="#[b688b0]">Undef_Handler</a>
 <LI><a href="#[b68874]">SWI_Handler</a>
 <LI><a href="#[b68838]">PAbt_Handler</a>
 <LI><a href="#[b687fc]">DAbt_Handler</a>
 <LI><a href="#[b687c0]">IRQ_Handler</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b64d64]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b64d64]">mutex_lock</a><BR>
 <LI><a href="#[c2d880]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2d880]">_float_round</a><BR>
 <LI><a href="#[b688b0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b688b0]">Undef_Handler</a><BR>
 <LI><a href="#[b68874]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b68874]">SWI_Handler</a><BR>
 <LI><a href="#[b68838]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b68838]">PAbt_Handler</a><BR>
 <LI><a href="#[b687fc]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b687fc]">DAbt_Handler</a><BR>
 <LI><a href="#[b687c0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b687c0]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
 <LI><a href="#[b64260]">voidint</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60c00]">can_tx_roll</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60e94]">can_tx_ang_rate_x</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60f48]">run_occasionally</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
 <LI><a href="#[b68694]">Reset_Handler</a>
 <LI><a href="#[b688b0]">Undef_Handler</a>
 <LI><a href="#[b68874]">SWI_Handler</a>
 <LI><a href="#[b68838]">PAbt_Handler</a>
 <LI><a href="#[b687fc]">DAbt_Handler</a>
 <LI><a href="#[b687c0]">IRQ_Handler</a>
 <LI><a href="#[b6861c]">FIQ_Handler</a>
 <LI><a href="#[c39388]">__main</a>
 <LI><a href="#[b63aa4]">main</a>
 <LI><a href="#[b61a4c]">can_rx2_isr</a>
 <LI><a href="#[b61a10]">lcd_isr</a>
 <LI><a href="#[b61998]">rcx_isr</a>
 <LI><a href="#[b619d4]">msimu_isr</a>
 <LI><a href="#[b61a88]">can_error_isr</a>
 <LI><a href="#[b6573c]">asched_get_timestamp</a>
 <LI><a href="#[b63360]">dn_error_transmit</a>
 <LI><a href="#[b6339c]">dn_blue_heartbeat</a>
 <LI><a href="#[b657f0]">asched_tick</a>
 <LI><a href="#[b63108]">dn_rx_timestamp</a>
 <LI><a href="#[b5fcc4]">can_rx_setter_float_dummy</a>
 <LI><a href="#[b5fc88]">can_rx_setter_int_dummy</a>
 <LI><a href="#[b63090]">dn_rx_lcd_quad_1</a>
 <LI><a href="#[b63054]">dn_rx_lcd_quad_2</a>
 <LI><a href="#[b63018]">dn_rx_lcd_quad_3</a>
 <LI><a href="#[b62fdc]">dn_rx_lcd_quad_4</a>
 <LI><a href="#[b62fa0]">dn_rx_led_1</a>
 <LI><a href="#[b62f64]">dn_rx_led_2</a>
 <LI><a href="#[b62f28]">dn_rx_led_3</a>
 <LI><a href="#[b62eec]">dn_rx_led_4</a>
 <LI><a href="#[b62eb0]">dn_rx_led_5</a>
 <LI><a href="#[b62e74]">dn_rx_led_6</a>
 <LI><a href="#[b62dfc]">dn_rx_buzzer</a>
 <LI><a href="#[b62dc0]">dn_rx_buzzer_amp</a>
 <LI><a href="#[b62d84]">dn_rx_play_song</a>
 <LI><a href="#[b64f44]">error_get_time</a>
 <LI><a href="#[b64f08]">error_get_info</a>
 <LI><a href="#[b6573c]">asched_get_timestamp</a>
 <LI><a href="#[b632ac]">dn_get_roll</a>
 <LI><a href="#[b63270]">dn_get_pitch</a>
 <LI><a href="#[b63234]">dn_get_yam</a>
 <LI><a href="#[b631f8]">dn_get_angRateX</a>
 <LI><a href="#[b631bc]">dn_get_angRateY</a>
 <LI><a href="#[b63180]">dn_get_angRateZ</a>
 <LI><a href="#[b62e38]">dn_get_buttons</a>
 <LI><a href="#[b5fb5c]">rcx_get_chan_0</a>
 <LI><a href="#[b5fb20]">rcx_get_chan_1</a>
 <LI><a href="#[b5fae4]">rcx_get_chan_2</a>
 <LI><a href="#[b5faa8]">rcx_get_chan_3</a>
 <LI><a href="#[b630cc]">dn_get_status</a>
 <LI><a href="#[b62d0c]">dn_get_execution_time</a>
 <LI><a href="#[b62cd0]">dn_get_max_execution_time</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5e860]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5c04c]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3e0]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
 <LI><a href="#[b5b3a4]">__switch$$</a>
 <LI><a href="#[c33514]">_sputc</a>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
 <LI><a href="#[b64260]">voidint</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60c00]">can_tx_roll</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60e94]">can_tx_ang_rate_x</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b60f84]">task_every_row</a>
 <LI><a href="#[b60f48]">run_occasionally</a>
 <LI><a href="#[b62d48]">dn_sched_done</a>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
 <LI><a href="#[b64cec]">voidvoid</a>
 <LI><a href="#[b64ddc]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b68694]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c39388]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[c2e2d0]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c2e1e0]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c2d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c2e1a4]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c2d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c2e0b4]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[b5aabc]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b5a648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[b5a684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[b5a6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
<LI><a href="#[b61a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
</UL>

<P><STRONG><a name="[b6582c]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b657f0]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b63324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[b657b4]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[b65778]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6573c]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b65034]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b65700]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b64d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[b64d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b64da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan
<LI><a href="#[b5ba34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_update
<LI><a href="#[b5cc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_set_continuous
<LI><a href="#[b5ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_send_all
<LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
<LI><a href="#[b5d528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_push
<LI><a href="#[b5faa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_3
<LI><a href="#[b5fae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_2
<LI><a href="#[b5fb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_1
<LI><a href="#[b5fb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_0
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b619d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_isr
<LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
<LI><a href="#[b641e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[b64260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[b64cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
<LI><a href="#[b64ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[b657f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[b64ff8]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[b64d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[b64d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b64da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b61a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[b64fbc]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b64d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[b64d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b64da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[b64f80]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b64f44]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b64f08]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b632e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b64ecc]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[b64e90]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[b64e54]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[b64e18]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b64da0]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b64fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[b64ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b64d64]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b64d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[b64d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[b64fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[b64ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b64d28]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b64fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[b64ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b6447c]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b64044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b64080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[b64440]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64404]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b64080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[b643c8]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b6438c]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64350]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64314]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b64044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[b64080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[b642d8]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64cec]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 3]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
<LI> lcd.o(.data)
</UL>
<P><STRONG><a name="[b6429c]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64260]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[b64224]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b641e8]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b641ac]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64ddc]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 3]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
<LI> ui_sync_led.o(.data)
</UL>
<P><STRONG><a name="[b64170]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b64134]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b640f8]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b640bc]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b63ae0]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b63978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[b639f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[b63a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b63aa4]"></a>main</STRONG> (ARM, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b63978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[b639f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[b63a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[b65778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[b633d8]"></a>dn_safety</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)

<P><STRONG><a name="[b6339c]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b62910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[b63360]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[b63324]"></a>dn_tick</STRONG> (ARM, 44 bytes, Stack size 24 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b657f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[b632e8]"></a>dn_error_lcd</STRONG> (ARM, 60 bytes, Stack size 40 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
<LI><a href="#[b64f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_info
<LI><a href="#[c33244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[b632ac]"></a>dn_get_roll</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63270]"></a>dn_get_pitch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63234]"></a>dn_get_yam</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b631f8]"></a>dn_get_angRateX</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b631bc]"></a>dn_get_angRateY</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63180]"></a>dn_get_angRateZ</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63144]"></a>dn_get_timer</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_get_data_int
</UL>

<P><STRONG><a name="[b63108]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b657b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b630cc]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63090]"></a>dn_rx_lcd_quad_1</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_1 &rArr; lcd_set_quad1 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63054]"></a>dn_rx_lcd_quad_2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_2 &rArr; lcd_set_quad2 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b629c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b63018]"></a>dn_rx_lcd_quad_3</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_3 &rArr; lcd_set_quad3 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b62988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62fdc]"></a>dn_rx_lcd_quad_4</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dn_rx_lcd_quad_4 &rArr; lcd_set_quad4 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b6294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62fa0]"></a>dn_rx_led_1</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_1 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62f64]"></a>dn_rx_led_2</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_2 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62f28]"></a>dn_rx_led_3</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_3 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62eec]"></a>dn_rx_led_4</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_4 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62eb0]"></a>dn_rx_led_5</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_5 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62e74]"></a>dn_rx_led_6</STRONG> (ARM, 28 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_rx_led_6 &rArr; ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62e38]"></a>dn_get_buttons</STRONG> (ARM, 52 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dn_get_buttons &rArr; button_pushed &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62dfc]"></a>dn_rx_buzzer</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dn_rx_buzzer &rArr; buzzer_set_frequency &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b62ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62dc0]"></a>dn_rx_buzzer_amp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b627e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_play
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62d84]"></a>dn_rx_play_song</STRONG> (ARM, 40 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_rx_play_song
</UL>
<BR>[Calls]<UL><LI><a href="#[b627e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_play
<LI><a href="#[b62898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[b628d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62d48]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[b6573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[b62d0c]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b62c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b62c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b62cd0]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b62c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b62c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b639f0]"></a>init_interrupts</STRONG> (ARM, 148 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b63ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[b6861c]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b63a2c]"></a>init_hardware</STRONG> (ARM, 1112 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_hardware
</UL>
<BR>[Calls]<UL><LI><a href="#[b61614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_all_off
</UL>
<BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b63ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[b60f84]"></a>task_every_row</STRONG> (ARM, 124 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b6087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_off
<LI><a href="#[b608f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_flash
<LI><a href="#[b6096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
<LI><a href="#[b60a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_update
<LI><a href="#[b60a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[b60b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[b60ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
<LI><a href="#[b60f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
<LI><a href="#[b64f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[b60f48]"></a>run_occasionally</STRONG> (ARM, 256 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = run_occasionally &rArr; can_tx_yaw &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b60b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_yaw
<LI><a href="#[b60bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_status
<LI><a href="#[b60c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_roll
<LI><a href="#[b60c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc3
<LI><a href="#[b60c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc2
<LI><a href="#[b60cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc1
<LI><a href="#[b60cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc0
<LI><a href="#[b60d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_pitch
<LI><a href="#[b60d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[b60da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[b60de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_buttons
<LI><a href="#[b60e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_z
<LI><a href="#[b60e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_y
<LI><a href="#[b64e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[b639b4]"></a>init_software</STRONG> (ARM, 112 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = init_software &rArr; msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b608b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_sync_led_init
<LI><a href="#[b60930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_init
<LI><a href="#[b609a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_set
<LI><a href="#[b609e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_init
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b60b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[b65034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[b6582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b63ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[b63978]"></a>init_values</STRONG> (ARM, 4 bytes, Stack size 0 bytes, software_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b63ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[b63a68]"></a>init_can</STRONG> (ARM, 912 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[b5fb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[b5fbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[b5fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[b5fc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[b5fd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[b5fd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b63aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b63ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[b60c00]"></a>can_tx_roll</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_roll &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[b60d2c]"></a>can_tx_pitch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_pitch &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60b88]"></a>can_tx_yaw</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_yaw &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60e94]"></a>can_tx_ang_rate_x</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_x &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.data)
</UL>
<P><STRONG><a name="[b60e58]"></a>can_tx_ang_rate_y</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_y &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60e1c]"></a>can_tx_ang_rate_z</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_ang_rate_z &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60de0]"></a>can_tx_buttons</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_buttons &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60cf0]"></a>can_tx_rc0</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc0 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60cb4]"></a>can_tx_rc1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc1 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60c78]"></a>can_tx_rc2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc2 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60c3c]"></a>can_tx_rc3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_rc3 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60da4]"></a>can_tx_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60d68]"></a>can_tx_max_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_max_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60bc4]"></a>can_tx_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[b60b10]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b60b4c]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b5f544]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[b5f1c0]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5fcc4]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b5fc88]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b5f184]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f148]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f10c]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f0d0]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f094]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f058]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5f01c]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5fb98]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5fbd4]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5efe0]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5efa4]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5ef68]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5ef2c]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b5fc10]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5fc4c]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5eef0]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[b60930]"></a>ui_led_init</STRONG> (ARM, 144 bytes, Stack size 0 bytes, ui_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b5eb30]"></a>ui_led_register_write</STRONG> (ARM, 164 bytes, Stack size 4 bytes, ui_led.o(.text), UNUSED)

<P><STRONG><a name="[b5eaf4]"></a>ui_led_pwm</STRONG> (ARM, 232 bytes, Stack size 8 bytes, ui_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui_led_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[b6276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_rgb
</UL>

<P><STRONG><a name="[b6276c]"></a>ui_led_rgb</STRONG> (ARM, 64 bytes, Stack size 16 bytes, ui_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_led_rgb &rArr; ui_led_pwm
</UL>
<BR>[Calls]<UL><LI><a href="#[b5eaf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_led_pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[b62e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_6
<LI><a href="#[b62eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_5
<LI><a href="#[b62eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_4
<LI><a href="#[b62f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_3
<LI><a href="#[b62f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_2
<LI><a href="#[b62fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_led_1
</UL>

<P><STRONG><a name="[b62af0]"></a>button_pushed</STRONG> (ARM, 132 bytes, Stack size 8 bytes, button.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = button_pushed &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b5e5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_5
<LI><a href="#[b5e608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_4
<LI><a href="#[b5e644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_3
<LI><a href="#[b5e680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_2
<LI><a href="#[b5e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_1
<LI><a href="#[b5e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_0
<LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[b62e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_buttons
</UL>

<P><STRONG><a name="[b5e6f8]"></a>button_0</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5e6bc]"></a>button_1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5e680]"></a>button_2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5e644]"></a>button_3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5e608]"></a>button_4</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5e5cc]"></a>button_5</STRONG> (ARM, 8 bytes, Stack size 0 bytes, button.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b62af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_pushed
</UL>

<P><STRONG><a name="[b5df00]"></a>buzzer_on</STRONG> (ARM, 56 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buzzer_on &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c38f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
</UL>

<P><STRONG><a name="[b5dec4]"></a>buzzer_off</STRONG> (ARM, 28 bytes, Stack size 0 bytes, buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
</UL>

<P><STRONG><a name="[b62ab4]"></a>buzzer_set_frequency</STRONG> (ARM, 72 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = buzzer_set_frequency &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c38f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b6096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;song_update
<LI><a href="#[b62dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_buzzer
</UL>

<P><STRONG><a name="[b5de88]"></a>buzzer_sine</STRONG> (ARM, 200 bytes, Stack size 16 bytes, buzzer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c38f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[b5d5dc]"></a>lcd_write_bit</STRONG> (ARM, 32 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[b5d5a0]"></a>lcd_write_instruction</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_write_instruction
</UL>
<BR>[Called By]<UL><LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[b61a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_isr
</UL>

<P><STRONG><a name="[b5d564]"></a>lcd_write_data</STRONG> (ARM, 96 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[b5d528]"></a>lcd_push</STRONG> (ARM, 208 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b5d4ec]"></a>lcd_print_char</STRONG> (ARM, 204 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b6294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad4
<LI><a href="#[b62988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad3
<LI><a href="#[b629c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad2
<LI><a href="#[b62a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_quad1
<LI><a href="#[b62a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print
</UL>

<P><STRONG><a name="[b62a3c]"></a>lcd_print</STRONG> (ARM, 52 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b632e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>

<P><STRONG><a name="[b5d4b0]"></a>lcd_pop</STRONG> (ARM, 304 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[b61a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_isr
</UL>

<P><STRONG><a name="[b5d474]"></a>lcd_us_delay</STRONG> (ARM, 104 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b5d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b5d438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b62c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[b62a00]"></a>lcd_set_quad1</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad1 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b63090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_1
</UL>

<P><STRONG><a name="[b629c4]"></a>lcd_set_quad2</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad2 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b63054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_2
</UL>

<P><STRONG><a name="[b62988]"></a>lcd_set_quad3</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad3 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b63018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_3
</UL>

<P><STRONG><a name="[b6294c]"></a>lcd_set_quad4</STRONG> (ARM, 76 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_quad4 &rArr; lcd_print_char &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_char
</UL>
<BR>[Called By]<UL><LI><a href="#[b62fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_lcd_quad_4
</UL>

<P><STRONG><a name="[b61a10]"></a>lcd_isr</STRONG> (ARM, 280 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_isr &rArr; lcd_pop
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pop
<LI><a href="#[b5d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_instruction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[b60ad4]"></a>lcd_init</STRONG> (ARM, 396 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcd_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b5d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b5d438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b5d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_instruction
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c3907c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b5ccb8]"></a>msimu_send_all</STRONG> (ARM, 100 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b5cc7c]"></a>msimu_set_continuous</STRONG> (ARM, 112 bytes, Stack size 8 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b60a5c]"></a>msimu_init</STRONG> (ARM, 164 bytes, Stack size 24 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = msimu_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b5d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b5d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b5cc40]"></a>msimu_get_length</STRONG> (ARM, 8 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)

<P><STRONG><a name="[b619d4]"></a>msimu_isr</STRONG> (ARM, 356 bytes, Stack size 40 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msimu_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[b6285c]"></a>msimu_get_data_float</STRONG> (ARM, 12 bytes, Stack size 0 bytes, microstrain_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateZ
<LI><a href="#[b631bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateY
<LI><a href="#[b631f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_angRateX
<LI><a href="#[b63234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_yam
<LI><a href="#[b63270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_pitch
<LI><a href="#[b632ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_roll
</UL>

<P><STRONG><a name="[b62820]"></a>msimu_get_data_int</STRONG> (ARM, 12 bytes, Stack size 0 bytes, microstrain_imu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b63144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_timer
</UL>

<P><STRONG><a name="[b5cc04]"></a>msimu_parse_buffer</STRONG> (ARM, 508 bytes, Stack size 16 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msimu_parse_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b60a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_update
</UL>

<P><STRONG><a name="[b60a20]"></a>msimu_update</STRONG> (ARM, 4 bytes, Stack size 0 bytes, microstrain_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msimu_update &rArr; msimu_parse_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[b5cc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_parse_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b5c718]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c6dc]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c6a0]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c664]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b60a98]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b5c628]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b628d4]"></a>mcu_led_green_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
</UL>

<P><STRONG><a name="[b5c5ec]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b62910]"></a>mcu_led_blue_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[b5c5b0]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b62898]"></a>mcu_led_red_blink</STRONG> (ARM, 28 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
</UL>

<P><STRONG><a name="[b5c574]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c538]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c4fc]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b5c4c0]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b61614]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
</UL>

<P><STRONG><a name="[b5c484]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[b6087c]"></a>ui_sync_led_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui_sync_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b608b8]"></a>ui_sync_led_init</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ui_sync_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b5be6c]"></a>ui_sync_led_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, ui_sync_led.o(.text), UNUSED)

<P><STRONG><a name="[b608f4]"></a>ui_sync_led_flash</STRONG> (ARM, 512 bytes, Stack size 24 bytes, ui_sync_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui_sync_led_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b609e4]"></a>rcx_init</STRONG> (ARM, 112 bytes, Stack size 12 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[b5b8cc]"></a>rcx_get_chan</STRONG> (ARM, 92 bytes, Stack size 8 bytes, rc_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[b5fb5c]"></a>rcx_get_chan_0</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_0 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b5fb20]"></a>rcx_get_chan_1</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_1 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b5fae4]"></a>rcx_get_chan_2</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_2 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b5faa8]"></a>rcx_get_chan_3</STRONG> (ARM, 88 bytes, Stack size 8 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcx_get_chan_3 &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[b61998]"></a>rcx_isr</STRONG> (ARM, 328 bytes, Stack size 72 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rcx_isr &rArr; rcx_update &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b5ba34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[b5fd3c]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5aa80]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5aa44]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[b5aa08]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b60ed0]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
<LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b5a9cc]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a990]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[b5a954]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a918]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[b5a8dc]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a8a0]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a864]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a828]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a7ec]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a7b0]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[b5a990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[b5aa44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[b60ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[b5a774]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[b5a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[b5a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[b62a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>

<P><STRONG><a name="[b62a78]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[b60b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_yaw
<LI><a href="#[b60bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_status
<LI><a href="#[b60c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_roll
<LI><a href="#[b60c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc3
<LI><a href="#[b60c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc2
<LI><a href="#[b60cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc1
<LI><a href="#[b60cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_rc0
<LI><a href="#[b60d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_pitch
<LI><a href="#[b60d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[b60da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[b60de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_buttons
<LI><a href="#[b60e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_z
<LI><a href="#[b60e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_y
<LI><a href="#[b60e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_ang_rate_x
<LI><a href="#[b63360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
</UL>

<P><STRONG><a name="[b5a738]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[b5a774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[b5a6fc]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b60f0c]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[b5a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b5a6c0]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[b61a4c]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx2_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5aabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[b5a684]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[b5a648]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5aabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[b5a60c]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a5d0]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a594]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a558]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5fd00]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[b5a51c]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a4e0]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a4a4]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a468]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b5a42c]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[b61a88]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[b64ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[b609a8]"></a>song_set</STRONG> (ARM, 40 bytes, Stack size 0 bytes, song.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b639b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[c39838]"></a>song_stop</STRONG> (ARM, 52 bytes, Stack size 4 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[b6096c]"></a>song_update</STRONG> (ARM, 200 bytes, Stack size 16 bytes, song.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = song_update &rArr; buzzer_on &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[b5df00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[b62ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[b60f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[b627e4]"></a>song_play</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_play_song
<LI><a href="#[b62dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_buzzer_amp
</UL>

<P><STRONG><a name="[c397fc]"></a>song_pause</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[c397c0]"></a>song_fast_forward</STRONG> (ARM, 16 bytes, Stack size 0 bytes, song.o(.text), UNUSED)

<P><STRONG><a name="[c390b8]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c3907c]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c33604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c38f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[c38f8c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[c38f50]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3907c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[b5df00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[b62ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_set_frequency
</UL>

<P><STRONG><a name="[b5d384]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fadd &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[c2f5cc]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[c2f590]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[b62c58]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b62cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[b62d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[b64080]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b64314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[b64404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[b6447c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[c2f3b0]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[b5de10]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[c2d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[c2f284]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[c2f248]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b5dd98]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[c2d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b5ddd4]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b64008]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2f554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan
<LI><a href="#[b5faa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_3
<LI><a href="#[b5fae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_2
<LI><a href="#[b5fb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_1
<LI><a href="#[b5fb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_get_chan_0
<LI><a href="#[b64404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[b62c1c]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2f554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b62cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[b62d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[b5dd5c]"></a>__aeabi_i2d</STRONG> (ARM, 52 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b64044]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b64314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[b6447c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[b5de4c]"></a>__aeabi_d2iz</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2dd6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
<LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[b5d3c0]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b5d3fc]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b60a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msimu_init
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b5d438]"></a>__aeabi_cfrcmple</STRONG> (ARM, 24 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_us_delay
<LI><a href="#[b60ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[c2de98]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[c2de5c]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c2dd6c]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[c2dd30]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c2d970]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c2d880]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[c2f554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[c2f554]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b62c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b64008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c2f608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[c2d790]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c2f194]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c2e564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[c2f2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[c39568]"></a>__ARM_scalbn</STRONG> (ARM, 60 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[c2d6a0]"></a>scalbn</STRONG> (ARM, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[c2d358]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2e1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c2d31c]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c2e564]"></a>_drem</STRONG> (ARM, 240 bytes, Stack size 64 bytes, drem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[c2cd7c]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c2cd40]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c332bc]"></a>__0sprintf$6</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c33514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c33604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c33280]"></a>__1sprintf$6</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[c33244]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b632e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_lcd
</UL>

<P><STRONG><a name="[b5a3f0]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[b5a738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[b5a774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[c2e654]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1168 bytes, Stack size 80 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2e564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drem
<LI><a href="#[c2f248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2f284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c3907c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c39568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[c2e924]"></a>__kernel_cos</STRONG> (ARM, 368 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c2f248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2f284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c39568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[c2d448]"></a>__kernel_poly</STRONG> (ARM, 244 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[c2e3fc]"></a>__kernel_sin</STRONG> (ARM, 360 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b5de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c2d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[c2f248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2f284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c39568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[c2cee4]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2cee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2cee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c2cea8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c2ce6c]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c2da24]"></a>__set_errno</STRONG> (ARM, 12 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c395a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[c395a4]"></a>sin</STRONG> (ARM, 224 bytes, Stack size 32 bytes, sin.o(i.sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2da24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c2e3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[c2e654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c2e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[c39568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_sine
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b688b0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b688b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b688b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b68874]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b68874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b68874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b68838]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b68838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b68838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b687fc]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b687fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b687fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b687c0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b687c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b687c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b5e860]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, button.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.text)
</UL>
<P><STRONG><a name="[b5c04c]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ui_sync_led.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ui_sync_led.o(.text)
</UL>
<P><STRONG><a name="[b5ba34]"></a>rcx_update</STRONG> (ARM, 200 bytes, Stack size 16 bytes, rc_receive.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rcx_update &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b65700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b61998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcx_isr
</UL>

<P><STRONG><a name="[b5b3e0]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[b5b3a4]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[c33604]"></a>_printf_core</STRONG> (ARM, 1128 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3358c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c335c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3907c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c332bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[c335c8]"></a>_printf_post_padding</STRONG> (ARM, 68 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c33604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c3358c]"></a>_printf_pre_padding</STRONG> (ARM, 80 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c33604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c33514]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c332bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL>
<P><STRONG><a name="[c2f608]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c2f590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c2f5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[c2f2c0]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2dd6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c2de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c2f194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b5de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2f248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c2f284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
