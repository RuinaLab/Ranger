<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Ext_SDRAM\LPC3250_main_brain.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Ext_SDRAM\LPC3250_main_brain.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon May 10 16:12:43 2010
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b5b568]">Reset_Handler</a>
 <LI><a href="#[b5b748]">Undef_Handler</a>
 <LI><a href="#[b5b70c]">SWI_Handler</a>
 <LI><a href="#[b5b6d0]">PAbt_Handler</a>
 <LI><a href="#[b5b694]">DAbt_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b5b748]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5b748]">Undef_Handler</a><BR>
 <LI><a href="#[b5b70c]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5b70c]">SWI_Handler</a><BR>
 <LI><a href="#[b5b6d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5b6d0]">PAbt_Handler</a><BR>
 <LI><a href="#[b5b694]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5b694]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b55550]">error_ulvoid</a>
 <LI><a href="#[b5b568]">Reset_Handler</a>
 <LI><a href="#[b5b748]">Undef_Handler</a>
 <LI><a href="#[b5b70c]">SWI_Handler</a>
 <LI><a href="#[b5b6d0]">PAbt_Handler</a>
 <LI><a href="#[b5b694]">DAbt_Handler</a>
 <LI><a href="#[b5b4f0]">IRQ_Handler</a>
 <LI><a href="#[b5b52c]">FIQ_Handler</a>
 <LI><a href="#[143419c]">__main</a>
 <LI><a href="#[b58bec]">main</a>
 <LI><a href="#[b59240]">mb_io_get_float</a>
 <LI><a href="#[b59204]">mb_io_get_pointer</a>
 <LI><a href="#[b4e494]">get_foot_inner_input(int*, int)</a>
 <LI><a href="#[b4d51c]">get_foot_outer_input(int*, int)</a>
 <LI><a href="#[1436a64]">get_hip_sensor_input(int*, int)</a>
 <LI><a href="#[1435420]">get_steering_input(int*, int)</a>
 <LI><a href="#[14348e0]">get_system_init_conditions_input(int*, int)</a>
 <LI><a href="#[156cf8c]">__default_terminate_handler()</a>
 <LI><a href="#[156c80c]">__I$use$semihosting</a>
 <LI><a href="#[1431ba4]">__default_new_handler()</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b5945c]">mb_bt_pop_receive_packets</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b595c4]">a9_bt_dma_receive</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b596b4]">mb_create_display_data_lists</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b58fac]">mb_test_ui_board1</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b593e4]">mb_distribute_error_frames</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b59330]">mb_error_update</a>
 <LI><a href="#[b58fe8]">mb_task_heartbeat</a>
 <LI><a href="#[b5954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b592f4]">mb_estimator_update</a>
 <LI><a href="#[b59510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b594d4]">a9_dn_update_leds</a>
 <LI><a href="#[b5927c]">mb_fsm_run</a>
 <LI><a href="#[b59678]">mb_send_data</a>
 <LI><a href="#[b5981c]">mb_update_execution_time</a>
 <LI><a href="#[b55550]">error_ulvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b5b568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[143419c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1433b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1568c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1568c0c]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[143419c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1568bd0]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1433b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1568b94]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1568d38]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1568cfc]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[15689f0]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1429288]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[156b678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14310a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[142e3dc]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1430830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[142daf4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[142db6c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[142df2c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[142ddc4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[142da04]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[142da7c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[142de3c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[142dd4c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[142e328]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[142e184]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[142e10c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[142e094]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[142e01c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[142dfa4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[142e238]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[142d9c8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[142deb4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[142dcd4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[142e2b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1569968]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[156b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[156a700]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[156a520]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[156a4e4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[156a64c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[156a7b4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[156a5d4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1433b84]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[143419c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1568bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1431154]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1430dd0]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[142a728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14310a0]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1429288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[14310dc]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1430fec]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1429dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1431028]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[156c71c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1429dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[156b420]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1569968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[156b45c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[156b3e4]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[156c8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b5b5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc32x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142a728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[142a23c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b59d80]"></a>mb_setup_hardware</STRONG> (ARM, 516 bytes, Stack size 0 bytes, mb_hardware_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b58bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b59858]"></a>mb_get_timestamp</STRONG> (ARM, 16 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[b5981c]"></a>mb_update_execution_time</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mb_update_execution_time &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b59420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b597e0]"></a>get_io_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_outer_input(int*, int)
<LI><a href="#[b4d5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[b4d648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[b4d6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[b4d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[b4d7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[b4d828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[b4e494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_inner_input(int*, int)
<LI><a href="#[b4e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[b4e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[b4e6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[b4e6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[b4e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[14348e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_init_conditions_input(int*, int)
<LI><a href="#[1434e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1434e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing_entry()
<LI><a href="#[1434ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback()
<LI><a href="#[1434ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1434f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[1434f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance_entry()
<LI><a href="#[1434fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegfront()
<LI><a href="#[1435420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steering_input(int*, int)
<LI><a href="#[1436a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hip_sensor_input(int*, int)
<LI><a href="#[1436b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold_entry()
<LI><a href="#[1436bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold_entry()
<LI><a href="#[1436c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[1436dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[1436e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
</UL>

<P><STRONG><a name="[b597a4]"></a>set_io_float</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_io_float &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stop()
<LI><a href="#[b4d5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[b4d648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[b4d6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[b4d7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[b4d828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[b4e50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stop()
<LI><a href="#[b4e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[b4e5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[b4e6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[b4e728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[b5927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[1434958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_run()
<LI><a href="#[1434994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_start()
<LI><a href="#[1434e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_stop()
<LI><a href="#[1434e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1434ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback()
<LI><a href="#[1434ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1434f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[1434f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance_entry()
<LI><a href="#[1434fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegfront()
<LI><a href="#[1436adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_H_stop()
<LI><a href="#[1436b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold_entry()
<LI><a href="#[1436bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold_entry()
<LI><a href="#[1436c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[1436c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[1436cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[1436cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing()
<LI><a href="#[1436d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[1436dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[1436de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[1436e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing()
<LI><a href="#[1436e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
</UL>

<P><STRONG><a name="[b59768]"></a>get_io_ul</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
</UL>

<P><STRONG><a name="[b5972c]"></a>set_io_ul</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>

<P><STRONG><a name="[b596f0]"></a>mb_read_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b59150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_write_pointer
<LI><a href="#[b593a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b596b4]"></a>mb_create_display_data_lists</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_create_display_data_lists &rArr; mb_bt_create_data_lists
</UL>
<BR>[Calls]<UL><LI><a href="#[b59498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b59678]"></a>mb_send_data</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mb_send_data &rArr; a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b59600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b5963c]"></a>mb_setup_software</STRONG> (ARM, 716 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_setup_software &rArr; mb_fsm_init &rArr; def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b59024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_heartbeat_period_ms
<LI><a href="#[b59060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_init
<LI><a href="#[b59114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_init
<LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[b5936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_init
<LI><a href="#[b59588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_init_tx_list
<LI><a href="#[b596b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b58bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5b4f0]"></a>IRQ_Handler</STRONG> (ARM, 72 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_Handler &rArr; a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b58afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
<LI><a href="#[b58b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b58b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b5b52c]"></a>FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIQ_Handler &rArr; a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b58bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b58bec]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; mb_setup_software &rArr; mb_fsm_init &rArr; def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b58ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_run
<LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
<LI><a href="#[b59d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_hardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[b58fac]"></a>mb_test_ui_board1</STRONG> (ARM, 32 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mb_test_ui_board1 &rArr; mb_io_set_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b5909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b58520]"></a>mb_test_ui_board2</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>

<P><STRONG><a name="[b584e4]"></a>labview_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b584a8]"></a>lcd_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b5846c]"></a>lcd_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b58430]"></a>labview_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b593e4]"></a>mb_distribute_error_frames</STRONG> (ARM, 624 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_distribute_error_frames
</UL>
<BR>[Calls]<UL><LI><a href="#[b5837c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b583b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b583f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[b58430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_pop
<LI><a href="#[b5846c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_pop
<LI><a href="#[b584a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_push
<LI><a href="#[b584e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_push
<LI><a href="#[b59204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b59060]"></a>mb_schedule_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b57ddc]"></a>mb_schedule_tick</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b56324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_clock_tick
<LI><a href="#[b58afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
</UL>

<P><STRONG><a name="[b58ac0]"></a>mb_schedule_run</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mb_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_schedule_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b58bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5774c]"></a>a9_ssp_synchronize_arm7</STRONG> (ARM, 356 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[b59588]"></a>a9_dn_ssp_init_tx_list</STRONG> (ARM, 316 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b57710]"></a>a9_dn_red_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b58bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
<LI><a href="#[b5945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b59510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b5954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b595c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b576d4]"></a>a9_dn_green_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[b594d4]"></a>a9_dn_update_leds</STRONG> (ARM, 132 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b59510]"></a>a9_dn_ssp_send_data</STRONG> (ARM, 884 bytes, Stack size 48 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = a9_dn_ssp_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[b57620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_unread_pointer
<LI><a href="#[b57698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b57710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b5954c]"></a>a9_dn_ssp_parse</STRONG> (ARM, 552 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssp_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[b57698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b576d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_green_led_blink
<LI><a href="#[b57710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b59150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_write_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b58bb0]"></a>a9_dn_ssel_dma_isr</STRONG> (ARM, 680 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5765c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred_fiq
<LI><a href="#[b57710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[b59024]"></a>mb_set_heartbeat_period_ms</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b57170]"></a>mb_hb_toggle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b58fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_task_heartbeat
</UL>

<P><STRONG><a name="[b58fe8]"></a>mb_task_heartbeat</STRONG> (ARM, 92 bytes, Stack size 4 bytes, mb_heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_task_heartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[b57170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hb_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b59498]"></a>mb_bt_create_data_lists</STRONG> (ARM, 180 bytes, Stack size 40 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b596b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>

<P><STRONG><a name="[b56810]"></a>a9_bt_push_io_data_point</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[b59600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>

<P><STRONG><a name="[b59600]"></a>a9_bt_data_sender</STRONG> (ARM, 928 bytes, Stack size 64 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b56810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[b59678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_data
</UL>

<P><STRONG><a name="[b567d4]"></a>a9_bt_start_ch3_dma_transfer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, mb_bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b58b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b58b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>

<P><STRONG><a name="[b58b74]"></a>a9_gpdma_isr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_gpdma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b567d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b58b38]"></a>a9_software_int_isr</STRONG> (ARM, 40 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_software_int_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b567d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b595c4]"></a>a9_bt_dma_receive</STRONG> (ARM, 812 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a9_bt_dma_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b57698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b57710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b5945c]"></a>mb_bt_pop_receive_packets</STRONG> (ARM, 824 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mb_bt_pop_receive_packets &rArr; mb_io_set_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b57698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b57710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b5909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b56324]"></a>a9_clock_tick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, a9_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b57ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>

<P><STRONG><a name="[b59420]"></a>mb_clock_get_execution_time</STRONG> (ARM, 36 bytes, Stack size 0 bytes, a9_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b58afc]"></a>a9_timer0_isr</STRONG> (ARM, 56 bytes, Stack size 8 bytes, a9_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b57ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b59150]"></a>mb_io_get_write_pointer</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b596f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b55eb0]"></a>mb_io_get_read_pointer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_io_data.o(.text), UNUSED)

<P><STRONG><a name="[b59204]"></a>mb_io_get_pointer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[b583b8]"></a>mb_io_mark_as_read</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b55e74]"></a>mb_io_mark_as_unread</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mb_io_data.o(.text), UNUSED)

<P><STRONG><a name="[b5837c]"></a>mb_io_mark_as_unread_by_all</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b583f4]"></a>mb_io_data_was_read</STRONG> (ARM, 44 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b593e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b57620]"></a>mb_io_get_unread_pointer</STRONG> (ARM, 100 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b59510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
</UL>

<P><STRONG><a name="[b59240]"></a>mb_io_get_float</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b54380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_the_javad_strobe
<LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b54524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_New_FootStatus
<LI><a href="#[b54560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter_imuar
<LI><a href="#[b5459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[b5918c]"></a>mb_io_get_ul</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b59768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>

<P><STRONG><a name="[b55e38]"></a>mb_io_get_sl</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_io_data.o(.text), UNUSED)

<P><STRONG><a name="[b591c8]"></a>mb_io_get_time</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b544e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b54524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_New_FootStatus
<LI><a href="#[b54560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter_imuar
<LI><a href="#[b5459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter
<LI><a href="#[b55dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[b5909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b59858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
</UL>

<P><STRONG><a name="[b590d8]"></a>mb_io_set_float</STRONG> (ARM, 60 bytes, Stack size 4 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b54380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_the_javad_strobe
<LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b544e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b54524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_New_FootStatus
<LI><a href="#[b54560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter_imuar
<LI><a href="#[b5459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter
<LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b5981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b5909c]"></a>mb_io_set_ul</STRONG> (ARM, 64 bytes, Stack size 4 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_io_set_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b58520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_test_ui_board2
<LI><a href="#[b58fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_test_ui_board1
<LI><a href="#[b5945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b5972c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>

<P><STRONG><a name="[b55dfc]"></a>mb_io_set_sl</STRONG> (ARM, 64 bytes, Stack size 4 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[b55dc0]"></a>mb_io_set_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b54524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_New_FootStatus
<LI><a href="#[b54560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter_imuar
<LI><a href="#[b5459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter
</UL>

<P><STRONG><a name="[b59114]"></a>mb_io_init</STRONG> (ARM, 172 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b55604]"></a>mb_error_pop</STRONG> (ARM, 168 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b593a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b593a8]"></a>mb_error_get_frame</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mb_error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b55604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[b596f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b5936c]"></a>mb_error_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b57698]"></a>mb_error_occurred</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b59510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b5954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b595c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b555c8]"></a>mb_error_occurred_irq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)

<P><STRONG><a name="[b5765c]"></a>mb_error_occurred_fiq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b58bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>

<P><STRONG><a name="[b5558c]"></a>mb_error_push</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_error_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b59330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_update
</UL>

<P><STRONG><a name="[b59330]"></a>mb_error_update</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_error_update &rArr; mb_error_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b5558c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b55550]"></a>error_ulvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_error.o(.data)
</UL>
<P><STRONG><a name="[b5459c]"></a>mb_exp_filter</STRONG> (ARM, 288 bytes, Stack size 64 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mb_exp_filter &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b55dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b592f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b54560]"></a>mb_exp_filter_imuar</STRONG> (ARM, 308 bytes, Stack size 64 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mb_exp_filter_imuar &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b55dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b592f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b54524]"></a>mb_update_New_FootStatus</STRONG> (ARM, 1096 bytes, Stack size 64 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mb_update_New_FootStatus &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b55dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b592f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b544e8]"></a>mb_time_since_last_HS</STRONG> (ARM, 92 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mb_time_since_last_HS &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b592f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b544ac]"></a>greg_cos</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b54470]"></a>greg_atan</STRONG> (ARM, 252 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b54434]"></a>greg_sin</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b543f8]"></a>greg_sqrt</STRONG> (ARM, 240 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b543bc]"></a>mb_update_abs_leg_and_ankle_angles</STRONG> (ARM, 1120 bytes, Stack size 80 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b543f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sqrt
<LI><a href="#[b54434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[b54470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_atan
<LI><a href="#[b544ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[b55dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b591c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b592f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b54380]"></a>mb_the_javad_strobe</STRONG> (ARM, 252 bytes, Stack size 40 bytes, mb_estimator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b590d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b59240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>

<P><STRONG><a name="[b592f4]"></a>mb_estimator_update</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mb_estimator_update &rArr; mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b543bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b544e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b54524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_New_FootStatus
<LI><a href="#[b54560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter_imuar
<LI><a href="#[b5459c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_exp_filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b4e764]"></a>ACT_FI_stance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e728]"></a>ACT_FI_stance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4e6ec]"></a>ACT_FI_prepush_entry()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4e6b0]"></a>ACT_FI_prepush()</STRONG> (ARM, 108 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4e674]"></a>ACT_FI_afterpush_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e638]"></a>ACT_FI_afterpush()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e5fc]"></a>ACT_FI_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e5c0]"></a>ACT_FI_flipup()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4e584]"></a>ACT_FI_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e548]"></a>ACT_FI_flipdown()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4e50c]"></a>ACT_FI_stop()</STRONG> (ARM, 84 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[b4e4d0]"></a>def_foot_inner_fsm(fsm*)</STRONG> (ARM, 484 bytes, Stack size 120 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b4e2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b4e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b4e32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b4e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b4e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[b4e494]"></a>get_foot_inner_input(int*, int)</STRONG> (ARM, 364 bytes, Stack size 24 bytes, foot_inner_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_foot_inner_input(int*, int) &rArr; get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[b4d864]"></a>ACT_FO_stance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d828]"></a>ACT_FO_stance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d7ec]"></a>ACT_FO_prepush_entry()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d7b0]"></a>ACT_FO_prepush()</STRONG> (ARM, 108 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d774]"></a>ACT_FO_afterpush_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d738]"></a>ACT_FO_afterpush()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d6fc]"></a>ACT_FO_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d6c0]"></a>ACT_FO_flipup()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d684]"></a>ACT_FO_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d648]"></a>ACT_FO_flipdown()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d60c]"></a>ACT_FO_startstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4d5d0]"></a>ACT_FO_startstance()</STRONG> (ARM, 164 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b4d594]"></a>ACT_FO_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[b4d558]"></a>def_foot_outer_fsm(fsm*)</STRONG> (ARM, 556 bytes, Stack size 120 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b4e2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b4e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b4e32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b4e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b4e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[b4d51c]"></a>get_foot_outer_input(int*, int)</STRONG> (ARM, 412 bytes, Stack size 24 bytes, foot_outer_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_foot_outer_input(int*, int) &rArr; get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[b4e458]"></a>copy(fsm*, fsm*)</STRONG> (ARM, 672 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy(fsm*, fsm*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1433ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[b4e278]"></a>fsm::fsm(int, int, int)</STRONG> (ARM, 576 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1433ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[1437748]"></a>fsm::fsm__sub_object(int, int, int)</STRONG> (ARM, 0 bytes, Stack size 24 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[143770c]"></a>fsm::fsm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14376d0]"></a>fsm::fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e23c]"></a>fsm::~fsm()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fsm::~fsm() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1434034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[1437694]"></a>fsm::~fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 8 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1437658]"></a>fsm::state_def(int, int(*)())</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e41c]"></a>fsm::exit_state_def(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[14375e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)
<LI><a href="#[143761c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int)
</UL>

<P><STRONG><a name="[143761c]"></a>fsm::state_def(int, int(*)(), int)</STRONG> (ARM, 68 bytes, Stack size 20 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[14375e0]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)</STRONG> (ARM, 124 bytes, Stack size 28 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[b4e2f0]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)())</STRONG> (ARM, 84 bytes, Stack size 4 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fsm::state_def(int, int(*)(), int(*)(), int(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[b4e2b4]"></a>fsm::trans_def(int, int, int)</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm::trans_def(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[b4e3e0]"></a>fsm::set_sensor_input_function(void(*)(int*, int))</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[b4e32c]"></a>fsm::set_name(char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[b4e3a4]"></a>fsm::print_state_transition_matrix()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[14375a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>

<P><STRONG><a name="[14375a4]"></a>fsm::check(int)</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[1437568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[1437568]"></a>fsm::run()</STRONG> (ARM, 1256 bytes, Stack size 416 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[14375a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
</UL>

<P><STRONG><a name="[143752c]"></a>fsm::get_current_state()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[14374f0]"></a>fsm::ready_to_exit()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[14374b4]"></a>fsm::stop()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b4e368]"></a>fsm::set_state_communication_variable(int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
</UL>

<P><STRONG><a name="[1437478]"></a>fsm::print_transition_insertion_history()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436e9c]"></a>ACT_HI_starthold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436e60]"></a>ACT_HI_starthold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1436e24]"></a>ACT_HI_preswing()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436de8]"></a>ACT_HI_premid_entry()</STRONG> (ARM, 36 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436dac]"></a>ACT_HI_premid()</STRONG> (ARM, 84 bytes, Stack size 32 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1436d70]"></a>ACT_HI_aftermid_entry()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436d34]"></a>ACT_HI_aftermid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436cf8]"></a>ACT_HO_preswing()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436cbc]"></a>ACT_HO_premid_entry()</STRONG> (ARM, 36 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436c80]"></a>ACT_HO_premid()</STRONG> (ARM, 88 bytes, Stack size 32 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1436c44]"></a>ACT_HO_aftermid_entry()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436c08]"></a>ACT_HO_aftermid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436bcc]"></a>ACT_HI_ehold_entry()</STRONG> (ARM, 108 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1436b90]"></a>ACT_HI_ehold()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436b54]"></a>ACT_HO_ehold_entry()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1436b18]"></a>ACT_HO_ehold()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1436adc]"></a>ACT_H_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1436aa0]"></a>def_hip_fsm(fsm*)</STRONG> (ARM, 664 bytes, Stack size 120 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_hip_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b4e2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b4e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b4e32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b4e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b4e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[1436a64]"></a>get_hip_sensor_input(int*, int)</STRONG> (ARM, 512 bytes, Stack size 24 bytes, hip_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_hip_sensor_input(int*, int) &rArr; get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1435dbc]"></a>init_global_comm()</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[b592b8]"></a>mb_fsm_init</STRONG> (ARM, 292 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mb_fsm_init &rArr; def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4d558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[b4e4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1433cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
<LI><a href="#[1435d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[1435d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[1435dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_global_comm()
<LI><a href="#[1436aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[14375a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[143770c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm()
</UL>
<BR>[Called By]<UL><LI><a href="#[b5963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b5927c]"></a>mb_fsm_run</STRONG> (ARM, 188 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1437568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1435420]"></a>get_steering_input(int*, int)</STRONG> (ARM, 348 bytes, Stack size 24 bytes, steering_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_steering_input(int*, int) &rArr; get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[1434fe8]"></a>ACT_S_innerlegfront_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1434fac]"></a>ACT_S_innerlegfront()</STRONG> (ARM, 92 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434f70]"></a>ACT_S_innerlegstance_entry()</STRONG> (ARM, 76 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434f34]"></a>ACT_S_innerlegstance()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434ef8]"></a>ACT_S_innerlegback_entry()</STRONG> (ARM, 60 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434ebc]"></a>ACT_S_innerlegback()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434e80]"></a>ACT_S_innerlegswing_entry()</STRONG> (ARM, 32 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434e44]"></a>ACT_S_innerlegswing()</STRONG> (ARM, 92 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1434e08]"></a>ACT_S_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1435d80]"></a>def_steering_fsm(fsm*)</STRONG> (ARM, 420 bytes, Stack size 120 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b4e2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b4e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b4e32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b4e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b4e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[1434994]"></a>ACTION_SI_system_start()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1434958]"></a>ACTION_SI_system_run()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b597a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[143491c]"></a>ACTION_SI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_init_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1435d44]"></a>def_system_init_fsm(fsm*)</STRONG> (ARM, 260 bytes, Stack size 120 bytes, system_init_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b4e2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b4e2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b4e32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b4e368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b4e3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b4e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b4e41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14348e0]"></a>get_system_init_conditions_input(int*, int)</STRONG> (ARM, 200 bytes, Stack size 16 bytes, system_init_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_system_init_conditions_input(int*, int) &rArr; get_io_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b597e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_init_fsm.o(.text)
</UL>
<P><STRONG><a name="[1434304]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14342c8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[143428c]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14337c4]"></a>__rt_new_handler_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1433cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
</UL>

<P><STRONG><a name="[14334b8]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14308a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1430b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1433cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[156b81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[156cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1431ba4]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142d20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[1431550]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1431514]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142a728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14314d8]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1430b3c]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14301dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1430830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[14334b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[1430a4c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1430a10]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1430920]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[14308e4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[14308a8]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1429fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[14334b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[143086c]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1429abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1430830]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1429abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1429fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1430308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1430b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[142e3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1430308]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1430830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14302cc]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[14301dc]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1430b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1429fe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1431d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[142d20c]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[156cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[1431ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[142a728]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b5b5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1431514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1430dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1429fe4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14301dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1430830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[14308a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1429dc8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1429d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[156c71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1430fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1429c60]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1569968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[156bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[156c8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[142d20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[156cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[156cf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[1429abc]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156bb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[156be70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1430830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[143086c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[156cf50]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[14334b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156b81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[156c1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[142d20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[156c8fc]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via BLX)
<LI><a href="#[156b3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[156be70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
</UL>

<P><STRONG><a name="[156c80c]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[156c7d0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[156c1b8]"></a>__rt_eh_globals_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via BLX)
</UL>

<P><STRONG><a name="[156be70]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[156c8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1429abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[156bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[156bd80]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156ae44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[156be70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[156bb64]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156af70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1429abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[156b81c]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14334b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[156cf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[156b7e0]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[156b7a4]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[156af70]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156a2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[156ae44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[156bb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[156ae44]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156af70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[156bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[156a2c8]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[156af70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1434034]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1431d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm() (via BLX)
</UL>

<P><STRONG><a name="[1431d84]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14301dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1434034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1433ecc]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1433cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int) (via BLX)
<LI><a href="#[b4e458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*) (via BLX)
</UL>

<P><STRONG><a name="[1433cec]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14334b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14337c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b592b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init (via BLX)
<LI><a href="#[1433ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[156b678]"></a>_fp_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1429288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[156b63c]"></a>__fplib_config_fpu_vfp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[156b600]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5b748]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b5b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b5b70c]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b5b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b5b6d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b5b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b5b694]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b5b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b5b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[156cf8c]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1429c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[1429d50]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1429dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
