<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Ext_SDRAM\LPC3250_main_brain.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Ext_SDRAM\LPC3250_main_brain.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Jun 30 08:22:50 2015
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ACTION_UI_walk() &rArr; all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1dfa568]">Reset_Handler</a>
 <LI><a href="#[1dfa748]">Undef_Handler</a>
 <LI><a href="#[1dfa70c]">SWI_Handler</a>
 <LI><a href="#[1dfa6d0]">PAbt_Handler</a>
 <LI><a href="#[1dfa694]">DAbt_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1dfa748]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dfa748]">Undef_Handler</a><BR>
 <LI><a href="#[1dfa70c]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dfa70c]">SWI_Handler</a><BR>
 <LI><a href="#[1dfa6d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dfa6d0]">PAbt_Handler</a><BR>
 <LI><a href="#[1dfa694]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1dfa694]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1df4118]">error_ulvoid</a>
 <LI><a href="#[1dfa568]">Reset_Handler</a>
 <LI><a href="#[1dfa748]">Undef_Handler</a>
 <LI><a href="#[1dfa70c]">SWI_Handler</a>
 <LI><a href="#[1dfa6d0]">PAbt_Handler</a>
 <LI><a href="#[1dfa694]">DAbt_Handler</a>
 <LI><a href="#[1dfa4f0]">IRQ_Handler</a>
 <LI><a href="#[1dfa52c]">FIQ_Handler</a>
 <LI><a href="#[2b80ca4]">__main</a>
 <LI><a href="#[1df773c]">main</a>
 <LI><a href="#[1df7d90]">mb_io_get_float</a>
 <LI><a href="#[2b870f4]">ACTION_UI_calibrate()</a>
 <LI><a href="#[2b8716c]">ACTION_UI_calibrate_entry()</a>
 <LI><a href="#[2b87004]">ACTION_UI_walk()</a>
 <LI><a href="#[2b870b8]">ACTION_UI_walk_entry()</a>
 <LI><a href="#[2b8734c]">get_UI_conditions_input(int*, int)</a>
 <LI><a href="#[2b85f9c]">ACT_FI_stance()</a>
 <LI><a href="#[2b85fd8]">ACT_FI_stance_entry()</a>
 <LI><a href="#[2b85f24]">ACT_FI_prepush()</a>
 <LI><a href="#[2b85f60]">ACT_FI_prepush_entry()</a>
 <LI><a href="#[2b8545c]">ACT_FO_stance()</a>
 <LI><a href="#[2b854d4]">get_foot_outer_input(int*, int)</a>
 <LI><a href="#[2b8419c]">ACT_HI_starthold()</a>
 <LI><a href="#[2b841d8]">ACT_HI_starthold_entry()</a>
 <LI><a href="#[2b84124]">ACT_HI_preswing()</a>
 <LI><a href="#[2b84160]">ACT_HI_preswing_entry()</a>
 <LI><a href="#[2b840ac]">ACT_HI_premid()</a>
 <LI><a href="#[2b840e8]">ACT_HI_premid_entry()</a>
 <LI><a href="#[2b83ff8]">ACT_HI_aftermid()</a>
 <LI><a href="#[2b84034]">ACT_HI_aftermid_entry()</a>
 <LI><a href="#[2b83fbc]">ACT_HO_preswing_entry()</a>
 <LI><a href="#[2b83ecc]">ACT_HO_premid_exit()</a>
 <LI><a href="#[2b83f08]">ACT_HO_premid()</a>
 <LI><a href="#[2b83f44]">ACT_HO_premid_entry()</a>
 <LI><a href="#[2b83e90]">ACT_HO_aftermid_entry()</a>
 <LI><a href="#[2b84214]">get_hip_sensor_input(int*, int)</a>
 <LI><a href="#[2b82edc]">ACT_LI_preswing_exit()</a>
 <LI><a href="#[2b82f18]">ACT_LI_preswing()</a>
 <LI><a href="#[2b82f54]">ACT_LI_preswing_entry()</a>
 <LI><a href="#[2b830f8]">ACT_LO_preswing()</a>
 <LI><a href="#[2b83134]">ACT_LO_preswing_entry()</a>
 <LI><a href="#[2b83044]">ACT_LO_premid()</a>
 <LI><a href="#[2b83080]">ACT_LO_premid_entry()</a>
 <LI><a href="#[2b82f90]">ACT_LO_aftermid_exit()</a>
 <LI><a href="#[2b82fcc]">ACT_LO_aftermid()</a>
 <LI><a href="#[2b83008]">ACT_LO_aftermid_entry()</a>
 <LI><a href="#[2b83170]">get_leg_sensor_input(int*, int)</a>
 <LI><a href="#[2b81eec]">ACT_S_innerlegfront()</a>
 <LI><a href="#[2b81f28]">ACT_S_innerlegfront_entry()</a>
 <LI><a href="#[2b81e74]">ACT_S_innerlegstance()</a>
 <LI><a href="#[2b81eb0]">ACT_S_innerlegstance_entry()</a>
 <LI><a href="#[2b81fdc]">get_steering_input(int*, int)</a>
 <LI><a href="#[2cee3b8]">__default_terminate_handler()</a>
 <LI><a href="#[2cedc38]">__I$use$semihosting</a>
 <LI><a href="#[2b7e4cc]">__default_new_handler()</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df8060]">mb_bt_pop_receive_packets</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df818c]">a9_bt_dma_receive</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df827c]">mb_create_display_data_lists</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7fe8]">mb_distribute_error_frames</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7afc]">mb_test_ui_board1</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df7f34]">mb_error_update</a>
 <LI><a href="#[1df7b38]">mb_task_heartbeat</a>
 <LI><a href="#[1df8150]">a9_dn_ssp_parse</a>
 <LI><a href="#[1df7ef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[1df7e80]">mb_estimator_update</a>
 <LI><a href="#[1df7ebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[1df8114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[1df80d8]">a9_dn_update_leds</a>
 <LI><a href="#[1df7e08]">mb_fsm_run</a>
 <LI><a href="#[1df8240]">mb_send_data</a>
 <LI><a href="#[1df845c]">mb_update_execution_time</a>
 <LI><a href="#[1df4118]">error_ulvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1dfa568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[2b80ca4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2b8068c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2cea380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2cea380]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b80ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2cea344]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8068c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2cea308]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2cea4ac]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2cea470]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2cea164]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2cef114]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[2cecae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7d9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[2b7b808]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7d02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2b7af20]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2b7af98]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2b7b358]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2b7b1f0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2b7ae30]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2b7aea8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2b7b268]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2b7b178]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2b7b754]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2b7b5b0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2b7b538]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2b7b4c0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2b7b448]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2b7b3d0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2b7b664]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2b7adf4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2b7b2e0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2b7b100]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2b7b6dc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2ceb0dc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2cec888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
<LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2cebd84]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2cebba4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2cebb68]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2cebcd0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2cebe38]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2cebc58]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2b8068c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b80ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2cea344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2b7da7c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2b7d6f8]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf05b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b7d9c8]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2cef114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2b7da04]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2b7d914]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2cefe70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2b7d950]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2cedb48]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2cefe70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[2cec888]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2ceb0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[2cec8c4]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2cec84c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2cedd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1dfa5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc32x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf05b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2cf02e4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1df89c0]"></a>mb_setup_hardware</STRONG> (ARM, 516 bytes, Stack size 0 bytes, mb_hardware_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df773c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df8498]"></a>mb_get_timestamp</STRONG> (ARM, 16 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[1df845c]"></a>mb_update_execution_time</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_update_execution_time &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df8024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8420]"></a>get_io_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2b81d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid()
<LI><a href="#[2b81d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2b81d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingpremid()
<LI><a href="#[2b81e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[2b81eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance_entry()
<LI><a href="#[2b81f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_steer(float)
<LI><a href="#[2b81fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steering_input(int*, int)
<LI><a href="#[2b82e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_entry()
<LI><a href="#[2b82ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_premid_entry()
<LI><a href="#[2b82f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_preswing_entry()
<LI><a href="#[2b83008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_entry()
<LI><a href="#[2b83080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_premid_entry()
<LI><a href="#[2b83134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_preswing_entry()
<LI><a href="#[2b83170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_leg_sensor_input(int*, int)
<LI><a href="#[2b83d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[2b83ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[2b83e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[2b83e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[2b83f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[2b83f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[2b83fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing_entry()
<LI><a href="#[2b83ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[2b84034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[2b840ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[2b840e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[2b84160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing_entry()
<LI><a href="#[2b8419c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[2b84214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hip_sensor_input(int*, int)
<LI><a href="#[2b8518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[2b85204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[2b8527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[2b8536c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_entry()
<LI><a href="#[2b853e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[2b85420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[2b8545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[2b85498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[2b854d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_outer_input(int*, int)
<LI><a href="#[2b85ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[2b85d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[2b85dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[2b85eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush_entry()
<LI><a href="#[2b85f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[2b85f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[2b85f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[2b85fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[2b86014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_inner_input(int*, int)
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2b87040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2b8725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2b8734c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[1df83e4]"></a>set_io_float</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2b81cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_stop()
<LI><a href="#[2b81d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid()
<LI><a href="#[2b81d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2b81d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingpremid()
<LI><a href="#[2b81e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[2b82db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_exit()
<LI><a href="#[2b82e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_entry()
<LI><a href="#[2b82ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_premid_entry()
<LI><a href="#[2b82edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_preswing_exit()
<LI><a href="#[2b82f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_exit()
<LI><a href="#[2b83008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_entry()
<LI><a href="#[2b83080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_premid_entry()
<LI><a href="#[2b830bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_preswing_exit()
<LI><a href="#[2b83d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_H_stop()
<LI><a href="#[2b83d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[2b83ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[2b83e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[2b83e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[2b83f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[2b83f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing()
<LI><a href="#[2b83fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing_entry()
<LI><a href="#[2b83ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[2b84034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[2b840ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[2b84124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing()
<LI><a href="#[2b84160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing_entry()
<LI><a href="#[2b8419c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[2b85150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stop()
<LI><a href="#[2b8518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[2b85204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[2b8527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[2b852f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_exit()
<LI><a href="#[2b85330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush()
<LI><a href="#[2b8536c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_entry()
<LI><a href="#[2b853a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_exit()
<LI><a href="#[2b853e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[2b85420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[2b8545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[2b85498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[2b85c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stop()
<LI><a href="#[2b85ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[2b85d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[2b85dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[2b85e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush_exit()
<LI><a href="#[2b85e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush()
<LI><a href="#[2b85ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_exit()
<LI><a href="#[2b85f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[2b85f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[2b85f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[2b85fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[2b86f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[2b86fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
<LI><a href="#[2b870b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2b8716c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2b87220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
<LI><a href="#[2b8725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2b87298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[1df83a8]"></a>get_io_ul</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b87388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>

<P><STRONG><a name="[1df836c]"></a>set_io_ul</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b81d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2b87130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b872d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[1df8330]"></a>mark_as_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df7c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
</UL>

<P><STRONG><a name="[1df82f4]"></a>data_was_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>

<P><STRONG><a name="[1df82b8]"></a>mb_read_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[1df7fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[1df827c]"></a>mb_create_display_data_lists</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_create_display_data_lists &rArr; mb_bt_create_data_lists
</UL>
<BR>[Calls]<UL><LI><a href="#[1df809c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8240]"></a>mb_send_data</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mb_send_data &rArr; a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[1df81c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8204]"></a>mb_setup_software</STRONG> (ARM, 712 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_setup_software &rArr; mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_heartbeat_period_ms
<LI><a href="#[1df7bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_init
<LI><a href="#[1df7ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_init
<LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[1df7f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_init
<LI><a href="#[1df827c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[1df773c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1dfa4f0]"></a>IRQ_Handler</STRONG> (ARM, 72 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_Handler &rArr; a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df764c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
<LI><a href="#[1df7688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[1df76c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1dfa52c]"></a>FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIQ_Handler &rArr; a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1df773c]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; mb_setup_software &rArr; mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_run
<LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
<LI><a href="#[1df89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_hardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[1df7afc]"></a>mb_test_ui_board1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df7070]"></a>labview_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[1df7034]"></a>lcd_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[1df6ff8]"></a>lcd_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[1df6fbc]"></a>labview_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[1df7fe8]"></a>mb_distribute_error_frames</STRONG> (ARM, 656 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_distribute_error_frames &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1df6f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[1df6fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_pop
<LI><a href="#[1df6ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_pop
<LI><a href="#[1df7034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_push
<LI><a href="#[1df7070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_push
<LI><a href="#[1df7c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[1df7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[1df7fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df7bb0]"></a>mb_schedule_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[1df69e0]"></a>mb_schedule_tick</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df4eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_clock_tick
<LI><a href="#[1df764c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
</UL>

<P><STRONG><a name="[1df7610]"></a>mb_schedule_run</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mb_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_schedule_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1df773c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df62d8]"></a>a9_ssp_synchronize_arm7</STRONG> (ARM, 356 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[1df629c]"></a>a9_dn_ssp_init_tx_list</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[1df6260]"></a>a9_dn_red_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
<LI><a href="#[1df8060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[1df8114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[1df8150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[1df818c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[1df6224]"></a>a9_dn_green_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df8150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[1df80d8]"></a>a9_dn_update_leds</STRONG> (ARM, 132 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8114]"></a>a9_dn_ssp_send_data</STRONG> (ARM, 912 bytes, Stack size 48 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a9_dn_ssp_send_data &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df6260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[1df7c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[1df7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8150]"></a>a9_dn_ssp_parse</STRONG> (ARM, 584 bytes, Stack size 24 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_dn_ssp_parse &rArr; mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df6224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_green_led_blink
<LI><a href="#[1df6260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[1df6f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df7700]"></a>a9_dn_ssel_dma_isr</STRONG> (ARM, 680 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred_fiq
<LI><a href="#[1df6260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[1df7b74]"></a>mb_set_heartbeat_period_ms</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[1df5cfc]"></a>mb_hb_toggle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_task_heartbeat
</UL>

<P><STRONG><a name="[1df7b38]"></a>mb_task_heartbeat</STRONG> (ARM, 92 bytes, Stack size 4 bytes, mb_heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_task_heartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[1df5cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hb_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df809c]"></a>mb_bt_create_data_lists</STRONG> (ARM, 180 bytes, Stack size 40 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[1df827c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>

<P><STRONG><a name="[1df539c]"></a>a9_bt_push_io_data_point</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[1df81c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>

<P><STRONG><a name="[1df81c8]"></a>a9_bt_data_sender</STRONG> (ARM, 976 bytes, Stack size 48 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[1df539c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_push_io_data_point
<LI><a href="#[1df7c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[1df7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1df8240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_data
</UL>

<P><STRONG><a name="[1df5360]"></a>a9_bt_start_ch3_dma_transfer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, mb_bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[1df76c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>

<P><STRONG><a name="[1df76c4]"></a>a9_gpdma_isr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_gpdma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df5360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1df7688]"></a>a9_software_int_isr</STRONG> (ARM, 40 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_software_int_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df5360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1df818c]"></a>a9_bt_dma_receive</STRONG> (ARM, 812 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a9_bt_dma_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df6260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df8060]"></a>mb_bt_pop_receive_packets</STRONG> (ARM, 820 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_bt_pop_receive_packets &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df6260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[1df7bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df4eb0]"></a>a9_clock_tick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, a9_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df69e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>

<P><STRONG><a name="[1df8024]"></a>mb_clock_get_execution_time</STRONG> (ARM, 36 bytes, Stack size 0 bytes, a9_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[1df7ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_start
<LI><a href="#[1df845c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[1df764c]"></a>a9_timer0_isr</STRONG> (ARM, 56 bytes, Stack size 8 bytes, a9_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[1df69e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[1df7d54]"></a>mb_io_get_pointer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[1df8114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[1df8150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[1df81c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[1df82b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[1df7c64]"></a>mb_io_mark_as_read</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[1df8114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[1df81c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[1df8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
</UL>

<P><STRONG><a name="[1df4a3c]"></a>mb_io_mark_as_unread</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[1df6f80]"></a>mb_io_mark_as_unread_by_all</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[1df8150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[1df7dcc]"></a>mb_io_data_was_read</STRONG> (ARM, 76 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[1df8114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[1df81c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[1df82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
</UL>

<P><STRONG><a name="[1df7d90]"></a>mb_io_get_float</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[1df2570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[1df25ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[1df25e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[1df2624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[1df7cdc]"></a>mb_io_get_ul</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>

<P><STRONG><a name="[1df4a00]"></a>mb_io_get_sl</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[1df7d18]"></a>mb_io_get_time</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[1df2534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[1df25ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[1df25e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[1df2624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[1df49c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[1df7bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df8498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
</UL>

<P><STRONG><a name="[1df7c28]"></a>mb_io_set_float</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[1df2534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[1df2570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[1df25ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[1df25e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[1df2624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[1df7ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df845c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[1df7bec]"></a>mb_io_set_ul</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1df8060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>

<P><STRONG><a name="[1df49c4]"></a>mb_io_set_sl</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[1df4988]"></a>mb_io_set_time</STRONG> (ARM, 72 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_set_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df61e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[1df25ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[1df25e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[1df2624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
</UL>

<P><STRONG><a name="[1df7ca0]"></a>mb_io_init</STRONG> (ARM, 1920 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[1df41cc]"></a>mb_error_pop</STRONG> (ARM, 168 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[1df7fac]"></a>mb_error_get_frame</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_error_get_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[1df41cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[1df82b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[1df7f70]"></a>mb_error_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[1df61e8]"></a>mb_error_occurred</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df4988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[1df49c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[1df4a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_sl
<LI><a href="#[1df4a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread
<LI><a href="#[1df6f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[1df7bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[1df7cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[1df7d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
<LI><a href="#[1df7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[1df8060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[1df8114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[1df8150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[1df818c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[1df4190]"></a>mb_error_occurred_irq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)

<P><STRONG><a name="[1df61ac]"></a>mb_error_occurred_fiq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>

<P><STRONG><a name="[1df4154]"></a>mb_error_push</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_error_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_update
</UL>

<P><STRONG><a name="[1df7f34]"></a>mb_error_update</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_error_update &rArr; mb_error_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1df4154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df4118]"></a>error_ulvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_error.o(.data)
</UL>
<P><STRONG><a name="[1df2624]"></a>mb_imu_rate_filter</STRONG> (ARM, 556 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_imu_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df4988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df25e8]"></a>mb_hip_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df4988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df25ac]"></a>mb_hip_motor_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_motor_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df4988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df2570]"></a>mb_leg_state_machine_new</STRONG> (ARM, 1816 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_leg_state_machine_new &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df2534]"></a>mb_time_since_last_HS_and_step_counter</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_time_since_last_HS_and_step_counter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df24f8]"></a>greg_cos</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[1df24bc]"></a>anoop_asin</STRONG> (ARM, 148 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2b81a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[1df2480]"></a>greg_sqrt</STRONG> (ARM, 240 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[1df2444]"></a>greg_atan</STRONG> (ARM, 252 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[1df2408]"></a>greg_sin</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[1df23cc]"></a>mb_abs_leg_and_ankle_angles_and_swingfootheight</STRONG> (ARM, 1720 bytes, Stack size 160 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mb_abs_leg_and_ankle_angles_and_swingfootheight &rArr; anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1df2408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[1df2444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_atan
<LI><a href="#[1df2480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sqrt
<LI><a href="#[1df24bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anoop_asin
<LI><a href="#[1df24f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[1df2390]"></a>mb_model_based_estimator</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_estimator.o(.text), UNUSED)

<P><STRONG><a name="[1df7e80]"></a>mb_estimator_update</STRONG> (ARM, 320 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mb_estimator_update &rArr; mb_abs_leg_and_ankle_angles_and_swingfootheight &rArr; anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1df23cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[1df2534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[1df2570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[1df25ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[1df25e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[1df2624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df7d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df7ef8]"></a>mb_estimator_execution_time_start</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_estimator_execution_time_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1df7ebc]"></a>mb_estimator_execution_time_stop</STRONG> (ARM, 44 bytes, Stack size 16 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_estimator_execution_time_stop &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df7c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[1df8024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2b87388]"></a>detect_UI_button_input(int)</STRONG> (ARM, 52 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8734c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[2b8734c]"></a>get_UI_conditions_input(int*, int)</STRONG> (ARM, 208 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_UI_conditions_input(int*, int) &rArr; detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b87388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b87310]"></a>clear_UI_LED()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LED() &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo_entry()
<LI><a href="#[2b86f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[2b870b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2b8716c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
<LI><a href="#[2b87298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[2b872d4]"></a>set_UI_LED(int, char)</STRONG> (ARM, 224 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2b87040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2b87298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[2b87298]"></a>cam_emergency()</STRONG> (ARM, 252 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cam_emergency() &rArr; set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2b872d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2b8725c]"></a>get_nav_signal()</STRONG> (ARM, 508 bytes, Stack size 32 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_nav_signal() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[2b87220]"></a>motors_off()</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2b86fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
</UL>

<P><STRONG><a name="[2b871e4]"></a>all_fsm_run()</STRONG> (ARM, 348 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b86c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2b86fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2b871a8]"></a>clear_UI_LCD(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2b870b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2b8716c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
</UL>

<P><STRONG><a name="[2b8716c]"></a>ACTION_UI_calibrate_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACTION_UI_calibrate_entry() &rArr; clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b87130]"></a>set_UI_LCD(char*, int)</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LCD(char*, int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2b870f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[2b870f4]"></a>ACTION_UI_calibrate()</STRONG> (ARM, 588 bytes, Stack size 32 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ACTION_UI_calibrate() &rArr; get_nav_signal() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b87130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b8725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2b872d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b870b8]"></a>ACTION_UI_walk_entry()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACTION_UI_walk_entry() &rArr; clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b8707c]"></a>int2ascii(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ui_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2b87040]"></a>update_UI_LED()</STRONG> (ARM, 640 bytes, Stack size 24 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update_UI_LED() &rArr; set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b872d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2b87004]"></a>ACTION_UI_walk()</STRONG> (ARM, 2288 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ACTION_UI_walk() &rArr; all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b81730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2b87040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2b8707c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[2b87130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2b8725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2b87298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b86fc8]"></a>ACTION_UI_walk_exit()</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2b87220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>

<P><STRONG><a name="[2b86f8c]"></a>ACTION_UI_standby_entry()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[2b86f50]"></a>ACTION_UI_standby()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b87130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2b871a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2b87220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
<LI><a href="#[2b872d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
</UL>

<P><STRONG><a name="[2b86f14]"></a>ACTION_UI_standby_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86ed8]"></a>ACTION_UI_nogo_entry()</STRONG> (ARM, 16 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b87310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[2b86e9c]"></a>ACTION_UI_nogo()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b87040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2b8725c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
</UL>

<P><STRONG><a name="[2b86e60]"></a>ACTION_UI_nogo_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86e24]"></a>ACTION_UI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86de8]"></a>def_UI_fsm(fsm*)</STRONG> (ARM, 600 bytes, Stack size 120 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_UI_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b86014]"></a>get_foot_inner_input(int*, int)</STRONG> (ARM, 544 bytes, Stack size 24 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85fd8]"></a>ACT_FI_stance_entry()</STRONG> (ARM, 192 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_stance_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85f9c]"></a>ACT_FI_stance()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_stance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85f60]"></a>ACT_FI_prepush_entry()</STRONG> (ARM, 444 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_FI_prepush_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85f24]"></a>ACT_FI_prepush()</STRONG> (ARM, 360 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_prepush() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85ee8]"></a>ACT_FI_prepush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b85eac]"></a>ACT_FI_afterpush_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85e70]"></a>ACT_FI_afterpush()</STRONG> (ARM, 84 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b85e34]"></a>ACT_FI_afterpush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b85df8]"></a>ACT_FI_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b85dbc]"></a>ACT_FI_flipup()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85d80]"></a>ACT_FI_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b85d44]"></a>ACT_FI_flipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85d08]"></a>ACT_FI_startflipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b85ccc]"></a>ACT_FI_startflipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85c90]"></a>ACT_FI_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b85c54]"></a>def_foot_inner_fsm(fsm*)</STRONG> (ARM, 620 bytes, Stack size 120 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b854d4]"></a>get_foot_outer_input(int*, int)</STRONG> (ARM, 548 bytes, Stack size 24 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_foot_outer_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85498]"></a>ACT_FO_stance_entry()</STRONG> (ARM, 188 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b8545c]"></a>ACT_FO_stance()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FO_stance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b85420]"></a>ACT_FO_prepush_entry()</STRONG> (ARM, 444 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b853e4]"></a>ACT_FO_prepush()</STRONG> (ARM, 356 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b853a8]"></a>ACT_FO_prepush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b8536c]"></a>ACT_FO_afterpush_entry()</STRONG> (ARM, 68 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85330]"></a>ACT_FO_afterpush()</STRONG> (ARM, 84 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b852f4]"></a>ACT_FO_afterpush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b852b8]"></a>ACT_FO_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b8527c]"></a>ACT_FO_flipup()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85240]"></a>ACT_FO_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b85204]"></a>ACT_FO_flipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b851c8]"></a>ACT_FO_startstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b8518c]"></a>ACT_FO_startstance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b85150]"></a>ACT_FO_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b85114]"></a>def_foot_outer_fsm(fsm*)</STRONG> (ARM, 640 bytes, Stack size 120 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b86dac]"></a>copy(fsm*, fsm*)</STRONG> (ARM, 672 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy(fsm*, fsm*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b809d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b86b90]"></a>fsm::fsm(int, int, int)</STRONG> (ARM, 576 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b809d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b84ca0]"></a>fsm::fsm__sub_object(int, int, int)</STRONG> (ARM, 0 bytes, Stack size 24 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84c64]"></a>fsm::fsm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b84c28]"></a>fsm::fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86b54]"></a>fsm::~fsm()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fsm::~fsm() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b80b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b84bec]"></a>fsm::~fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 8 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84bb0]"></a>fsm::state_def(int, int(*)())</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86d70]"></a>fsm::exit_state_def(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b84b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)
<LI><a href="#[2b84b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b84b74]"></a>fsm::state_def(int, int(*)(), int)</STRONG> (ARM, 68 bytes, Stack size 20 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[2b84b38]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)</STRONG> (ARM, 124 bytes, Stack size 28 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[2b86c08]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)())</STRONG> (ARM, 84 bytes, Stack size 4 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fsm::state_def(int, int(*)(), int(*)(), int(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b86bcc]"></a>fsm::trans_def(int, int, int)</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm::trans_def(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b86d34]"></a>fsm::set_sensor_input_function(void(*)(int*, int))</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b86c44]"></a>fsm::set_name(char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b86cf8]"></a>fsm::print_state_transition_matrix()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b84afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b84afc]"></a>fsm::check(int)</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[2b86c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[2b86c80]"></a>fsm::run()</STRONG> (ARM, 1268 bytes, Stack size 416 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b84afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2b871e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
</UL>

<P><STRONG><a name="[2b84ac0]"></a>fsm::get_current_state()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84a84]"></a>fsm::ready_to_exit()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84a48]"></a>fsm::stop()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b86cbc]"></a>fsm::set_state_communication_variable(int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2b84a0c]"></a>fsm::print_transition_insertion_history()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84214]"></a>get_hip_sensor_input(int*, int)</STRONG> (ARM, 804 bytes, Stack size 24 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_hip_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b841d8]"></a>ACT_HI_starthold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b8419c]"></a>ACT_HI_starthold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_starthold() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b84160]"></a>ACT_HI_preswing_entry()</STRONG> (ARM, 68 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_preswing_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b84124]"></a>ACT_HI_preswing()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HI_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b840e8]"></a>ACT_HI_premid_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_HI_premid_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b840ac]"></a>ACT_HI_premid()</STRONG> (ARM, 188 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b84070]"></a>ACT_HI_premid_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b84034]"></a>ACT_HI_aftermid_entry()</STRONG> (ARM, 1128 bytes, Stack size 80 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ACT_HI_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83ff8]"></a>ACT_HI_aftermid()</STRONG> (ARM, 388 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_aftermid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83fbc]"></a>ACT_HO_preswing_entry()</STRONG> (ARM, 64 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HO_preswing_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83f80]"></a>ACT_HO_preswing()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b83f44]"></a>ACT_HO_premid_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_HO_premid_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83f08]"></a>ACT_HO_premid()</STRONG> (ARM, 236 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HO_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83ecc]"></a>ACT_HO_premid_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83e90]"></a>ACT_HO_aftermid_entry()</STRONG> (ARM, 1132 bytes, Stack size 80 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ACT_HO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83e54]"></a>ACT_HO_aftermid()</STRONG> (ARM, 428 bytes, Stack size 40 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b83e18]"></a>ACT_HI_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b83ddc]"></a>ACT_HI_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b83da0]"></a>ACT_HO_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b83d64]"></a>ACT_HO_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b83d28]"></a>ACT_H_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b83cec]"></a>def_hip_fsm(fsm*)</STRONG> (ARM, 896 bytes, Stack size 120 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_hip_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b83170]"></a>get_leg_sensor_input(int*, int)</STRONG> (ARM, 316 bytes, Stack size 24 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_leg_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83134]"></a>ACT_LO_preswing_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_LO_preswing_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b830f8]"></a>ACT_LO_preswing()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b830bc]"></a>ACT_LO_preswing_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b83080]"></a>ACT_LO_premid_entry()</STRONG> (ARM, 360 bytes, Stack size 16 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_LO_premid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83044]"></a>ACT_LO_premid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b83008]"></a>ACT_LO_aftermid_entry()</STRONG> (ARM, 484 bytes, Stack size 16 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_LO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82fcc]"></a>ACT_LO_aftermid()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82f90]"></a>ACT_LO_aftermid_exit()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_LO_aftermid_exit() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82f54]"></a>ACT_LI_preswing_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_LI_preswing_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82f18]"></a>ACT_LI_preswing()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82edc]"></a>ACT_LI_preswing_exit()</STRONG> (ARM, 72 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_LI_preswing_exit() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b82ea0]"></a>ACT_LI_premid_entry()</STRONG> (ARM, 300 bytes, Stack size 16 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b82e64]"></a>ACT_LI_premid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b82e28]"></a>ACT_LI_aftermid_entry()</STRONG> (ARM, 496 bytes, Stack size 16 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b82dec]"></a>ACT_LI_aftermid()</STRONG> (ARM, 76 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b82db0]"></a>ACT_LI_aftermid_exit()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b82d74]"></a>ACT_L_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b82d38]"></a>def_leg_fsm(fsm*)</STRONG> (ARM, 612 bytes, Stack size 120 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_leg_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b826e4]"></a>init_global_comm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1df7e44]"></a>mb_fsm_init</STRONG> (ARM, 344 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b807f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
<LI><a href="#[2b826a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2b82d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2b83cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2b84afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[2b84c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm()
<LI><a href="#[2b85114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2b85c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2b86de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df8204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[1df7e08]"></a>mb_fsm_run</STRONG> (ARM, 76 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b86c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2b81fdc]"></a>get_steering_input(int*, int)</STRONG> (ARM, 248 bytes, Stack size 16 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_steering_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b81fa0]"></a>fmin(float, float)</STRONG> (ARM, 32 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b81f64]"></a>auto_steer(float)</STRONG> (ARM, 176 bytes, Stack size 32 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2b81d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
</UL>

<P><STRONG><a name="[2b81f28]"></a>ACT_S_innerlegfront_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b81eec]"></a>ACT_S_innerlegfront()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b81eb0]"></a>ACT_S_innerlegstance_entry()</STRONG> (ARM, 124 bytes, Stack size 8 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_S_innerlegstance_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b81e74]"></a>ACT_S_innerlegstance()</STRONG> (ARM, 312 bytes, Stack size 16 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_S_innerlegstance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2b81e38]"></a>ACT_S_innerlegback_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b81dfc]"></a>ACT_S_innerlegback()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b81dc0]"></a>ACT_S_innerswingpremid_entry()</STRONG> (ARM, 20 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2b81d84]"></a>ACT_S_innerswingpremid()</STRONG> (ARM, 76 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b81d48]"></a>ACT_S_innerswingaftermid_entry()</STRONG> (ARM, 392 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2b81f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_steer(float)
</UL>

<P><STRONG><a name="[2b81d0c]"></a>ACT_S_innerswingaftermid()</STRONG> (ARM, 76 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1df8420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2b81cd0]"></a>ACT_S_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2b826a8]"></a>def_steering_fsm(fsm*)</STRONG> (ARM, 628 bytes, Stack size 120 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2b86bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2b86c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2b86c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2b86cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2b86cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2b86d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2b86d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2b81a3c]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df24bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anoop_asin
</UL>

<P><STRONG><a name="[2b81a00]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2b819c4]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2b81988]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2b8176c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2b81730]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b87004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2b80e0c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b80dd0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b80d94]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b800b0]"></a>__rt_new_handler_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b807f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
</UL>

<P><STRONG><a name="[2b7fda4]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7d0a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[2b7d338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b807f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2cecc84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2cee37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2b7e4cc]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7a638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[2b7de78]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2b7de3c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf05b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b7de00]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2b7d338]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7c9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[2b7d02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[2b7fda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[2b7d248]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2b7d20c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2b7d11c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2b7d0e0]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2b7d0a4]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7fda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2b7d068]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cef8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2b7d02c]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7cb04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[2b7d338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[2cef8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[2cf008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7b808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[2b7cb04]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7d02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2b7cac8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[2b7c9d8]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7d338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7e6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2cf008c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[2b7a638]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cee37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7e4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[2cf05b4]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1dfa5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2b7de3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7d6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2cf008c]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7c9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7d02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2b7d0a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2cefe70]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2cedb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[2cefdf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7d914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2cefd08]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ceb0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[2ced2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[2cedd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7a638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2cee37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2cee3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[2cef8d0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cecf90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[2ced3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7d02c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2b7d068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2cee37c]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7fda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2cecc84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2ced710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via BLX)
<LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7a638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[2cedd28]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cec84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[2ced3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
<LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via BLX)
</UL>

<P><STRONG><a name="[2cedc38]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2cedbfc]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2ced710]"></a>__rt_eh_globals_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cee37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via BLX)
</UL>

<P><STRONG><a name="[2ced3c8]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cedd28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ced2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[2cef8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2ced2d8]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cec2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[2ced3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2cecf90]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cec3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2cef8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2cecc84]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7fda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cee37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2cecc48]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2cecc0c]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2cec3d8]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ceb94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2cec2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[2cecf90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[2cec2ac]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cec3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2ced2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[2ceb94c]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2cec3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2b80b3c]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7e6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm() (via BLX)
</UL>

<P><STRONG><a name="[2b7e6ac]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7c9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b80b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[2b809d4]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b807f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b86b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int) (via BLX)
<LI><a href="#[2b86dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*) (via BLX)
</UL>

<P><STRONG><a name="[2b807f4]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7fda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2b800b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1df7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init (via BLX)
<LI><a href="#[2b809d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[2cecae0]"></a>_fp_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2cef114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2cecaa4]"></a>__fplib_config_fpu_vfp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2ceca68]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1dfa748]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1dfa748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1dfa70c]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1dfa70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1dfa6d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1dfa6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1dfa694]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1dfa694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1dfa694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[2cee3b8]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cefd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2cefdf8]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2cefe70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
