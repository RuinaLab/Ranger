<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Ext_SDRAM\LPC3250_main_brain.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Ext_SDRAM\LPC3250_main_brain.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Jun 30 16:48:18 2015
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[931568]">Reset_Handler</a>
 <LI><a href="#[931748]">Undef_Handler</a>
 <LI><a href="#[93170c]">SWI_Handler</a>
 <LI><a href="#[9316d0]">PAbt_Handler</a>
 <LI><a href="#[931694]">DAbt_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[931748]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[931748]">Undef_Handler</a><BR>
 <LI><a href="#[93170c]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93170c]">SWI_Handler</a><BR>
 <LI><a href="#[9316d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9316d0]">PAbt_Handler</a><BR>
 <LI><a href="#[931694]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[931694]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[92b118]">error_ulvoid</a>
 <LI><a href="#[931568]">Reset_Handler</a>
 <LI><a href="#[931748]">Undef_Handler</a>
 <LI><a href="#[93170c]">SWI_Handler</a>
 <LI><a href="#[9316d0]">PAbt_Handler</a>
 <LI><a href="#[931694]">DAbt_Handler</a>
 <LI><a href="#[9314f0]">IRQ_Handler</a>
 <LI><a href="#[93152c]">FIQ_Handler</a>
 <LI><a href="#[2cd5ca4]">__main</a>
 <LI><a href="#[92e73c]">main</a>
 <LI><a href="#[92ed90]">mb_io_get_float</a>
 <LI><a href="#[2cdc0b8]">ACTION_UI_calibrate()</a>
 <LI><a href="#[2cdc16c]">ACTION_UI_calibrate_entry()</a>
 <LI><a href="#[2cdc07c]">ACTION_UI_walk_entry()</a>
 <LI><a href="#[2cdc34c]">get_UI_conditions_input(int*, int)</a>
 <LI><a href="#[2cdaf9c]">ACT_FI_stance()</a>
 <LI><a href="#[2cdafd8]">ACT_FI_stance_entry()</a>
 <LI><a href="#[2cdaf24]">ACT_FI_prepush()</a>
 <LI><a href="#[2cdaf60]">ACT_FI_prepush_entry()</a>
 <LI><a href="#[2cda45c]">ACT_FO_stance()</a>
 <LI><a href="#[2cda4d4]">get_foot_outer_input(int*, int)</a>
 <LI><a href="#[2cd919c]">ACT_HI_starthold()</a>
 <LI><a href="#[2cd91d8]">ACT_HI_starthold_entry()</a>
 <LI><a href="#[2cd9124]">ACT_HI_preswing()</a>
 <LI><a href="#[2cd9160]">ACT_HI_preswing_entry()</a>
 <LI><a href="#[2cd90ac]">ACT_HI_premid()</a>
 <LI><a href="#[2cd90e8]">ACT_HI_premid_entry()</a>
 <LI><a href="#[2cd8ff8]">ACT_HI_aftermid()</a>
 <LI><a href="#[2cd9034]">ACT_HI_aftermid_entry()</a>
 <LI><a href="#[2cd8fbc]">ACT_HO_preswing_entry()</a>
 <LI><a href="#[2cd8ecc]">ACT_HO_premid_exit()</a>
 <LI><a href="#[2cd8f08]">ACT_HO_premid()</a>
 <LI><a href="#[2cd8f44]">ACT_HO_premid_entry()</a>
 <LI><a href="#[2cd8e90]">ACT_HO_aftermid_entry()</a>
 <LI><a href="#[2cd9214]">get_hip_sensor_input(int*, int)</a>
 <LI><a href="#[2cd7edc]">ACT_LI_preswing_exit()</a>
 <LI><a href="#[2cd7f18]">ACT_LI_preswing()</a>
 <LI><a href="#[2cd7f54]">ACT_LI_preswing_entry()</a>
 <LI><a href="#[2cd80f8]">ACT_LO_preswing()</a>
 <LI><a href="#[2cd8134]">ACT_LO_preswing_entry()</a>
 <LI><a href="#[2cd8044]">ACT_LO_premid()</a>
 <LI><a href="#[2cd8080]">ACT_LO_premid_entry()</a>
 <LI><a href="#[2cd7f90]">ACT_LO_aftermid_exit()</a>
 <LI><a href="#[2cd7fcc]">ACT_LO_aftermid()</a>
 <LI><a href="#[2cd8008]">ACT_LO_aftermid_entry()</a>
 <LI><a href="#[2cd8170]">get_leg_sensor_input(int*, int)</a>
 <LI><a href="#[2cd6eec]">ACT_S_innerlegfront()</a>
 <LI><a href="#[2cd6f28]">ACT_S_innerlegfront_entry()</a>
 <LI><a href="#[2cd6e74]">ACT_S_innerlegstance()</a>
 <LI><a href="#[2cd6eb0]">ACT_S_innerlegstance_entry()</a>
 <LI><a href="#[2cd6fdc]">get_steering_input(int*, int)</a>
 <LI><a href="#[2e413b8]">__default_terminate_handler()</a>
 <LI><a href="#[2e40c38]">__I$use$semihosting</a>
 <LI><a href="#[2cd34cc]">__default_new_handler()</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92f060]">mb_bt_pop_receive_packets</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92f18c]">a9_bt_dma_receive</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92f27c]">mb_create_display_data_lists</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92efe8]">mb_distribute_error_frames</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92eafc]">mb_test_ui_board1</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92ef34]">mb_error_update</a>
 <LI><a href="#[92eb38]">mb_task_heartbeat</a>
 <LI><a href="#[92f150]">a9_dn_ssp_parse</a>
 <LI><a href="#[92eef8]">mb_estimator_execution_time_start</a>
 <LI><a href="#[92ee80]">mb_estimator_update</a>
 <LI><a href="#[92eebc]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[92f114]">a9_dn_ssp_send_data</a>
 <LI><a href="#[92f0d8]">a9_dn_update_leds</a>
 <LI><a href="#[92ee08]">mb_fsm_run</a>
 <LI><a href="#[92f240]">mb_send_data</a>
 <LI><a href="#[92f45c]">mb_update_execution_time</a>
 <LI><a href="#[92b118]">error_ulvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[931568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[2cd5ca4]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2cd568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2e3d380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e3d380]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2cd5ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e3d344]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cd568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e3d308]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e3d4ac]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2e3d470]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[2e3d164]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e42114]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[2e3fae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd29c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[2cd0808]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd202c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2ccff20]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[2ccff98]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[2cd0358]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2cd01f0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2ccfe30]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2ccfea8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2cd0268]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2cd0178]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2cd0754]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[2cd05b0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[2cd0538]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[2cd04c0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2cd0448]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2cd03d0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2cd0664]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2ccfdf4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[2cd02e0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2cd0100]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2cd06dc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[2e3e0dc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e3f888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
<LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2e3ed84]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2e3eba4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2e3eb68]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2e3ecd0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2e3ee38]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2e3ec58]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[2cd568c]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2cd5ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2e3d344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2cd2a7c]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2cd26f8]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e435b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2cd29c8]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2e42114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2cd2a04]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2cd2914]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[2e42e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2cd2950]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2e40b48]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e42e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[2e3f888]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2e3e0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[2e3f8c4]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2e3f84c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e40d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9315a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc32x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e435b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e432e4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[92f9c0]"></a>mb_setup_hardware</STRONG> (ARM, 516 bytes, Stack size 0 bytes, mb_hardware_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92f498]"></a>mb_get_timestamp</STRONG> (ARM, 16 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[92f45c]"></a>mb_update_execution_time</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_update_execution_time &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92f024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f420]"></a>get_io_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2cd6d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid()
<LI><a href="#[2cd6d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2cd6d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingpremid()
<LI><a href="#[2cd6e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[2cd6eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance_entry()
<LI><a href="#[2cd6f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_steer(float)
<LI><a href="#[2cd6fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steering_input(int*, int)
<LI><a href="#[2cd7e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_entry()
<LI><a href="#[2cd7ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_premid_entry()
<LI><a href="#[2cd7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_preswing_entry()
<LI><a href="#[2cd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_entry()
<LI><a href="#[2cd8080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_premid_entry()
<LI><a href="#[2cd8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_preswing_entry()
<LI><a href="#[2cd8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_leg_sensor_input(int*, int)
<LI><a href="#[2cd8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[2cd8ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[2cd8e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[2cd8e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[2cd8f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[2cd8f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[2cd8fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing_entry()
<LI><a href="#[2cd8ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[2cd9034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[2cd90ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[2cd90e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[2cd9160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing_entry()
<LI><a href="#[2cd919c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[2cd9214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hip_sensor_input(int*, int)
<LI><a href="#[2cda18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[2cda204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[2cda27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[2cda36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_entry()
<LI><a href="#[2cda3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[2cda420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[2cda45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[2cda498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[2cda4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_outer_input(int*, int)
<LI><a href="#[2cdaccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[2cdad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[2cdadbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[2cdaeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush_entry()
<LI><a href="#[2cdaf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[2cdaf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[2cdaf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[2cdafd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[2cdb014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_inner_input(int*, int)
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2cdc25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2cdc34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[92f3e4]"></a>set_io_float</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2cd6cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_stop()
<LI><a href="#[2cd6d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid()
<LI><a href="#[2cd6d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2cd6d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingpremid()
<LI><a href="#[2cd6e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[2cd7db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_exit()
<LI><a href="#[2cd7e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_aftermid_entry()
<LI><a href="#[2cd7ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_premid_entry()
<LI><a href="#[2cd7edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LI_preswing_exit()
<LI><a href="#[2cd7f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_exit()
<LI><a href="#[2cd8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_aftermid_entry()
<LI><a href="#[2cd8080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_premid_entry()
<LI><a href="#[2cd80bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_LO_preswing_exit()
<LI><a href="#[2cd8d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_H_stop()
<LI><a href="#[2cd8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[2cd8ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[2cd8e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[2cd8e90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[2cd8f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[2cd8f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing()
<LI><a href="#[2cd8fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing_entry()
<LI><a href="#[2cd8ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[2cd9034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[2cd90ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[2cd9124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing()
<LI><a href="#[2cd9160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing_entry()
<LI><a href="#[2cd919c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[2cda150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stop()
<LI><a href="#[2cda18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[2cda204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[2cda27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[2cda2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_exit()
<LI><a href="#[2cda330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush()
<LI><a href="#[2cda36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_entry()
<LI><a href="#[2cda3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_exit()
<LI><a href="#[2cda3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[2cda420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[2cda45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[2cda498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[2cdac90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stop()
<LI><a href="#[2cdaccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[2cdad44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[2cdadbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[2cdae34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush_exit()
<LI><a href="#[2cdae70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush()
<LI><a href="#[2cdaee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_exit()
<LI><a href="#[2cdaf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[2cdaf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[2cdaf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[2cdafd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[2cdbf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[2cdbfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
<LI><a href="#[2cdc07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2cdc16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2cdc220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
<LI><a href="#[2cdc25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2cdc298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[92f3a8]"></a>get_io_ul</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[92ecdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdc388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>

<P><STRONG><a name="[92f36c]"></a>set_io_ul</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ebec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd6d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[92f330]"></a>mark_as_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92ec64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
</UL>

<P><STRONG><a name="[92f2f4]"></a>data_was_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92edcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>

<P><STRONG><a name="[92f2b8]"></a>mb_read_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[92efac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[92f27c]"></a>mb_create_display_data_lists</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_create_display_data_lists &rArr; mb_bt_create_data_lists
</UL>
<BR>[Calls]<UL><LI><a href="#[92f09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f240]"></a>mb_send_data</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mb_send_data &rArr; a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[92f1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f204]"></a>mb_setup_software</STRONG> (ARM, 712 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_setup_software &rArr; mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92eb74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_heartbeat_period_ms
<LI><a href="#[92ebb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_init
<LI><a href="#[92eca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_init
<LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[92ef70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_init
<LI><a href="#[92f27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[92e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9314f0]"></a>IRQ_Handler</STRONG> (ARM, 72 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_Handler &rArr; a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92e64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
<LI><a href="#[92e688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[92e6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[93152c]"></a>FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIQ_Handler &rArr; a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92e700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[92e73c]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; mb_setup_software &rArr; mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92e610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_run
<LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
<LI><a href="#[92f9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_hardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[92eafc]"></a>mb_test_ui_board1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92e070]"></a>labview_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[92e034]"></a>lcd_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[92dff8]"></a>lcd_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[92dfbc]"></a>labview_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[92efe8]"></a>mb_distribute_error_frames</STRONG> (ARM, 656 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_distribute_error_frames &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92df80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[92dfbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_pop
<LI><a href="#[92dff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_pop
<LI><a href="#[92e034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_push
<LI><a href="#[92e070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_push
<LI><a href="#[92ec64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[92edcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[92efac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92ebb0]"></a>mb_schedule_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[92d9e0]"></a>mb_schedule_tick</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92beb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_clock_tick
<LI><a href="#[92e64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
</UL>

<P><STRONG><a name="[92e610]"></a>mb_schedule_run</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mb_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_schedule_run
</UL>
<BR>[Called By]<UL><LI><a href="#[92e73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92d2d8]"></a>a9_ssp_synchronize_arm7</STRONG> (ARM, 356 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[92d29c]"></a>a9_dn_ssp_init_tx_list</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[92d260]"></a>a9_dn_red_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92e700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
<LI><a href="#[92f060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[92f114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[92f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[92f18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[92d224]"></a>a9_dn_green_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[92f0d8]"></a>a9_dn_update_leds</STRONG> (ARM, 132 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f114]"></a>a9_dn_ssp_send_data</STRONG> (ARM, 912 bytes, Stack size 48 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a9_dn_ssp_send_data &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92d260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[92ec64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[92edcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f150]"></a>a9_dn_ssp_parse</STRONG> (ARM, 584 bytes, Stack size 24 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_dn_ssp_parse &rArr; mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92d224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_green_led_blink
<LI><a href="#[92d260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[92df80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92e700]"></a>a9_dn_ssel_dma_isr</STRONG> (ARM, 680 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred_fiq
<LI><a href="#[92d260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[93152c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[92eb74]"></a>mb_set_heartbeat_period_ms</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[92ccfc]"></a>mb_hb_toggle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92eb38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_task_heartbeat
</UL>

<P><STRONG><a name="[92eb38]"></a>mb_task_heartbeat</STRONG> (ARM, 92 bytes, Stack size 4 bytes, mb_heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_task_heartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[92ccfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hb_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f09c]"></a>mb_bt_create_data_lists</STRONG> (ARM, 180 bytes, Stack size 40 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[92f27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>

<P><STRONG><a name="[92c39c]"></a>a9_bt_push_io_data_point</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[92f1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>

<P><STRONG><a name="[92f1c8]"></a>a9_bt_data_sender</STRONG> (ARM, 976 bytes, Stack size 48 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[92c39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_push_io_data_point
<LI><a href="#[92ec64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[92edcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[92f240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_data
</UL>

<P><STRONG><a name="[92c360]"></a>a9_bt_start_ch3_dma_transfer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, mb_bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92e688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[92e6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>

<P><STRONG><a name="[92e6c4]"></a>a9_gpdma_isr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_gpdma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92c360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9314f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[92e688]"></a>a9_software_int_isr</STRONG> (ARM, 40 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_software_int_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92c360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9314f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[92f18c]"></a>a9_bt_dma_receive</STRONG> (ARM, 812 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a9_bt_dma_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92d260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92f060]"></a>mb_bt_pop_receive_packets</STRONG> (ARM, 820 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_bt_pop_receive_packets &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92d260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[92ebec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92beb0]"></a>a9_clock_tick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, a9_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92d9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>

<P><STRONG><a name="[92f024]"></a>mb_clock_get_execution_time</STRONG> (ARM, 36 bytes, Stack size 0 bytes, a9_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92eebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[92eef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_start
<LI><a href="#[92f45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[92e64c]"></a>a9_timer0_isr</STRONG> (ARM, 56 bytes, Stack size 8 bytes, a9_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[92d9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[9314f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[92ed54]"></a>mb_io_get_pointer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[92f114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[92f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[92f1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[92f2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[92ec64]"></a>mb_io_mark_as_read</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[92f114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[92f1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[92f330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
</UL>

<P><STRONG><a name="[92ba3c]"></a>mb_io_mark_as_unread</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[92df80]"></a>mb_io_mark_as_unread_by_all</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[92f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[92edcc]"></a>mb_io_data_was_read</STRONG> (ARM, 76 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[92f114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[92f1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[92f2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
</UL>

<P><STRONG><a name="[92ed90]"></a>mb_io_get_float</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[929570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[9295ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[9295e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[929624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[92ecdc]"></a>mb_io_get_ul</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[92f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>

<P><STRONG><a name="[92ba00]"></a>mb_io_get_sl</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[92ed18]"></a>mb_io_get_time</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[929534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[9295ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[9295e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[929624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[92b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[92ebec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92f498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
</UL>

<P><STRONG><a name="[92ec28]"></a>mb_io_set_float</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[929534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[929570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[9295ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[9295e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[929624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[92eebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[92ebec]"></a>mb_io_set_ul</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[92f060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>

<P><STRONG><a name="[92b9c4]"></a>mb_io_set_sl</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[92b988]"></a>mb_io_set_time</STRONG> (ARM, 72 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_set_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92d1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[9295ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[9295e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[929624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
</UL>

<P><STRONG><a name="[92eca0]"></a>mb_io_init</STRONG> (ARM, 1920 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[92b1cc]"></a>mb_error_pop</STRONG> (ARM, 168 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92efac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[92efac]"></a>mb_error_get_frame</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_error_get_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[92b1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[92efe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[92f2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[92ef70]"></a>mb_error_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[92d1e8]"></a>mb_error_occurred</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[92b9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[92ba00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_sl
<LI><a href="#[92ba3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread
<LI><a href="#[92df80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[92ebec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ec64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[92ecdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[92ed54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
<LI><a href="#[92edcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[92f060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[92f114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[92f150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[92f18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[92b190]"></a>mb_error_occurred_irq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)

<P><STRONG><a name="[92d1ac]"></a>mb_error_occurred_fiq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92e700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>

<P><STRONG><a name="[92b154]"></a>mb_error_push</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_error_push
</UL>
<BR>[Called By]<UL><LI><a href="#[92ef34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_update
</UL>

<P><STRONG><a name="[92ef34]"></a>mb_error_update</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_error_update &rArr; mb_error_push
</UL>
<BR>[Calls]<UL><LI><a href="#[92b154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92b118]"></a>error_ulvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_error.o(.data)
</UL>
<P><STRONG><a name="[929624]"></a>mb_imu_rate_filter</STRONG> (ARM, 556 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_imu_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[9295e8]"></a>mb_hip_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[9295ac]"></a>mb_hip_motor_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_motor_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92b988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[929570]"></a>mb_leg_state_machine_new</STRONG> (ARM, 1816 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_leg_state_machine_new &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[929534]"></a>mb_time_since_last_HS_and_step_counter</STRONG> (ARM, 176 bytes, Stack size 16 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_time_since_last_HS_and_step_counter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[9294f8]"></a>greg_cos</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[9294bc]"></a>anoop_asin</STRONG> (ARM, 148 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd6a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[929480]"></a>greg_sqrt</STRONG> (ARM, 240 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[929444]"></a>greg_atan</STRONG> (ARM, 252 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[929408]"></a>greg_sin</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
</UL>

<P><STRONG><a name="[9293cc]"></a>mb_abs_leg_and_ankle_angles_and_swingfootheight</STRONG> (ARM, 1720 bytes, Stack size 160 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mb_abs_leg_and_ankle_angles_and_swingfootheight &rArr; anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[929408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[929444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_atan
<LI><a href="#[929480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sqrt
<LI><a href="#[9294bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anoop_asin
<LI><a href="#[9294f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[929390]"></a>mb_model_based_estimator</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_estimator.o(.text), UNUSED)

<P><STRONG><a name="[92ee80]"></a>mb_estimator_update</STRONG> (ARM, 320 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mb_estimator_update &rArr; mb_abs_leg_and_ankle_angles_and_swingfootheight &rArr; anoop_asin &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[9293cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_abs_leg_and_ankle_angles_and_swingfootheight
<LI><a href="#[929534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS_and_step_counter
<LI><a href="#[929570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[9295ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[9295e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[929624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92ed90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92eef8]"></a>mb_estimator_execution_time_start</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_estimator_execution_time_start
</UL>
<BR>[Calls]<UL><LI><a href="#[92f024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[92eebc]"></a>mb_estimator_execution_time_stop</STRONG> (ARM, 44 bytes, Stack size 16 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_estimator_execution_time_stop &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92ec28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[92f024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2cdc388]"></a>detect_UI_button_input(int)</STRONG> (ARM, 52 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdc34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[2cdc34c]"></a>get_UI_conditions_input(int*, int)</STRONG> (ARM, 208 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_UI_conditions_input(int*, int) &rArr; detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cdc388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdc310]"></a>clear_UI_LED()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LED() &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo_entry()
<LI><a href="#[2cdbf8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[2cdc07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2cdc16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
<LI><a href="#[2cdc298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[2cdc2d4]"></a>set_UI_LED(int, char)</STRONG> (ARM, 224 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2cdc040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2cdc298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[2cdc298]"></a>cam_emergency()</STRONG> (ARM, 252 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2cdc2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2cdc25c]"></a>get_nav_signal()</STRONG> (ARM, 508 bytes, Stack size 32 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_nav_signal() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbe9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[2cdc220]"></a>motors_off()</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2cdbfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
</UL>

<P><STRONG><a name="[2cdc1e4]"></a>all_fsm_run()</STRONG> (ARM, 348 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cdbc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbe9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2cdbfc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2cdc1a8]"></a>clear_UI_LCD(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc07c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[2cdc16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate_entry()
</UL>

<P><STRONG><a name="[2cdc16c]"></a>ACTION_UI_calibrate_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACTION_UI_calibrate_entry() &rArr; clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdc130]"></a>set_UI_LCD(char*, int)</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LCD(char*, int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[2cdc0f4]"></a>int2ascii(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ui_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[2cdc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[2cdc0b8]"></a>ACTION_UI_calibrate()</STRONG> (ARM, 940 bytes, Stack size 32 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ACTION_UI_calibrate() &rArr; get_nav_signal() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cdc0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[2cdc130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2cdc2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdc07c]"></a>ACTION_UI_walk_entry()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACTION_UI_walk_entry() &rArr; clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdc040]"></a>update_UI_LED()</STRONG> (ARM, 632 bytes, Stack size 24 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cdc2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbe9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_nogo()
<LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2cdc004]"></a>ACTION_UI_walk()</STRONG> (ARM, 2284 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cd6730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[2cdc040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2cdc0f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[2cdc130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2cdc25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
<LI><a href="#[2cdc298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_emergency()
</UL>

<P><STRONG><a name="[2cdbfc8]"></a>ACTION_UI_walk_exit()</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2cdc220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>

<P><STRONG><a name="[2cdbf8c]"></a>ACTION_UI_standby_entry()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[2cdbf50]"></a>ACTION_UI_standby()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cdc130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[2cdc1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[2cdc220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
<LI><a href="#[2cdc2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
</UL>

<P><STRONG><a name="[2cdbf14]"></a>ACTION_UI_standby_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbed8]"></a>ACTION_UI_nogo_entry()</STRONG> (ARM, 16 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cdc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
</UL>

<P><STRONG><a name="[2cdbe9c]"></a>ACTION_UI_nogo()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cdc040]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_UI_LED()
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[2cdc25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nav_signal()
</UL>

<P><STRONG><a name="[2cdbe60]"></a>ACTION_UI_nogo_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbe24]"></a>ACTION_UI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbde8]"></a>def_UI_fsm(fsm*)</STRONG> (ARM, 596 bytes, Stack size 120 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_UI_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cdb014]"></a>get_foot_inner_input(int*, int)</STRONG> (ARM, 544 bytes, Stack size 24 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cdafd8]"></a>ACT_FI_stance_entry()</STRONG> (ARM, 192 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_stance_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdaf9c]"></a>ACT_FI_stance()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_stance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdaf60]"></a>ACT_FI_prepush_entry()</STRONG> (ARM, 444 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_FI_prepush_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdaf24]"></a>ACT_FI_prepush()</STRONG> (ARM, 360 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FI_prepush() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cdaee8]"></a>ACT_FI_prepush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cdaeac]"></a>ACT_FI_afterpush_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cdae70]"></a>ACT_FI_afterpush()</STRONG> (ARM, 84 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cdae34]"></a>ACT_FI_afterpush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cdadf8]"></a>ACT_FI_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdadbc]"></a>ACT_FI_flipup()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cdad80]"></a>ACT_FI_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdad44]"></a>ACT_FI_flipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cdad08]"></a>ACT_FI_startflipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdaccc]"></a>ACT_FI_startflipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cdac90]"></a>ACT_FI_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cdac54]"></a>def_foot_inner_fsm(fsm*)</STRONG> (ARM, 620 bytes, Stack size 120 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cda4d4]"></a>get_foot_outer_input(int*, int)</STRONG> (ARM, 548 bytes, Stack size 24 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_foot_outer_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cda498]"></a>ACT_FO_stance_entry()</STRONG> (ARM, 188 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda45c]"></a>ACT_FO_stance()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_FO_stance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cda420]"></a>ACT_FO_prepush_entry()</STRONG> (ARM, 444 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda3e4]"></a>ACT_FO_prepush()</STRONG> (ARM, 356 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda3a8]"></a>ACT_FO_prepush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cda36c]"></a>ACT_FO_afterpush_entry()</STRONG> (ARM, 68 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda330]"></a>ACT_FO_afterpush()</STRONG> (ARM, 84 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cda2f4]"></a>ACT_FO_afterpush_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cda2b8]"></a>ACT_FO_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cda27c]"></a>ACT_FO_flipup()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda240]"></a>ACT_FO_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cda204]"></a>ACT_FO_flipdown()</STRONG> (ARM, 128 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda1c8]"></a>ACT_FO_startstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cda18c]"></a>ACT_FO_startstance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cda150]"></a>ACT_FO_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cda114]"></a>def_foot_outer_fsm(fsm*)</STRONG> (ARM, 640 bytes, Stack size 120 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cdbdac]"></a>copy(fsm*, fsm*)</STRONG> (ARM, 672 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy(fsm*, fsm*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd59d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cdbb90]"></a>fsm::fsm(int, int, int)</STRONG> (ARM, 576 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd59d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cd9ca0]"></a>fsm::fsm__sub_object(int, int, int)</STRONG> (ARM, 0 bytes, Stack size 24 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9c64]"></a>fsm::fsm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cd9c28]"></a>fsm::fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbb54]"></a>fsm::~fsm()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fsm::~fsm() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd5b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cd9bec]"></a>fsm::~fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 8 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9bb0]"></a>fsm::state_def(int, int(*)())</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbd70]"></a>fsm::exit_state_def(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cd9b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)
<LI><a href="#[2cd9b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cd9b74]"></a>fsm::state_def(int, int(*)(), int)</STRONG> (ARM, 68 bytes, Stack size 20 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[2cd9b38]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)</STRONG> (ARM, 124 bytes, Stack size 28 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[2cdbc08]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)())</STRONG> (ARM, 84 bytes, Stack size 4 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fsm::state_def(int, int(*)(), int(*)(), int(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cdbbcc]"></a>fsm::trans_def(int, int, int)</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm::trans_def(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cdbd34]"></a>fsm::set_sensor_input_function(void(*)(int*, int))</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cdbc44]"></a>fsm::set_name(char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cdbcf8]"></a>fsm::print_state_transition_matrix()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cd9afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cd9afc]"></a>fsm::check(int)</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[2cdbc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[2cdbc80]"></a>fsm::run()</STRONG> (ARM, 1268 bytes, Stack size 416 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd9afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[2cdc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
</UL>

<P><STRONG><a name="[2cd9ac0]"></a>fsm::get_current_state()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9a84]"></a>fsm::ready_to_exit()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9a48]"></a>fsm::stop()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cdbcbc]"></a>fsm::set_state_communication_variable(int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[2cd9a0c]"></a>fsm::print_transition_insertion_history()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9214]"></a>get_hip_sensor_input(int*, int)</STRONG> (ARM, 804 bytes, Stack size 24 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_hip_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd91d8]"></a>ACT_HI_starthold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd919c]"></a>ACT_HI_starthold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_starthold() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd9160]"></a>ACT_HI_preswing_entry()</STRONG> (ARM, 68 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_preswing_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd9124]"></a>ACT_HI_preswing()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HI_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd90e8]"></a>ACT_HI_premid_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_HI_premid_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd90ac]"></a>ACT_HI_premid()</STRONG> (ARM, 188 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd9070]"></a>ACT_HI_premid_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd9034]"></a>ACT_HI_aftermid_entry()</STRONG> (ARM, 1128 bytes, Stack size 80 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ACT_HI_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8ff8]"></a>ACT_HI_aftermid()</STRONG> (ARM, 388 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_aftermid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8fbc]"></a>ACT_HO_preswing_entry()</STRONG> (ARM, 64 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HO_preswing_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8f80]"></a>ACT_HO_preswing()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cd8f44]"></a>ACT_HO_premid_entry()</STRONG> (ARM, 52 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_HO_premid_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8f08]"></a>ACT_HO_premid()</STRONG> (ARM, 236 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HO_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8ecc]"></a>ACT_HO_premid_exit()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8e90]"></a>ACT_HO_aftermid_entry()</STRONG> (ARM, 1132 bytes, Stack size 80 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ACT_HO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8e54]"></a>ACT_HO_aftermid()</STRONG> (ARM, 428 bytes, Stack size 40 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd8e18]"></a>ACT_HI_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd8ddc]"></a>ACT_HI_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd8da0]"></a>ACT_HO_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd8d64]"></a>ACT_HO_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd8d28]"></a>ACT_H_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cd8cec]"></a>def_hip_fsm(fsm*)</STRONG> (ARM, 896 bytes, Stack size 120 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_hip_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cd8170]"></a>get_leg_sensor_input(int*, int)</STRONG> (ARM, 316 bytes, Stack size 24 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_leg_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8134]"></a>ACT_LO_preswing_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_LO_preswing_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd80f8]"></a>ACT_LO_preswing()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd80bc]"></a>ACT_LO_preswing_exit()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cd8080]"></a>ACT_LO_premid_entry()</STRONG> (ARM, 360 bytes, Stack size 16 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_LO_premid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8044]"></a>ACT_LO_premid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd8008]"></a>ACT_LO_aftermid_entry()</STRONG> (ARM, 484 bytes, Stack size 16 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_LO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7fcc]"></a>ACT_LO_aftermid()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7f90]"></a>ACT_LO_aftermid_exit()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_LO_aftermid_exit() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7f54]"></a>ACT_LI_preswing_entry()</STRONG> (ARM, 44 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_LI_preswing_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7f18]"></a>ACT_LI_preswing()</STRONG> (ARM, 28 bytes, Stack size 0 bytes, leg_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7edc]"></a>ACT_LI_preswing_exit()</STRONG> (ARM, 72 bytes, Stack size 8 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_LI_preswing_exit() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leg_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd7ea0]"></a>ACT_LI_premid_entry()</STRONG> (ARM, 300 bytes, Stack size 16 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd7e64]"></a>ACT_LI_premid()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd7e28]"></a>ACT_LI_aftermid_entry()</STRONG> (ARM, 496 bytes, Stack size 16 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd7dec]"></a>ACT_LI_aftermid()</STRONG> (ARM, 76 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd7db0]"></a>ACT_LI_aftermid_exit()</STRONG> (ARM, 40 bytes, Stack size 8 bytes, leg_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cd7d74]"></a>ACT_L_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, leg_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd7d38]"></a>def_leg_fsm(fsm*)</STRONG> (ARM, 612 bytes, Stack size 120 bytes, leg_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_leg_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cd76e4]"></a>init_global_comm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_fsm.o(.text), UNUSED)

<P><STRONG><a name="[92ee44]"></a>mb_fsm_init</STRONG> (ARM, 344 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mb_fsm_init &rArr; def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd57f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
<LI><a href="#[2cd76a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[2cd7d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_leg_fsm(fsm*)
<LI><a href="#[2cd8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[2cd9afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[2cd9c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm()
<LI><a href="#[2cda114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[2cdac54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[2cdbde8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92f204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[92ee08]"></a>mb_fsm_run</STRONG> (ARM, 76 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cdbc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2cd6fdc]"></a>get_steering_input(int*, int)</STRONG> (ARM, 248 bytes, Stack size 16 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_steering_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd6fa0]"></a>fmin(float, float)</STRONG> (ARM, 32 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd6f64]"></a>auto_steer(float)</STRONG> (ARM, 176 bytes, Stack size 32 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd6d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerswingaftermid_entry()
</UL>

<P><STRONG><a name="[2cd6f28]"></a>ACT_S_innerlegfront_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd6eec]"></a>ACT_S_innerlegfront()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd6eb0]"></a>ACT_S_innerlegstance_entry()</STRONG> (ARM, 124 bytes, Stack size 8 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACT_S_innerlegstance_entry() &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd6e74]"></a>ACT_S_innerlegstance()</STRONG> (ARM, 312 bytes, Stack size 16 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_S_innerlegstance() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[2cd6e38]"></a>ACT_S_innerlegback_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd6dfc]"></a>ACT_S_innerlegback()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd6dc0]"></a>ACT_S_innerswingpremid_entry()</STRONG> (ARM, 20 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[2cd6d84]"></a>ACT_S_innerswingpremid()</STRONG> (ARM, 76 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd6d48]"></a>ACT_S_innerswingaftermid_entry()</STRONG> (ARM, 392 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[2cd6f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_steer(float)
</UL>

<P><STRONG><a name="[2cd6d0c]"></a>ACT_S_innerswingaftermid()</STRONG> (ARM, 76 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[92f420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[2cd6cd0]"></a>ACT_S_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92f3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[2cd76a8]"></a>def_steering_fsm(fsm*)</STRONG> (ARM, 628 bytes, Stack size 120 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[2cdbbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[2cdbc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[2cdbc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[2cdbcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[2cdbcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[2cdbd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[2cdbd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[2cd6a3c]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9294bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anoop_asin
</UL>

<P><STRONG><a name="[2cd6a00]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2cd69c4]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2cd6988]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2cd676c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2cd6730]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cdc004]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[2cd5e0c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2cd5dd0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2cd5d94]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2cd50b0]"></a>__rt_new_handler_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd57f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
</UL>

<P><STRONG><a name="[2cd4da4]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd20a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[2cd2338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd57f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2e3fc84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2e4137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2cd34cc]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ccf638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[2cd2e78]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2cd2e3c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e435b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2cd2e00]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2cd2338]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd19d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[2cd202c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[2cd4da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[2cd2248]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2cd220c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2cd211c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2cd20e0]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2cd20a4]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd4da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2cd2068]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e428d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2cd202c]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd1b04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[2cd2338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[2e428d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[2e4308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd0808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[2cd1b04]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cd202c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2cd1ac8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[2cd19d8]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd2338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2e4308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[2ccf638]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd34cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[2e435b4]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9315a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2cd2e3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd26f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e4308c]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd19d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd202c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2cd20a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2e42e70]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e40b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[2e42df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd2914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e42d08]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3e0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[2e402d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[2e40d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ccf638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2e4137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2e413b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[2e428d0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3ff90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[2e403c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd202c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2cd2068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2e4137c]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd4da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2e3fc84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[2e40710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via BLX)
<LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2ccf638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[2e40d28]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e3f84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[2e403c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
<LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via BLX)
</UL>

<P><STRONG><a name="[2e40c38]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[2e40bfc]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e40710]"></a>__rt_eh_globals_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e4137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via BLX)
</UL>

<P><STRONG><a name="[2e403c8]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e40d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e402d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[2e428d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2e402d8]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3f2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[2e403c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2e3ff90]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3f3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2e428d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2e3fc84]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd4da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4137c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2e3fc48]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2e3fc0c]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2e3f3d8]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3e94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3f2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[2e3ff90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[2e3f2ac]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3f3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2e402d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[2e3e94c]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3f3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2cd5b3c]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm() (via BLX)
</UL>

<P><STRONG><a name="[2cd36ac]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd19d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd5b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[2cd59d4]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd57f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cdbb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int) (via BLX)
<LI><a href="#[2cdbdac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*) (via BLX)
</UL>

<P><STRONG><a name="[2cd57f4]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd4da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2cd50b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[92ee44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init (via BLX)
<LI><a href="#[2cd59d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[2e3fae0]"></a>_fp_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[2e42114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[2e3faa4]"></a>__fplib_config_fpu_vfp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2e3fa68]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[931748]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[931748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[931748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[93170c]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[93170c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[93170c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[9316d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9316d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9316d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[931694]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[931694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[931694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[2e413b8]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2e42d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2e42df8]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e42e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
