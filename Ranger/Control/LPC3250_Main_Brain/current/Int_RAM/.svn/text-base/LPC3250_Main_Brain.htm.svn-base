<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Int_RAM\LPC3250_Main_Brain.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Int_RAM\LPC3250_Main_Brain.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sat Dec 11 21:35:29 2010
<BR><P>
<H3>Maximum Stack Usage =        496 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ACTION_UI_walk() &rArr; all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b6b568]">Reset_Handler</a>
 <LI><a href="#[b6b748]">Undef_Handler</a>
 <LI><a href="#[b6b70c]">SWI_Handler</a>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>
 <LI><a href="#[b6b694]">DAbt_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b6b748]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b748]">Undef_Handler</a><BR>
 <LI><a href="#[b6b70c]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b70c]">SWI_Handler</a><BR>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b6d0]">PAbt_Handler</a><BR>
 <LI><a href="#[b6b694]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b694]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b65190]">error_ulvoid</a>
 <LI><a href="#[b6b568]">Reset_Handler</a>
 <LI><a href="#[b6b748]">Undef_Handler</a>
 <LI><a href="#[b6b70c]">SWI_Handler</a>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>
 <LI><a href="#[b6b694]">DAbt_Handler</a>
 <LI><a href="#[b6b4f0]">IRQ_Handler</a>
 <LI><a href="#[b6b52c]">FIQ_Handler</a>
 <LI><a href="#[144f720]">__main</a>
 <LI><a href="#[b687b4]">main</a>
 <LI><a href="#[b68e08]">mb_io_get_float</a>
 <LI><a href="#[14547fc]">ACTION_UI_calibrate()</a>
 <LI><a href="#[1454748]">ACTION_UI_walk()</a>
 <LI><a href="#[14549dc]">get_UI_conditions_input(int*, int)</a>
 <LI><a href="#[1453aa0]">ACT_FI_stance_entry()</a>
 <LI><a href="#[1453b18]">get_foot_inner_input(int*, int)</a>
 <LI><a href="#[14531f4]">ACT_FO_stance()</a>
 <LI><a href="#[1453230]">ACT_FO_stance_entry()</a>
 <LI><a href="#[1451c64]">ACT_HI_starthold()</a>
 <LI><a href="#[1451ca0]">ACT_HI_starthold_entry()</a>
 <LI><a href="#[1451c28]">ACT_HI_preswing()</a>
 <LI><a href="#[1451bb0]">ACT_HI_premid()</a>
 <LI><a href="#[1451bec]">ACT_HI_premid_entry()</a>
 <LI><a href="#[1451b38]">ACT_HI_aftermid()</a>
 <LI><a href="#[1451b74]">ACT_HI_aftermid_entry()</a>
 <LI><a href="#[1451afc]">ACT_HO_preswing()</a>
 <LI><a href="#[1451a84]">ACT_HO_premid()</a>
 <LI><a href="#[1451ac0]">ACT_HO_premid_entry()</a>
 <LI><a href="#[1451a48]">ACT_HO_aftermid_entry()</a>
 <LI><a href="#[1451cdc]">get_hip_sensor_input(int*, int)</a>
 <LI><a href="#[1450c74]">get_steering_input(int*, int)</a>
 <LI><a href="#[1537c90]">__default_terminate_handler()</a>
 <LI><a href="#[1537510]">__I$use$semihosting</a>
 <LI><a href="#[144cf48]">__default_new_handler()</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b690d8]">mb_bt_pop_receive_packets</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b69204]">a9_bt_dma_receive</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b692f4]">mb_create_display_data_lists</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b69060]">mb_distribute_error_frames</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68b74]">mb_test_ui_board1</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b68fac]">mb_error_update</a>
 <LI><a href="#[b68bb0]">mb_task_heartbeat</a>
 <LI><a href="#[b691c8]">a9_dn_ssp_parse</a>
 <LI><a href="#[b68f70]">mb_estimator_execution_time_start</a>
 <LI><a href="#[b68ef8]">mb_estimator_update</a>
 <LI><a href="#[b68f34]">mb_estimator_execution_time_stop</a>
 <LI><a href="#[b6918c]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b69150]">a9_dn_update_leds</a>
 <LI><a href="#[b68e80]">mb_fsm_run</a>
 <LI><a href="#[b692b8]">mb_send_data</a>
 <LI><a href="#[b694d4]">mb_update_execution_time</a>
 <LI><a href="#[b65190]">error_ulvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b6b568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[144f720]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[144f108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1533c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1533c58]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[144f720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1533c1c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144f108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1533be0]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1533d84]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1533d48]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1533a3c]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[15389ec]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[15363b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[144c444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[144a0e0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[144baa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14497f8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1449870]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1449c30]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1449ac8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1449708]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1449780]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1449b40]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1449a50]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[144a02c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1449e88]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1449e10]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1449d98]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1449d20]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1449ca8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1449f3c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[14496cc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1449bb8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[14499d8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1449fb4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[15349b4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1536160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
<LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[153565c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[153547c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1535440]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15355a8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1535710]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1535530]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[144f108]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[144f720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1533c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[144c4f8]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[144c174]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[144642c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[144c444]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[15389ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[144c480]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[144c390]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1539748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[144c3cc]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1537420]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1539748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1536160]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[15349b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[153619c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1536124]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1537600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b6b5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc32x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144642c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[144615c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b69a38]"></a>mb_setup_hardware</STRONG> (ARM, 516 bytes, Stack size 0 bytes, mb_hardware_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b687b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b69510]"></a>mb_get_timestamp</STRONG> (ARM, 16 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_get_timestamp &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[b694d4]"></a>mb_update_execution_time</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_update_execution_time &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69498]"></a>get_io_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[145065c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_init_conditions_input(int*, int)
<LI><a href="#[1450a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1450b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1450b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[1450c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steering_input(int*, int)
<LI><a href="#[145191c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[1451994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[1451a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[1451a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[1451a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[1451ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[1451b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[1451b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[1451bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[1451bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[1451c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[1451cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hip_sensor_input(int*, int)
<LI><a href="#[1452f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[1453014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[145308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[145317c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[14531b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[14531f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[1453230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[145326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
<LI><a href="#[14532a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_outer_input(int*, int)
<LI><a href="#[145380c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[1453884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[14538fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[14539ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[1453a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[1453a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[1453aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[1453b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_inner_input(int*, int)
<LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[b6945c]"></a>set_io_float</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b63570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b68e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[14505e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_run()
<LI><a href="#[1450620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_start()
<LI><a href="#[1450a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_stop()
<LI><a href="#[1450a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1450b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1450b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[14518e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_H_stop()
<LI><a href="#[145191c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold()
<LI><a href="#[1451994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold()
<LI><a href="#[1451a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[1451a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[1451a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[1451ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[1451afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing()
<LI><a href="#[1451b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[1451b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[1451bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[1451bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[1451c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing()
<LI><a href="#[1451c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[1452f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stop()
<LI><a href="#[1452f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[1453014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[145308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[145317c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[14531b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[14531f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[1453230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[14537d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stop()
<LI><a href="#[145380c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[1453884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[14538fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[14539ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[1453a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[1453a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[1453aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[1454658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_exit()
<LI><a href="#[14546d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[14547c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_entry()
<LI><a href="#[1454964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
<LI><a href="#[14549a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>

<P><STRONG><a name="[b69420]"></a>get_io_ul</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b68d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[1454a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>

<P><STRONG><a name="[b693e4]"></a>set_io_ul</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1450b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[1454838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[14548b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[14548ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1454928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
</UL>

<P><STRONG><a name="[b693a8]"></a>mark_as_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mark_as_read &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b68cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
</UL>

<P><STRONG><a name="[b6936c]"></a>data_was_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_was_read &rArr; mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b68e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
</UL>

<P><STRONG><a name="[b69330]"></a>mb_read_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b69024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b692f4]"></a>mb_create_display_data_lists</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_create_display_data_lists &rArr; mb_bt_create_data_lists
</UL>
<BR>[Calls]<UL><LI><a href="#[b69114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b692b8]"></a>mb_send_data</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mb_send_data &rArr; a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b6927c]"></a>mb_setup_software</STRONG> (ARM, 712 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_setup_software &rArr; mb_fsm_init &rArr; def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b68bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_heartbeat_period_ms
<LI><a href="#[b68c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_init
<LI><a href="#[b68d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_init
<LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[b68fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_init
<LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b687b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6b4f0]"></a>IRQ_Handler</STRONG> (ARM, 72 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_Handler &rArr; a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b686c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
<LI><a href="#[b68700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b6873c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b52c]"></a>FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIQ_Handler &rArr; a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b68778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b687b4]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; mb_setup_software &rArr; mb_fsm_init &rArr; def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b68688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_run
<LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
<LI><a href="#[b69a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_hardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[b68b74]"></a>mb_test_ui_board1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b680e8]"></a>labview_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b680ac]"></a>lcd_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b68070]"></a>lcd_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b68034]"></a>labview_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b69060]"></a>mb_distribute_error_frames</STRONG> (ARM, 656 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_distribute_error_frames &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b68034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_pop
<LI><a href="#[b68070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_pop
<LI><a href="#[b680ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_push
<LI><a href="#[b680e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_push
<LI><a href="#[b68cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b68e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[b69024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b68c28]"></a>mb_schedule_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67a58]"></a>mb_schedule_tick</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b65f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_clock_tick
<LI><a href="#[b686c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
</UL>

<P><STRONG><a name="[b68688]"></a>mb_schedule_run</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mb_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_schedule_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b687b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b67350]"></a>a9_ssp_synchronize_arm7</STRONG> (ARM, 356 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[b67314]"></a>a9_dn_ssp_init_tx_list</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[b672d8]"></a>a9_dn_red_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b6729c]"></a>a9_dn_green_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[b69150]"></a>a9_dn_update_leds</STRONG> (ARM, 132 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b6918c]"></a>a9_dn_ssp_send_data</STRONG> (ARM, 912 bytes, Stack size 48 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a9_dn_ssp_send_data &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b672d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b68cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b68e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b691c8]"></a>a9_dn_ssp_parse</STRONG> (ARM, 584 bytes, Stack size 24 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_dn_ssp_parse &rArr; mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b6729c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_green_led_blink
<LI><a href="#[b672d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b67ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b68778]"></a>a9_dn_ssel_dma_isr</STRONG> (ARM, 680 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b67224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred_fiq
<LI><a href="#[b672d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[b68bec]"></a>mb_set_heartbeat_period_ms</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b66d74]"></a>mb_hb_toggle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_task_heartbeat
</UL>

<P><STRONG><a name="[b68bb0]"></a>mb_task_heartbeat</STRONG> (ARM, 92 bytes, Stack size 4 bytes, mb_heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_task_heartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[b66d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hb_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69114]"></a>mb_bt_create_data_lists</STRONG> (ARM, 180 bytes, Stack size 40 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>

<P><STRONG><a name="[b66414]"></a>a9_bt_push_io_data_point</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>

<P><STRONG><a name="[b69240]"></a>a9_bt_data_sender</STRONG> (ARM, 976 bytes, Stack size 48 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b66414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_push_io_data_point
<LI><a href="#[b68cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b68e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_data
</UL>

<P><STRONG><a name="[b663d8]"></a>a9_bt_start_ch3_dma_transfer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, mb_bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b6873c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>

<P><STRONG><a name="[b6873c]"></a>a9_gpdma_isr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_gpdma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b663d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b68700]"></a>a9_software_int_isr</STRONG> (ARM, 40 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_software_int_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b663d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b69204]"></a>a9_bt_dma_receive</STRONG> (ARM, 812 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a9_bt_dma_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b672d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b690d8]"></a>mb_bt_pop_receive_packets</STRONG> (ARM, 820 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_bt_pop_receive_packets &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b672d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b68c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b65f28]"></a>a9_clock_tick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, a9_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>

<P><STRONG><a name="[b6909c]"></a>mb_clock_get_execution_time</STRONG> (ARM, 36 bytes, Stack size 0 bytes, a9_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[b68f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_start
<LI><a href="#[b694d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b686c4]"></a>a9_timer0_isr</STRONG> (ARM, 56 bytes, Stack size 8 bytes, a9_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b67a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b68dcc]"></a>mb_io_get_pointer</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b69330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b68cdc]"></a>mb_io_mark_as_read</STRONG> (ARM, 72 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b693a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
</UL>

<P><STRONG><a name="[b65ab4]"></a>mb_io_mark_as_unread</STRONG> (ARM, 72 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[b67ff8]"></a>mb_io_mark_as_unread_by_all</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[b68e44]"></a>mb_io_data_was_read</STRONG> (ARM, 80 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b6936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
</UL>

<P><STRONG><a name="[b68e08]"></a>mb_io_get_float</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b63390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_model_based_estimator
<LI><a href="#[b633cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_from_hip_angle
<LI><a href="#[b63408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b635ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_old
<LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[b63624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[b68d54]"></a>mb_io_get_ul</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b69420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>

<P><STRONG><a name="[b65a78]"></a>mb_io_get_sl</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[b68d90]"></a>mb_io_get_time</STRONG> (ARM, 52 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b633cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_from_hip_angle
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[b63624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b65a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[b68c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
</UL>

<P><STRONG><a name="[b68ca0]"></a>mb_io_set_float</STRONG> (ARM, 96 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b63390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_model_based_estimator
<LI><a href="#[b633cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_from_hip_angle
<LI><a href="#[b63408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_new
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b635ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_old
<LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[b63624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[b68f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_execution_time_stop
<LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b694d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b68c64]"></a>mb_io_set_ul</STRONG> (ARM, 88 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>

<P><STRONG><a name="[b65a3c]"></a>mb_io_set_sl</STRONG> (ARM, 88 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[b65a00]"></a>mb_io_set_time</STRONG> (ARM, 80 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_set_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[b63624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
</UL>

<P><STRONG><a name="[b68d18]"></a>mb_io_init</STRONG> (ARM, 1180 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b65244]"></a>mb_error_pop</STRONG> (ARM, 168 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b69024]"></a>mb_error_get_frame</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_error_get_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[b65244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b69330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b68fe8]"></a>mb_error_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67260]"></a>mb_error_occurred</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b65a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b65a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[b65a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_sl
<LI><a href="#[b65ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread
<LI><a href="#[b67ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b68c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b68d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
<LI><a href="#[b68e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b65208]"></a>mb_error_occurred_irq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)

<P><STRONG><a name="[b67224]"></a>mb_error_occurred_fiq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>

<P><STRONG><a name="[b651cc]"></a>mb_error_push</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_error_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b68fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_update
</UL>

<P><STRONG><a name="[b68fac]"></a>mb_error_update</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_error_update &rArr; mb_error_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b651cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b65190]"></a>error_ulvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_error.o(.data)
</UL>
<P><STRONG><a name="[b63660]"></a>mb_imu_rate_filter</STRONG> (ARM, 540 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_imu_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63624]"></a>mb_hip_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b635e8]"></a>mb_hip_motor_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_motor_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b635ac]"></a>mb_leg_state_machine_old</STRONG> (ARM, 988 bytes, Stack size 56 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mb_leg_state_machine_old &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63570]"></a>mb_time_since_last_HS</STRONG> (ARM, 168 bytes, Stack size 16 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mb_time_since_last_HS &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63534]"></a>greg_cos</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_model_based_estimator
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b634f8]"></a>greg_atan</STRONG> (ARM, 252 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b634bc]"></a>greg_sqrt</STRONG> (ARM, 240 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63480]"></a>greg_sin</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_model_based_estimator
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63444]"></a>mb_update_abs_leg_and_ankle_angles</STRONG> (ARM, 1516 bytes, Stack size 128 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b63480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[b634bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sqrt
<LI><a href="#[b634f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_atan
<LI><a href="#[b63534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63408]"></a>mb_leg_state_machine_new</STRONG> (ARM, 908 bytes, Stack size 8 bytes, mb_estimator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>

<P><STRONG><a name="[b633cc]"></a>mb_hip_rate_from_hip_angle</STRONG> (ARM, 332 bytes, Stack size 24 bytes, mb_estimator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
<LI><a href="#[14501ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[b63390]"></a>mb_model_based_estimator</STRONG> (ARM, 1508 bytes, Stack size 56 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mb_model_based_estimator &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b63480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[b63534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b68e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b68ef8]"></a>mb_estimator_update</STRONG> (ARM, 76 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mb_estimator_update &rArr; mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b63390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_model_based_estimator
<LI><a href="#[b63444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b635ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_leg_state_machine_old
<LI><a href="#[b635e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_motor_rate_filter
<LI><a href="#[b63624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b68f70]"></a>mb_estimator_execution_time_start</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_estimator_execution_time_start
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b68f34]"></a>mb_estimator_execution_time_stop</STRONG> (ARM, 44 bytes, Stack size 16 bytes, mb_estimator_execution_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_estimator_execution_time_stop &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1454a18]"></a>detect_UI_button_input(int)</STRONG> (ARM, 52 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b69420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[14549dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[14549dc]"></a>get_UI_conditions_input(int*, int)</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_UI_conditions_input(int*, int) &rArr; detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[1454a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[14549a0]"></a>motors_off()</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[145470c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk_exit()
</UL>

<P><STRONG><a name="[1454964]"></a>all_fsm_run()</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1454478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Called By]<UL><LI><a href="#[14546d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby_entry()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[1454928]"></a>set_UI_LCD(char*, int)</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LCD(char*, int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[14548ec]"></a>clear_UI_LCD(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[14548b0]"></a>set_UI_LED(int, char)</STRONG> (ARM, 244 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1454874]"></a>detect_error()</STRONG> (ARM, 252 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = detect_error() &rArr; data_was_read &rArr; mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
<LI><a href="#[b693a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
<LI><a href="#[b69420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1454838]"></a>clear_UI_LED()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LED() &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[14547fc]"></a>ACTION_UI_calibrate()</STRONG> (ARM, 324 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ACTION_UI_calibrate() &rArr; set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1454838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[14548b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[14548ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1454928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[14547c0]"></a>ACTION_UI_walk_entry()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1454784]"></a>int2ascii(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ui_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[1454748]"></a>ACTION_UI_walk()</STRONG> (ARM, 636 bytes, Stack size 48 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = ACTION_UI_walk() &rArr; all_fsm_run() &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14501ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1454784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[1454838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[14548b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[1454928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[1454964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[145470c]"></a>ACTION_UI_walk_exit()</STRONG> (ARM, 16 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14549a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>

<P><STRONG><a name="[14546d0]"></a>ACTION_UI_standby_entry()</STRONG> (ARM, 28 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1454964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
</UL>

<P><STRONG><a name="[1454694]"></a>ACTION_UI_standby()</STRONG> (ARM, 1092 bytes, Stack size 48 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14501ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1454784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[1454838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1454874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[14548b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[14548ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1454928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[14549a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>

<P><STRONG><a name="[1454658]"></a>ACTION_UI_standby_exit()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[145461c]"></a>ACTION_UI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[14545e0]"></a>def_UI_fsm(fsm*)</STRONG> (ARM, 428 bytes, Stack size 120 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_UI_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[1453b18]"></a>get_foot_inner_input(int*, int)</STRONG> (ARM, 444 bytes, Stack size 24 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_foot_inner_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[1453adc]"></a>FI_command_current_limiter(float, float)</STRONG> (ARM, 200 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FI_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[145380c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_startflipdown()
<LI><a href="#[1453884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[14538fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[1453a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[1453aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
</UL>

<P><STRONG><a name="[1453aa0]"></a>ACT_FI_stance_entry()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FI_stance_entry() &rArr; FI_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[1453a64]"></a>ACT_FI_stance()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[1453a28]"></a>ACT_FI_prepush_entry()</STRONG> (ARM, 240 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[14539ec]"></a>ACT_FI_prepush()</STRONG> (ARM, 144 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[14539b0]"></a>ACT_FI_afterpush_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1453974]"></a>ACT_FI_afterpush()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1453938]"></a>ACT_FI_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[14538fc]"></a>ACT_FI_flipup()</STRONG> (ARM, 112 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[14538c0]"></a>ACT_FI_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1453884]"></a>ACT_FI_flipdown()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[1453848]"></a>ACT_FI_startflipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_inner_fsm.o(.text), UNUSED)

<P><STRONG><a name="[145380c]"></a>ACT_FI_startflipdown()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[1453adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[14537d0]"></a>ACT_FI_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1453794]"></a>def_foot_inner_fsm(fsm*)</STRONG> (ARM, 600 bytes, Stack size 120 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14532a8]"></a>get_foot_outer_input(int*, int)</STRONG> (ARM, 448 bytes, Stack size 24 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[145326c]"></a>FO_command_current_limiter(float, float)</STRONG> (ARM, 188 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1453014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[145308c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[14531f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[1453230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
</UL>

<P><STRONG><a name="[1453230]"></a>ACT_FO_stance_entry()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FO_stance_entry() &rArr; FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[145326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[14531f4]"></a>ACT_FO_stance()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FO_stance() &rArr; FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[145326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[14531b8]"></a>ACT_FO_prepush_entry()</STRONG> (ARM, 240 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[145317c]"></a>ACT_FO_prepush()</STRONG> (ARM, 148 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1453140]"></a>ACT_FO_afterpush_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1453104]"></a>ACT_FO_afterpush()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[14530c8]"></a>ACT_FO_flipup_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[145308c]"></a>ACT_FO_flipup()</STRONG> (ARM, 112 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[145326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[1453050]"></a>ACT_FO_flipdown_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1453014]"></a>ACT_FO_flipdown()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[145326c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[1452fd8]"></a>ACT_FO_startstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1452f9c]"></a>ACT_FO_startstance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1452f60]"></a>ACT_FO_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1452f24]"></a>def_foot_outer_fsm(fsm*)</STRONG> (ARM, 600 bytes, Stack size 120 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14545a4]"></a>copy(fsm*, fsm*)</STRONG> (ARM, 672 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy(fsm*, fsm*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144f450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[1454388]"></a>fsm::fsm(int, int, int)</STRONG> (ARM, 576 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144f450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[1452ab0]"></a>fsm::fsm__sub_object(int, int, int)</STRONG> (ARM, 0 bytes, Stack size 24 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1452a74]"></a>fsm::fsm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[1452a38]"></a>fsm::fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[145434c]"></a>fsm::~fsm()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fsm::~fsm() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144f5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[14529fc]"></a>fsm::~fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 8 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[14529c0]"></a>fsm::state_def(int, int(*)())</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1454568]"></a>fsm::exit_state_def(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)
<LI><a href="#[1452984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[1452984]"></a>fsm::state_def(int, int(*)(), int)</STRONG> (ARM, 68 bytes, Stack size 20 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[1452948]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)</STRONG> (ARM, 124 bytes, Stack size 28 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[1454400]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)())</STRONG> (ARM, 84 bytes, Stack size 4 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fsm::state_def(int, int(*)(), int(*)(), int(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[14543c4]"></a>fsm::trans_def(int, int, int)</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm::trans_def(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[145452c]"></a>fsm::set_sensor_input_function(void(*)(int*, int))</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[145443c]"></a>fsm::set_name(char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[14544f0]"></a>fsm::print_state_transition_matrix()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[145290c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[145290c]"></a>fsm::check(int)</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[1454478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[1454478]"></a>fsm::run()</STRONG> (ARM, 1256 bytes, Stack size 416 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[145290c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[1454964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_fsm_run()
</UL>

<P><STRONG><a name="[14528d0]"></a>fsm::get_current_state()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1452894]"></a>fsm::ready_to_exit()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1452858]"></a>fsm::stop()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[14544b4]"></a>fsm::set_state_communication_variable(int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>

<P><STRONG><a name="[145281c]"></a>fsm::print_transition_insertion_history()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[1451cdc]"></a>get_hip_sensor_input(int*, int)</STRONG> (ARM, 708 bytes, Stack size 24 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_hip_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451ca0]"></a>ACT_HI_starthold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451c64]"></a>ACT_HI_starthold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_starthold() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451c28]"></a>ACT_HI_preswing()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HI_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451bec]"></a>ACT_HI_premid_entry()</STRONG> (ARM, 324 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_premid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451bb0]"></a>ACT_HI_premid()</STRONG> (ARM, 180 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451b74]"></a>ACT_HI_aftermid_entry()</STRONG> (ARM, 552 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HI_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451b38]"></a>ACT_HI_aftermid()</STRONG> (ARM, 180 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_aftermid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451afc]"></a>ACT_HO_preswing()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HO_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451ac0]"></a>ACT_HO_premid_entry()</STRONG> (ARM, 380 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HO_premid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451a84]"></a>ACT_HO_premid()</STRONG> (ARM, 144 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HO_premid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451a48]"></a>ACT_HO_aftermid_entry()</STRONG> (ARM, 620 bytes, Stack size 32 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ACT_HO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[1451a0c]"></a>ACT_HO_aftermid()</STRONG> (ARM, 180 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[14519d0]"></a>ACT_HI_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1451994]"></a>ACT_HI_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1451958]"></a>ACT_HO_ehold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[145191c]"></a>ACT_HO_ehold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[14518e0]"></a>ACT_H_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[14518a4]"></a>def_hip_fsm(fsm*)</STRONG> (ARM, 868 bytes, Stack size 120 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_hip_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14511d8]"></a>init_global_comm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_fsm.o(.text), UNUSED)

<P><STRONG><a name="[b68ebc]"></a>mb_fsm_init</STRONG> (ARM, 344 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mb_fsm_init &rArr; def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144f270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
<LI><a href="#[1451160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[145119c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[14518a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[145290c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[1452a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm()
<LI><a href="#[1452f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
<LI><a href="#[1453794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[14545e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b68e80]"></a>mb_fsm_run</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[1454478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[1450c74]"></a>get_steering_input(int*, int)</STRONG> (ARM, 328 bytes, Stack size 24 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_steering_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[1450c38]"></a>ACT_S_innerlegfront_entry()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1450bfc]"></a>ACT_S_innerlegfront()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1450bc0]"></a>ACT_S_innerlegstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1450b84]"></a>ACT_S_innerlegstance()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1450b48]"></a>ACT_S_innerlegback_entry()</STRONG> (ARM, 316 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1450b0c]"></a>ACT_S_innerlegback()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1450ad0]"></a>ACT_S_innerlegswing_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1450a94]"></a>ACT_S_innerlegswing()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1450a58]"></a>ACT_S_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[145119c]"></a>def_steering_fsm(fsm*)</STRONG> (ARM, 420 bytes, Stack size 120 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[145065c]"></a>get_system_init_conditions_input(int*, int)</STRONG> (ARM, 184 bytes, Stack size 16 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1450620]"></a>ACTION_SI_system_start()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[14505e4]"></a>ACTION_SI_system_run()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[14505a8]"></a>ACTION_SI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_init_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1451160]"></a>def_system_init_fsm(fsm*)</STRONG> (ARM, 260 bytes, Stack size 120 bytes, system_init_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[14543c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[1454400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[145443c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[14544b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[14544f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[145452c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[1454568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14501e8]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[14501ac]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b633cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_from_hip_angle
<LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[144f888]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144f84c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144f810]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144eb2c]"></a>__rt_new_handler_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144f270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
</UL>

<P><STRONG><a name="[144e820]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144bb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[144bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[144f270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[153655c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1537c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[144cf48]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1448f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[144c8f4]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[144c8b8]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144642c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[144c87c]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[144bdb4]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[144baa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[144e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[144bcc4]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[144bc88]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[144bb98]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[144bb5c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[144bb20]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1539964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[144e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[144bae4]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[144baa8]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[144b580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[144bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[15391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1539964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[144a0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[144b580]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144baa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[144b544]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[144b454]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[144bdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[144d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1539964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1448f10]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1537c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[144cf48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[144642c]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[144c8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[144c174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1539964]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[144baa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[144bb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1539748]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1537420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[15396d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[144c390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15395e0]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15349b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[1536bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1537600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1448f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1537c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1537c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[15391a8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1536868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1536ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[144baa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[144bae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1537c54]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[153655c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1536fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via BLX)
<LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1448f10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1537600]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1536124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1536ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
<LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via BLX)
</UL>

<P><STRONG><a name="[1537510]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[15374d4]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1536fe8]"></a>__rt_eh_globals_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1537c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via BLX)
</UL>

<P><STRONG><a name="[1536ca0]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1537600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1536bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[15391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1536bb0]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1535b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1536ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1536868]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1535cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[153655c]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1537c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1536520]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[15364e4]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1535cb0]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1535224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1535b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1536868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1535b84]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1535cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1536bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1535224]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1535cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1450170]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1450134]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1450224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1450260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[145029c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[1454694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1454748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14547fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[144f5b8]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144d128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[145434c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm() (via BLX)
</UL>

<P><STRONG><a name="[144d128]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144b454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[144f5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[144f450]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144f270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1454388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int) (via BLX)
<LI><a href="#[14545a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*) (via BLX)
</UL>

<P><STRONG><a name="[144f270]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144e820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[144eb2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b68ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init (via BLX)
<LI><a href="#[144f450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[15363b8]"></a>_fp_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[15389ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[153637c]"></a>__fplib_config_fpu_vfp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1536340]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b6b748]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b70c]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b6d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b694]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[145029c]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1450260]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1450224]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1450134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1537c90]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15395e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[15396d0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1539748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
