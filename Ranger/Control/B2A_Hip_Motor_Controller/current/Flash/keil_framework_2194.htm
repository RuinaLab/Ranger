<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Jun 20 13:13:03 2016
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[25666c4]">Reset_Handler</a>
 <LI><a href="#[256664c]">FIQ_Handler</a>
 <LI><a href="#[25668e0]">Undef_Handler</a>
 <LI><a href="#[25668a4]">SWI_Handler</a>
 <LI><a href="#[2566868]">PAbt_Handler</a>
 <LI><a href="#[256682c]">DAbt_Handler</a>
 <LI><a href="#[25667f0]">IRQ_Handler</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2564c0c]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2564c0c]">mutex_lock</a><BR>
 <LI><a href="#[25d13c0]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25d13c0]">_float_round</a><BR>
 <LI><a href="#[25668e0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25668e0]">Undef_Handler</a><BR>
 <LI><a href="#[25668a4]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25668a4]">SWI_Handler</a><BR>
 <LI><a href="#[2566868]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2566868]">PAbt_Handler</a><BR>
 <LI><a href="#[256682c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[256682c]">DAbt_Handler</a><BR>
 <LI><a href="#[25667f0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25667f0]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2565ecc]">voidint</a>
 <LI><a href="#[2565f44]">voidvoid</a>
 <LI><a href="#[2565ddc]">intvoid</a>
 <LI><a href="#[2565f44]">voidvoid</a>
 <LI><a href="#[2565ddc]">intvoid</a>
 <LI><a href="#[25666c4]">Reset_Handler</a>
 <LI><a href="#[25668e0]">Undef_Handler</a>
 <LI><a href="#[25668a4]">SWI_Handler</a>
 <LI><a href="#[2566868]">PAbt_Handler</a>
 <LI><a href="#[256682c]">DAbt_Handler</a>
 <LI><a href="#[25667f0]">IRQ_Handler</a>
 <LI><a href="#[256664c]">FIQ_Handler</a>
 <LI><a href="#[25dc748]">__main</a>
 <LI><a href="#[2566ca0]">main</a>
 <LI><a href="#[256556c]">asched_get_timestamp</a>
 <LI><a href="#[2563a00]">dn_error_transmit</a>
 <LI><a href="#[2563a3c]">dn_blue_heartbeat</a>
 <LI><a href="#[25639c4]">dn_get_motor_vel_rads</a>
 <LI><a href="#[256394c]">dn_get_shaft_pos_rads</a>
 <LI><a href="#[2563988]">dn_get_raw_motor_current</a>
 <LI><a href="#[2562b00]">can_rx_setter_int_dummy</a>
 <LI><a href="#[25626c8]">mc_set_target_current</a>
 <LI><a href="#[256277c]">dn_rx_timestamp</a>
 <LI><a href="#[2562b3c]">can_rx_setter_float_dummy</a>
 <LI><a href="#[2562740]">mc_set_shutdown</a>
 <LI><a href="#[256376c]">mc_set_command_current</a>
 <LI><a href="#[25636f4]">mc_set_stiffness</a>
 <LI><a href="#[2563730]">mc_set_dampness</a>
 <LI><a href="#[2562704]">mc_set_sleep</a>
 <LI><a href="#[256556c]">asched_get_timestamp</a>
 <LI><a href="#[2562830]">dn_get_motor_pos_rads</a>
 <LI><a href="#[25639c4]">dn_get_motor_vel_rads</a>
 <LI><a href="#[256394c]">dn_get_shaft_pos_rads</a>
 <LI><a href="#[256286c]">dn_get_motor_current</a>
 <LI><a href="#[256295c]">dn_get_battery_power</a>
 <LI><a href="#[2564db0]">error_get_time</a>
 <LI><a href="#[2564d74]">error_get_info</a>
 <LI><a href="#[25627b8]">dn_get_status</a>
 <LI><a href="#[25627f4]">dn_get_shaft_vel_rads</a>
 <LI><a href="#[2562998]">dn_get_battery_current</a>
 <LI><a href="#[2562920]">dn_get_battery_voltage</a>
 <LI><a href="#[25628e4]">dn_get_execution_time</a>
 <LI><a href="#[25628a8]">dn_get_max_execution_time</a>
 <LI><a href="#[2562254]">can_rx1_isr</a>
 <LI><a href="#[2562308]">adcx_isr</a>
 <LI><a href="#[2562344]">adci_isr</a>
 <LI><a href="#[25644c8]">timer1_isr</a>
 <LI><a href="#[2562290]">can_error_isr</a>
 <LI><a href="#[2562218]">uarti_isr</a>
 <LI><a href="#[25622cc]">ae_isr</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c458]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
 <LI><a href="#[255c41c]">__switch$$</a>
 <LI><a href="#[2560ea4]">fputc</a>
 <LI><a href="#[25d3e68]">_sputc</a>
 <LI><a href="#[2563fdc]">task_every_row</a>
 <LI><a href="#[2563cd0]">can_tx_angle</a>
 <LI><a href="#[2563898]">dn_sched_done</a>
 <LI><a href="#[2563fdc]">task_every_row</a>
 <LI><a href="#[2563c94]">can_tx_angle_rate</a>
 <LI><a href="#[2563898]">dn_sched_done</a>
 <LI><a href="#[2563fdc]">task_every_row</a>
 <LI><a href="#[2563c1c]">can_tx_battery_power</a>
 <LI><a href="#[2563898]">dn_sched_done</a>
 <LI><a href="#[2563fdc]">task_every_row</a>
 <LI><a href="#[2563fa0]">run_occasionally</a>
 <LI><a href="#[2563898]">dn_sched_done</a>
 <LI><a href="#[2565ecc]">voidint</a>
 <LI><a href="#[2565f44]">voidvoid</a>
 <LI><a href="#[2565ddc]">intvoid</a>
 <LI><a href="#[2565f44]">voidvoid</a>
 <LI><a href="#[2565ddc]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25666c4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25dc748]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[25d1b04]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[25d1a14]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25d19d8]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25d1078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25d18e8]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[255bb34]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[255b6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[255b6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[255b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
<LI><a href="#[2562254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
</UL>

<P><STRONG><a name="[2566cdc]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[2566b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[2566bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2566ca0]"></a>main</STRONG> (ARM, 96 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2566ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_on
<LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[2566b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[2566bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[2566c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
<LI><a href="#[25d3c88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[2566124]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[255eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_unsafe_target_current
<LI><a href="#[25626c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[25636f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[2563730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[256376c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[25637e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[25660e8]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[25660ac]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fixed_to_float
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[2566070]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[2566034]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[25637e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[2565ff8]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[2565fbc]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2561a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[2561b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[2563988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
</UL>

<P><STRONG><a name="[2565f80]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565f44]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[2565f08]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565ecc]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[2565e90]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565e54]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2565e18]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565ddc]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[2565da0]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565d64]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565d28]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565cec]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[2565620]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[25655e4]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[25644c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[25655a8]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256277c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[2566c28]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256556c]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2564ea0]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2565bfc]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2564bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2564c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2564c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[255d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_write
<LI><a href="#[255d484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_read_buffer
<LI><a href="#[255e8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_run_no_control
<LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[255eac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[255f608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_efilter_add
<LI><a href="#[25617c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[25622cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_isr
<LI><a href="#[2562308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_isr
<LI><a href="#[2562344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_isr
<LI><a href="#[25626c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[256358c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[2563640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[25637e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[2563e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[2563e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[2563eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[2563f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[25655e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
<LI><a href="#[2565ddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[2565e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[2565ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[2565f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
</UL>

<P><STRONG><a name="[2564e64]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2564bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2564c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2564c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2562290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[2564e28]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2564bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[2564c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2564c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[2564dec]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2564db0]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2564d74]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2564d38]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[2564cfc]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[2564cc0]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[2564c84]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2564c48]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2564e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[2564e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2564c0c]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2564c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2564c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[2564e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[2564e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2564bd0]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2564e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[2564e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2566bb0]"></a>init_hardware</STRONG> (ARM, 1136 bytes, Stack size 16 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2566cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[25644c8]"></a>timer1_isr</STRONG> (ARM, 40 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer1_isr &rArr; asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[25655e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[2563fdc]"></a>task_every_row</STRONG> (ARM, 68 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[256358c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[25635c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[2563640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[256367c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
<LI><a href="#[25636b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[25637e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[256385c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[25638d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[2563d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[2563d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[2563dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
<LI><a href="#[2563e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[2563eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_conversion_wait
<LI><a href="#[2563f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[2564dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2563fa0]"></a>run_occasionally</STRONG> (ARM, 192 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = run_occasionally &rArr; dn_hip_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[2563a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_velocity
<LI><a href="#[2563ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_position
<LI><a href="#[2563af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_current
<LI><a href="#[2563b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[2563b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[2563ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[2563be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_battery_voltage
<LI><a href="#[2563c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_battery_current
<LI><a href="#[2564c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2566b38]"></a>init_software</STRONG> (ARM, 324 bytes, Stack size 56 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = init_software &rArr; qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[25636f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[2563730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[256376c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[2563820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[2563e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[2563eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[2563f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_init
<LI><a href="#[2564ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[2565620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2566cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2566afc]"></a>init_values</STRONG> (ARM, 24 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_values &rArr; qdc_tmr0_cap01_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2563604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[256394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_pos_rads
<LI><a href="#[2563d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_wait
<LI><a href="#[2563dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2566cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2566bec]"></a>init_can</STRONG> (ARM, 604 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[2562a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[2562a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[2562a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[2562ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[2562b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[2562bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2566cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2563ab4]"></a>can_tx_motor_position</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_position &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563a78]"></a>can_tx_motor_velocity</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_velocity &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563cd0]"></a>can_tx_angle</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_angle &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2563af0]"></a>can_tx_motor_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_motor_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563c1c]"></a>can_tx_battery_power</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_battery_power &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2563c94]"></a>can_tx_angle_rate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_angle_rate &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[2563ba4]"></a>can_tx_board_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_board_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563c58]"></a>can_tx_battery_current</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_battery_current &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563be0]"></a>can_tx_battery_voltage</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_battery_voltage &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563b68]"></a>can_tx_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563b2c]"></a>can_tx_max_exec_time</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_tx_max_exec_time &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2566b74]"></a>init_interrupts</STRONG> (ARM, 220 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2566cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[2561bc4]"></a>dn_get_shaft_position</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25617c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
</UL>

<P><STRONG><a name="[25638d4]"></a>dn_safety</STRONG> (ARM, 104 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_safety &rArr; ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[256169c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[2561714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_blink
<LI><a href="#[256178c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_direction_control
<LI><a href="#[25617c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[256394c]"></a>dn_get_shaft_pos_rads</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_shaft_pos_rads &rArr; ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[25617c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2562830]"></a>dn_get_motor_pos_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_pos_rads &rArr; qdc_tmr0_cap23_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[25615e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_angle_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2563910]"></a>dn_hip_motor_encoder_rezero</STRONG> (ARM, 108 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dn_hip_motor_encoder_rezero &rArr; __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2561570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[25615e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_angle_float
<LI><a href="#[25617c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_get_pos
<LI><a href="#[25618b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2561930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[256196c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25619a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25619e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[2563a3c]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2561750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[2561b88]"></a>dn_green_heartbeat</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25616d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_toggle
</UL>

<P><STRONG><a name="[2561b4c]"></a>dn_red_heartbeat</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_toggle
</UL>

<P><STRONG><a name="[2562920]"></a>dn_get_battery_voltage</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[2561840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2561b10]"></a>dn_get_raw_battery_voltage</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[2565fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[2561ad4]"></a>dn_get_hbridge_raw_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
</UL>

<P><STRONG><a name="[2561a98]"></a>dn_get_hbridge_temp</STRONG> (ARM, 20 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[2563988]"></a>dn_get_raw_motor_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_get_raw_motor_current &rArr; linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2561804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[2565fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[256286c]"></a>dn_get_motor_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_current
</UL>
<BR>[Calls]<UL><LI><a href="#[2561804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2562998]"></a>dn_get_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_current
</UL>
<BR>[Calls]<UL><LI><a href="#[2561804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2561a5c]"></a>dn_get_raw_battery_current</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[2565fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[256295c]"></a>dn_get_battery_power</STRONG> (ARM, 48 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_battery_power
</UL>
<BR>[Calls]<UL><LI><a href="#[2561804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[2561840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2563a00]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[2561a20]"></a>dn_error_print</STRONG> (ARM, 16 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
</UL>

<P><STRONG><a name="[25639c4]"></a>dn_get_motor_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_vel_rads &rArr; qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[25615ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[25627f4]"></a>dn_get_shaft_vel_rads</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_shaft_vel_rads &rArr; qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[2561624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[256277c]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25655a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[25627b8]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2563898]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[256556c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[25628e4]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[256187c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[25628a8]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[256187c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2560ea4]"></a>fputc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2560d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2560e68]"></a>ferror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[2560e2c]"></a>_ttywrch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2560d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[2560df0]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2560df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2560df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2563820]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[256385c]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2560814]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[2563dfc]"></a>ae_init_encoder</STRONG> (ARM, 124 bytes, Stack size 16 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ae_init_encoder &rArr; __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25602ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2560328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2561930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2563dc0]"></a>ae_update</STRONG> (ARM, 140 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ae_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[25617c8]"></a>ae_get_pos</STRONG> (ARM, 52 bytes, Stack size 8 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ae_get_pos &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2561bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_position
<LI><a href="#[25638d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[256394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_pos_rads
</UL>

<P><STRONG><a name="[2563d84]"></a>ae_wait</STRONG> (ARM, 20 bytes, Stack size 0 bytes, abs_enc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[25622cc]"></a>ae_isr</STRONG> (ARM, 224 bytes, Stack size 48 bytes, abs_enc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ae_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[255fe00]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fdc4]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fd88]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fd4c]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[25636b8]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[255fd10]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[2561714]"></a>mcu_led_green_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25638d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[255fcd4]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2561750]"></a>mcu_led_blue_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[2566ac0]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[256169c]"></a>mcu_led_red_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25638d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[25616d8]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2561b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_green_heartbeat
</UL>

<P><STRONG><a name="[2561660]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2561b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_red_heartbeat
</UL>

<P><STRONG><a name="[255fc98]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fc5c]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fc20]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[255fbe4]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[2563f28]"></a>adci_init</STRONG> (ARM, 200 bytes, Stack size 24 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[255f644]"></a>adci_convert_next</STRONG> (ARM, 124 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[2563f64]"></a>adci_convert_all</STRONG> (ARM, 144 bytes, Stack size 8 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adci_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[255f608]"></a>adci_efilter_add</STRONG> (ARM, 88 bytes, Stack size 16 bytes, adc_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2562344]"></a>adci_isr</STRONG> (ARM, 240 bytes, Stack size 40 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adci_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[2561840]"></a>adci_get_result</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2561a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[2561ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_raw_temp
<LI><a href="#[2561b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[2562920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[256295c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
</UL>

<P><STRONG><a name="[255f5cc]"></a>adci_get_raw</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[255f590]"></a>adci_get_filter</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[25637a8]"></a>mc_init</STRONG> (ARM, 332 bytes, Stack size 56 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mc_init &rArr; __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[255e870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[255e8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2566034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[25660ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[25626c8]"></a>mc_set_target_current</STRONG> (ARM, 72 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_target_current &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255eb40]"></a>mc_set_unsafe_target_current</STRONG> (ARM, 20 bytes, Stack size 8 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[255eb04]"></a>mc_update_watchdog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[255eac8]"></a>mc_set_pwm</STRONG> (ARM, 384 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[255ea8c]"></a>mc_pid_current</STRONG> (ARM, 868 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[255eac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[255fd10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_on
<LI><a href="#[255fd4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_off
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[2565ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult_to_long
<LI><a href="#[2566034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[2566070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_int
<LI><a href="#[25660ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[25637e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[25637e4]"></a>mc_compliant_control</STRONG> (ARM, 148 bytes, Stack size 24 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc_compliant_control &rArr; mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[255ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[2566034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[256376c]"></a>mc_set_command_current</STRONG> (ARM, 44 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_command_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255ea50]"></a>mc_get_command_current</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[25636f4]"></a>mc_set_stiffness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_stiffness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255ea14]"></a>mc_get_stiffness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[2563730]"></a>mc_set_dampness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_dampness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255e9d8]"></a>mc_get_dampness</STRONG> (ARM, 24 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[256178c]"></a>mc_direction_control</STRONG> (ARM, 28 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25638d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[255e99c]"></a>mc_get_parameters</STRONG> (ARM, 8 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[255e960]"></a>mc_get_pwm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[2562740]"></a>mc_set_shutdown</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2562704]"></a>mc_set_sleep</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255e924]"></a>mc_get_mult</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[255e8e8]"></a>mc_run_no_control</STRONG> (ARM, 152 bytes, Stack size 16 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2560d78]"></a>sendchar</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2560e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[2560ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[255e4ec]"></a>getkey</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[255ded4]"></a>uarti_tx_set_empty_callback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart_int.o(.text), UNUSED)

<P><STRONG><a name="[255de98]"></a>uarti_tx_refill</STRONG> (ARM, 108 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)

<P><STRONG><a name="[2561534]"></a>uarti_tx_buf</STRONG> (ARM, 160 bytes, Stack size 16 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[255dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[255dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[255de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int
<LI><a href="#[255de5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int2
<LI><a href="#[2561a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_print
</UL>

<P><STRONG><a name="[2562218]"></a>uarti_isr</STRONG> (ARM, 148 bytes, Stack size 40 bytes, uart_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uarti_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[255de5c]"></a>uarti_print_int2</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[25d3a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[255de20]"></a>uarti_print_int</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[25d3a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[255dde4]"></a>uarti_print_float</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[2561930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25d3a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[255dda8]"></a>uarti_print_2float</STRONG> (ARM, 100 bytes, Stack size 24 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2561534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[2561930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25d3a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[255d574]"></a>adcx_register_write</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[255d538]"></a>adcx_convert_cfg</STRONG> (ARM, 72 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[255d4fc]"></a>adcx_convert_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[255d4c0]"></a>adcx_register_read</STRONG> (ARM, 56 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[255d484]"></a>adcx_read_buffer</STRONG> (ARM, 56 bytes, Stack size 8 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2562308]"></a>adcx_isr</STRONG> (ARM, 336 bytes, Stack size 40 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adcx_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[2563e74]"></a>adcx_convert_all</STRONG> (ARM, 148 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[255d448]"></a>adcx_write</STRONG> (ARM, 40 bytes, Stack size 16 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[2561804]"></a>adcx_get_result</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2561a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[256286c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[256295c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[2562998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[2563988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
</UL>

<P><STRONG><a name="[2563e38]"></a>adcx_init</STRONG> (ARM, 136 bytes, Stack size 8 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcx_init &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2563eec]"></a>adcx_add_config</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_add_config &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2563eb0]"></a>adcx_conversion_wait</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2563604]"></a>qdc_tmr0_cap01_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap01_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25dc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2566afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[255ccc8]"></a>qdc_tmr0_cap01_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25dc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2561570]"></a>qdc_tmr0_cap23_set_angle_float</STRONG> (ARM, 56 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = qdc_tmr0_cap23_set_angle_float &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25dc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
</UL>

<P><STRONG><a name="[255cc8c]"></a>qdc_tmr0_cap23_set_angle_fixed</STRONG> (ARM, 40 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[25dc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[255cc50]"></a>qdc_tmr0_cap01_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[255cc14]"></a>qdc_tmr0_cap01_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[255cbd8]"></a>qdc_tmr0_cap01_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[2561624]"></a>qdc_tmr0_cap01_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap01_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[25627f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_vel_rads
</UL>

<P><STRONG><a name="[255cb9c]"></a>qdc_tmr0_cap23_get_angle_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[25615e8]"></a>qdc_tmr0_cap23_get_angle_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap23_get_angle_float
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2562830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_pos_rads
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
</UL>

<P><STRONG><a name="[255cb60]"></a>qdc_tmr0_cap23_get_rate_fixed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, qdc.o(.text), UNUSED)

<P><STRONG><a name="[25615ac]"></a>qdc_tmr0_cap23_get_rate_float</STRONG> (ARM, 32 bytes, Stack size 8 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qdc_tmr0_cap23_get_rate_float
</UL>
<BR>[Calls]<UL><LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[25639c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_vel_rads
</UL>

<P><STRONG><a name="[2563640]"></a>qdc_tmr0_cap01_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap01_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[25dc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25dc43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[256358c]"></a>qdc_tmr0_cap23_rate_update</STRONG> (ARM, 548 bytes, Stack size 40 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = qdc_tmr0_cap23_rate_update &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2565bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
<LI><a href="#[25dc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[25dc43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[256367c]"></a>qdc_tmr0_cap01_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap01_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[25dc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[25635c8]"></a>qdc_tmr0_cap23_angle_update</STRONG> (ARM, 52 bytes, Stack size 16 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = qdc_tmr0_cap23_angle_update
</UL>
<BR>[Calls]<UL><LI><a href="#[25dc0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2563550]"></a>qdc_tmr0_init</STRONG> (ARM, 1224 bytes, Stack size 96 bytes, qdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = qdc_tmr0_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255cb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[25602ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[25618f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2561930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[256196c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25619e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2565c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2566b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[2562bb4]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[255baf8]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[2563d0c]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[255b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
<LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[255babc]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255ba80]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[255b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[255ba44]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255ba08]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[255b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[255b9cc]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b990]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[255b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[255b954]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b918]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b8dc]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b8a0]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b864]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b828]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[255b990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[255ba08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[255ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
<LI><a href="#[2563d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[255b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[255b7ec]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[255b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[255b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[255b7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[25629d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>

<P><STRONG><a name="[25629d4]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[255b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[2563a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
<LI><a href="#[2563a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_velocity
<LI><a href="#[2563ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_position
<LI><a href="#[2563af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_motor_current
<LI><a href="#[2563b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_max_exec_time
<LI><a href="#[2563b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_exec_time
<LI><a href="#[2563ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_board_status
<LI><a href="#[2563be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_battery_voltage
<LI><a href="#[2563c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_battery_power
<LI><a href="#[2563c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_battery_current
<LI><a href="#[2563c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_angle_rate
<LI><a href="#[2563cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx_angle
</UL>

<P><STRONG><a name="[255b7b0]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[255b468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[255b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[2563d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[255b774]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[2563d48]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[255b7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2563fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[2562254]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx1_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[255bb34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[255b738]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255bb34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[255b6fc]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255bb34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[255b6c0]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255bb34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[255b684]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b648]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b60c]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b5d0]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[2562b78]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[255b594]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b558]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b51c]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b4e0]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[255b4a4]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[2562290]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2564e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[255b0e4]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2562b3c]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[2562b00]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[255b0a8]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[255b06c]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[255b030]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dca54]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dca18]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc9dc]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc9a0]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2562a10]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2562a4c]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[25dc964]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc928]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc8ec]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc8b0]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[2562a88]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[2562ac4]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2566bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[25dc874]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[25dc478]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[25dc43c]"></a>__aeabi_idivmod</STRONG> (ARM, 60 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d1780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[256358c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[2563640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
</UL>

<P><STRONG><a name="[25dc310]"></a>__aeabi_ldivmod</STRONG> (ARM, 168 bytes, Stack size 32 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[255cc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[255ccc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[2561570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[2563604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
</UL>

<P><STRONG><a name="[25dc1e4]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255cc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_fixed
<LI><a href="#[255ccc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_fixed
<LI><a href="#[2561570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[2563604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[25d1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
<LI><a href="#[25d3454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25dc1a8]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25dc0b8]"></a>__aeabi_lasr</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256358c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_rate_update
<LI><a href="#[25635c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_angle_update
<LI><a href="#[2563640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_rate_update
<LI><a href="#[256367c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_angle_update
</UL>

<P><STRONG><a name="[25dc07c]"></a>_ll_sshift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[25d26f8]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[25618b8]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
</UL>

<P><STRONG><a name="[255e870]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[25618f4]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256286c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[25628a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[25628e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
<LI><a href="#[2562920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[256295c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[2562998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[256394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_pos_rads
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[255e8ac]"></a>__aeabi_fdiv</STRONG> (ARM, 140 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[2565cb0]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2565fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[25660ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[25d2464]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[25619a8]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_dadd &rArr; _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25d2338]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[25d22fc]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[256196c]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25602ec]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __aeabi_ddiv &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d2284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2565c38]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[255cc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_angle_float
<LI><a href="#[25615ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_rate_float
<LI><a href="#[25615e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_get_angle_float
<LI><a href="#[2561624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_get_rate_float
<LI><a href="#[2561a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_temp
<LI><a href="#[256286c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[2562920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[256295c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_power
<LI><a href="#[2562998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[25637a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[256394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_shaft_pos_rads
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
<LI><a href="#[25660ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[256187c]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[25628a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[25628e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[2565c74]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2561570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap23_set_angle_float
<LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2563604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_cap01_set_angle_float
<LI><a href="#[2565fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[2566124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[255cb24]"></a>__aeabi_f2uiz</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
</UL>

<P><STRONG><a name="[2560328]"></a>__aeabi_d2iz</STRONG> (ARM, 116 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[25d15a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[2561930]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[255dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
<LI><a href="#[2563dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ae_init_encoder
</UL>

<P><STRONG><a name="[25619e4]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2563550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qdc_tmr0_init
<LI><a href="#[2563910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_hip_motor_encoder_rezero
</UL>

<P><STRONG><a name="[25d17bc]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[25d1780]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[25dc43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[25d1690]"></a>__aeabi_uldivmod</STRONG> (ARM, 144 bytes, Stack size 32 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25d15a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[25dc310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[25d15a0]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2560328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[25d1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
<LI><a href="#[25d3454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25d1564]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[25d14b0]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[25d13c0]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[25d26bc]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d13c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[255e8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[256187c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[25619e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2565c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[25d2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[25d12d0]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25d2284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[25d2284]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d12d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25602ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[256196c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25d2374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[25d3454]"></a>__aeabi_d2ulz</STRONG> (ARM, 68 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d15a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25d3490]"></a>__aeabi_cdrcmple</STRONG> (ARM, 112 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25d1078]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25d19d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[25d1a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[25d103c]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[25d0b50]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25d0b14]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[256664c]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qdc_2x_fiq_handler.o(FIQ_HANDLER))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25d3d00]"></a>__0printf</STRONG> (ARM, 36 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d3cc4]"></a>__1printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25d3c88]"></a>__2printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2566ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d3c4c]"></a>__c89printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25d3c10]"></a>printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[25d3aa8]"></a>__0sprintf</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d3e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d3a6c]"></a>__1sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25d3a30]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[255dda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[255dde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[255de20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int
<LI><a href="#[255de5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int2
</UL>

<P><STRONG><a name="[25d39f4]"></a>__c89sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[25d39b8]"></a>sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[255b468]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[255b7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[255b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[25d0cb8]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d0cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d0cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[25d0c7c]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[25d0c40]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[25668e0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25668e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25668e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25668a4]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25668a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25668a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2566868]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2566868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2566868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[256682c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[256682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[256682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25667f0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[25667f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25667f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[255c458]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[255c41c]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[25d3f94]"></a>_fp_digits</STRONG> (ARM, 612 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25602ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[256196c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[25619a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25d1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25d3454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[25d3490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d3f58]"></a>_printf_core</STRONG> (ARM, 2724 bytes, Stack size 152 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25d1780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[25d3ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25d3f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[25d3f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[25d3aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[25d3d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[25d3f1c]"></a>_printf_post_padding</STRONG> (ARM, 68 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d3ee0]"></a>_printf_pre_padding</STRONG> (ARM, 80 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25d3f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25d3e68]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[25d3aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[25d2734]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[25d26bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[255e870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[25618b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[25d26f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[25d2374]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _double_addcore &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d15a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[25d2284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[25dc1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[25619a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25d22fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[25d2338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
