<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Int_RAM\LPC3250_Main_Brain.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Int_RAM\LPC3250_Main_Brain.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed Jun 16 13:21:44 2010
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mb_estimator_update &rArr; mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float &rArr; mb_io_get_time
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b6b568]">Reset_Handler</a>
 <LI><a href="#[b6b748]">Undef_Handler</a>
 <LI><a href="#[b6b70c]">SWI_Handler</a>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>
 <LI><a href="#[b6b694]">DAbt_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b6b748]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b748]">Undef_Handler</a><BR>
 <LI><a href="#[b6b70c]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b70c]">SWI_Handler</a><BR>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b6d0]">PAbt_Handler</a><BR>
 <LI><a href="#[b6b694]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b6b694]">DAbt_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b65640]">error_ulvoid</a>
 <LI><a href="#[b6b568]">Reset_Handler</a>
 <LI><a href="#[b6b748]">Undef_Handler</a>
 <LI><a href="#[b6b70c]">SWI_Handler</a>
 <LI><a href="#[b6b6d0]">PAbt_Handler</a>
 <LI><a href="#[b6b694]">DAbt_Handler</a>
 <LI><a href="#[b6b4f0]">IRQ_Handler</a>
 <LI><a href="#[b6b52c]">FIQ_Handler</a>
 <LI><a href="#[1447640]">__main</a>
 <LI><a href="#[b68bb0]">main</a>
 <LI><a href="#[b69204]">mb_io_get_float</a>
 <LI><a href="#[b5deb8]">ACT_FI_stance()</a>
 <LI><a href="#[b5dc24]">get_foot_inner_input(int*, int)</a>
 <LI><a href="#[144d8ec]">ACT_FO_stance()</a>
 <LI><a href="#[144d928]">ACT_FO_stance_entry()</a>
 <LI><a href="#[144d8b0]">ACT_FO_prepush_entry()</a>
 <LI><a href="#[144d5e0]">get_foot_outer_input(int*, int)</a>
 <LI><a href="#[144c104]">ACT_HI_preswing()</a>
 <LI><a href="#[144c014]">ACT_HI_aftermid()</a>
 <LI><a href="#[144c050]">ACT_HI_aftermid_entry()</a>
 <LI><a href="#[144bfd8]">ACT_HO_preswing()</a>
 <LI><a href="#[144bf24]">ACT_HO_aftermid_entry()</a>
 <LI><a href="#[144bd44]">get_hip_sensor_input(int*, int)</a>
 <LI><a href="#[144a4e4]">get_steering_input(int*, int)</a>
 <LI><a href="#[14499a4]">get_system_init_conditions_input(int*, int)</a>
 <LI><a href="#[1448c84]">ACTION_UI_calibrate()</a>
 <LI><a href="#[1448bd0]">ACTION_UI_standby()</a>
 <LI><a href="#[1448b58]">get_UI_conditions_input(int*, int)</a>
 <LI><a href="#[1566d90]">__default_terminate_handler()</a>
 <LI><a href="#[1566610]">__I$use$semihosting</a>
 <LI><a href="#[1444ea4]">__default_new_handler()</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b6945c]">mb_bt_pop_receive_packets</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b695c4]">a9_bt_dma_receive</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b696b4]">mb_create_display_data_lists</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b693e4]">mb_distribute_error_frames</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b68f70]">mb_test_ui_board1</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69330]">mb_error_update</a>
 <LI><a href="#[b68fac]">mb_task_heartbeat</a>
 <LI><a href="#[b6954c]">a9_dn_ssp_parse</a>
 <LI><a href="#[b692f4]">mb_estimator_update</a>
 <LI><a href="#[b69510]">a9_dn_ssp_send_data</a>
 <LI><a href="#[b694d4]">a9_dn_update_leds</a>
 <LI><a href="#[b6927c]">mb_fsm_run</a>
 <LI><a href="#[b69678]">mb_send_data</a>
 <LI><a href="#[b69894]">mb_update_execution_time</a>
 <LI><a href="#[b65640]">error_ulvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b6b568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[1447640]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1447028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1562d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1562d58]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1447640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1562d1c]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1447028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1562ce0]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1562e84]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1562e48]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[1562b3c]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1567aec]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[15654b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14443a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[14421e0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1443a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14418f8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1441970]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[1441d30]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1441bc8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1441808]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1441880]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1441c40]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1441b50]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[144212c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1441f88]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[1441f10]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1441e98]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1441e20]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1441da8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[144203c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[14417cc]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[1441cb8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1441ad8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[14420b4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1563ab4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1565260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
<LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[156475c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[156457c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1564540]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15646a8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1564810]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1564630]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[1447028]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1447640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1562d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1444454]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[14440d0]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1568f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14443a0]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1567aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[14443dc]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[14442ec]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[1568848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[1444328]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1566520]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1568848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[1565260]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1563ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[156529c]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1565224]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1566700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b6b5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size 0 bytes, lpc32x0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1568f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1568cbc]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[b69df8]"></a>mb_setup_hardware</STRONG> (ARM, 516 bytes, Stack size 0 bytes, mb_hardware_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b698d0]"></a>mb_get_timestamp</STRONG> (ARM, 16 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_get_timestamp &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[b69894]"></a>mb_update_execution_time</STRONG> (ARM, 32 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_update_execution_time &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b69420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_clock_get_execution_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69858]"></a>get_io_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_inner_input(int*, int)
<LI><a href="#[b5dcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[b5dd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown_entry()
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[b5dd8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup_entry()
<LI><a href="#[b5ddc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush()
<LI><a href="#[b5de40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[b5de7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[b5deb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[b5def4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[b5df30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[14499a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_init_conditions_input(int*, int)
<LI><a href="#[1449f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1449fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1449ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[144a4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_steering_input(int*, int)
<LI><a href="#[144bd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hip_sensor_input(int*, int)
<LI><a href="#[144be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold_entry()
<LI><a href="#[144beac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold_entry()
<LI><a href="#[144bee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[144bf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[144bf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[144bf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[144c014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[144c050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[144c08c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[144c0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[144c140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[144d5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_foot_outer_input(int*, int)
<LI><a href="#[144d694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[144d70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[144d748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown_entry()
<LI><a href="#[144d784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[144d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup_entry()
<LI><a href="#[144d7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush()
<LI><a href="#[144d874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[144d8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[144d8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[144d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
<LI><a href="#[144d964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[b6981c]"></a>set_io_float</STRONG> (ARM, 36 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stop()
<LI><a href="#[b5dcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[b5dd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown_entry()
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[b5dd8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup_entry()
<LI><a href="#[b5ddc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush()
<LI><a href="#[b5de04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_afterpush_entry()
<LI><a href="#[b5de40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush()
<LI><a href="#[b5de7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_prepush_entry()
<LI><a href="#[b5deb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[b5def4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
<LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
<LI><a href="#[1449a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_run()
<LI><a href="#[1449a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_SI_system_start()
<LI><a href="#[1449ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_stop()
<LI><a href="#[1449f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegswing()
<LI><a href="#[1449fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegback_entry()
<LI><a href="#[1449ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_S_innerlegstance()
<LI><a href="#[144bdbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_H_stop()
<LI><a href="#[144be34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_ehold_entry()
<LI><a href="#[144beac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_ehold_entry()
<LI><a href="#[144bee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid()
<LI><a href="#[144bf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_aftermid_entry()
<LI><a href="#[144bf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid()
<LI><a href="#[144bf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_premid_entry()
<LI><a href="#[144bfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HO_preswing()
<LI><a href="#[144c014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid()
<LI><a href="#[144c050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_aftermid_entry()
<LI><a href="#[144c08c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid()
<LI><a href="#[144c0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_premid_entry()
<LI><a href="#[144c104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_preswing()
<LI><a href="#[144c140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_HI_starthold()
<LI><a href="#[144d658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stop()
<LI><a href="#[144d694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_startstance()
<LI><a href="#[144d70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[144d748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown_entry()
<LI><a href="#[144d784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[144d7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup_entry()
<LI><a href="#[144d7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush()
<LI><a href="#[144d838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_afterpush_entry()
<LI><a href="#[144d874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush()
<LI><a href="#[144d8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_prepush_entry()
<LI><a href="#[144d8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[144d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
</UL>

<P><STRONG><a name="[b697e0]"></a>get_io_ul</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b69150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[144866c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
<LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
</UL>

<P><STRONG><a name="[b697a4]"></a>set_io_ul</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
<LI><a href="#[1448cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1448d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[1448d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1448db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
</UL>

<P><STRONG><a name="[b69768]"></a>mark_as_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mark_as_read &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
</UL>

<P><STRONG><a name="[b6972c]"></a>data_was_read</STRONG> (ARM, 28 bytes, Stack size 16 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = data_was_read &rArr; mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
</UL>

<P><STRONG><a name="[b696f0]"></a>mb_read_error</STRONG> (ARM, 24 bytes, Stack size 8 bytes, mb_software_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b693a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b696b4]"></a>mb_create_display_data_lists</STRONG> (ARM, 36 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_create_display_data_lists &rArr; mb_bt_create_data_lists
</UL>
<BR>[Calls]<UL><LI><a href="#[b69498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69678]"></a>mb_send_data</STRONG> (ARM, 28 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mb_send_data &rArr; a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b69600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b6963c]"></a>mb_setup_software</STRONG> (ARM, 716 bytes, Stack size 8 bytes, mb_software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mb_setup_software &rArr; mb_fsm_init &rArr; def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b68fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_set_heartbeat_period_ms
<LI><a href="#[b69024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_init
<LI><a href="#[b69114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_init
<LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[b6936c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_init
<LI><a href="#[b69588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_init_tx_list
<LI><a href="#[b696b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b68bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6b4f0]"></a>IRQ_Handler</STRONG> (ARM, 72 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ_Handler &rArr; a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b68ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
<LI><a href="#[b68afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b68b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b52c]"></a>FIQ_Handler</STRONG> (ARM, 16 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FIQ_Handler &rArr; a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b68b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b68bb0]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; mb_setup_software &rArr; mb_fsm_init &rArr; def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b68a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_run
<LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
<LI><a href="#[b69df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_hardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[b68f70]"></a>mb_test_ui_board1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b684e4]"></a>labview_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b684a8]"></a>lcd_error_push</STRONG> (ARM, 260 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b6846c]"></a>lcd_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b68430]"></a>labview_error_pop</STRONG> (ARM, 148 bytes, Stack size 0 bytes, mb_data_nexus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
</UL>

<P><STRONG><a name="[b693e4]"></a>mb_distribute_error_frames</STRONG> (ARM, 656 bytes, Stack size 8 bytes, mb_data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_distribute_error_frames &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b683f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b68430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_pop
<LI><a href="#[b6846c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_pop
<LI><a href="#[b684a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_error_push
<LI><a href="#[b684e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;labview_error_push
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[b693a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69024]"></a>mb_schedule_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67e54]"></a>mb_schedule_tick</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b663d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_clock_tick
<LI><a href="#[b68ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_timer0_isr
</UL>

<P><STRONG><a name="[b68a84]"></a>mb_schedule_run</STRONG> (ARM, 152 bytes, Stack size 8 bytes, mb_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_schedule_run
</UL>
<BR>[Called By]<UL><LI><a href="#[b68bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b677c4]"></a>a9_ssp_synchronize_arm7</STRONG> (ARM, 356 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text), UNUSED)

<P><STRONG><a name="[b69588]"></a>a9_dn_ssp_init_tx_list</STRONG> (ARM, 312 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67788]"></a>a9_dn_red_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
<LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b6954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b695c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b6774c]"></a>a9_dn_green_led_blink</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[b694d4]"></a>a9_dn_update_leds</STRONG> (ARM, 132 bytes, Stack size 0 bytes, mb_ssp_dma.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69510]"></a>a9_dn_ssp_send_data</STRONG> (ARM, 912 bytes, Stack size 48 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a9_dn_ssp_send_data &rArr; mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b67788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b6954c]"></a>a9_dn_ssp_parse</STRONG> (ARM, 584 bytes, Stack size 24 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_dn_ssp_parse &rArr; mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b6774c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_green_led_blink
<LI><a href="#[b67788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b683f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b68b74]"></a>a9_dn_ssel_dma_isr</STRONG> (ARM, 680 bytes, Stack size 16 bytes, mb_ssp_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a9_dn_ssel_dma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b676d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred_fiq
<LI><a href="#[b67788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>

<P><STRONG><a name="[b68fe8]"></a>mb_set_heartbeat_period_ms</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67224]"></a>mb_hb_toggle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, mb_heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_task_heartbeat
</UL>

<P><STRONG><a name="[b68fac]"></a>mb_task_heartbeat</STRONG> (ARM, 92 bytes, Stack size 4 bytes, mb_heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mb_task_heartbeat
</UL>
<BR>[Calls]<UL><LI><a href="#[b67224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hb_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b69498]"></a>mb_bt_create_data_lists</STRONG> (ARM, 180 bytes, Stack size 40 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mb_bt_create_data_lists
</UL>
<BR>[Called By]<UL><LI><a href="#[b696b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_create_display_data_lists
</UL>

<P><STRONG><a name="[b668c4]"></a>a9_bt_push_io_data_point</STRONG> (ARM, 1052 bytes, Stack size 32 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a9_bt_push_io_data_point
</UL>
<BR>[Called By]<UL><LI><a href="#[b69600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
</UL>

<P><STRONG><a name="[b69600]"></a>a9_bt_data_sender</STRONG> (ARM, 976 bytes, Stack size 48 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = a9_bt_data_sender &rArr; a9_bt_push_io_data_point
</UL>
<BR>[Calls]<UL><LI><a href="#[b668c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_push_io_data_point
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b69678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_data
</UL>

<P><STRONG><a name="[b66888]"></a>a9_bt_start_ch3_dma_transfer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, mb_bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_software_int_isr
<LI><a href="#[b68b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_gpdma_isr
</UL>

<P><STRONG><a name="[b68b38]"></a>a9_gpdma_isr</STRONG> (ARM, 44 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_gpdma_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b66888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b68afc]"></a>a9_software_int_isr</STRONG> (ARM, 40 bytes, Stack size 4 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = a9_software_int_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b66888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_start_ch3_dma_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b695c4]"></a>a9_bt_dma_receive</STRONG> (ARM, 812 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a9_bt_dma_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b67788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b6945c]"></a>mb_bt_pop_receive_packets</STRONG> (ARM, 820 bytes, Stack size 24 bytes, mb_bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mb_bt_pop_receive_packets &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b67788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_red_led_blink
<LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b663d8]"></a>a9_clock_tick</STRONG> (ARM, 100 bytes, Stack size 8 bytes, a9_clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>

<P><STRONG><a name="[b69420]"></a>mb_clock_get_execution_time</STRONG> (ARM, 36 bytes, Stack size 0 bytes, a9_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b69894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b68ac0]"></a>a9_timer0_isr</STRONG> (ARM, 56 bytes, Stack size 8 bytes, a9_clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = a9_timer0_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[b67e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_schedule_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>

<P><STRONG><a name="[b691c8]"></a>mb_io_get_pointer</STRONG> (ARM, 44 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b6954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b69600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b696f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b690d8]"></a>mb_io_mark_as_read</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_mark_as_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b69600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b69768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
</UL>

<P><STRONG><a name="[b65f64]"></a>mb_io_mark_as_unread</STRONG> (ARM, 68 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[b683f4]"></a>mb_io_mark_as_unread_by_all</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_mark_as_unread_by_all
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b6954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
</UL>

<P><STRONG><a name="[b69240]"></a>mb_io_data_was_read</STRONG> (ARM, 76 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b69600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_data_sender
<LI><a href="#[b6972c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
</UL>

<P><STRONG><a name="[b69204]"></a>mb_io_get_float</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b63c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_commands_to_look_for_heelstrike
<LI><a href="#[b63cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_midstance_legrate
<LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_FootStatus
<LI><a href="#[b63e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_new_hip_rate_filter
<LI><a href="#[b63ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.text)
</UL>
<P><STRONG><a name="[b69150]"></a>mb_io_get_ul</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b697e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>

<P><STRONG><a name="[b65f28]"></a>mb_io_get_sl</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>

<P><STRONG><a name="[b6918c]"></a>mb_io_get_time</STRONG> (ARM, 48 bytes, Stack size 8 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b63e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_new_hip_rate_filter
<LI><a href="#[b63ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b65eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b698d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
</UL>

<P><STRONG><a name="[b6909c]"></a>mb_io_set_float</STRONG> (ARM, 92 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b63c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_commands_to_look_for_heelstrike
<LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b63e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_FootStatus
<LI><a href="#[b63e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_new_hip_rate_filter
<LI><a href="#[b63ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_execution_time
</UL>

<P><STRONG><a name="[b69060]"></a>mb_io_set_ul</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>

<P><STRONG><a name="[b65eec]"></a>mb_io_set_sl</STRONG> (ARM, 84 bytes, Stack size 16 bytes, mb_io_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>

<P><STRONG><a name="[b65eb0]"></a>mb_io_set_time</STRONG> (ARM, 72 bytes, Stack size 16 bytes, mb_io_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_io_set_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b67710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[b63e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_new_hip_rate_filter
<LI><a href="#[b63ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
</UL>

<P><STRONG><a name="[b69114]"></a>mb_io_init</STRONG> (ARM, 164 bytes, Stack size 0 bytes, mb_io_data.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b656f4]"></a>mb_error_pop</STRONG> (ARM, 168 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b693a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_get_frame
</UL>

<P><STRONG><a name="[b693a8]"></a>mb_error_get_frame</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mb_error_get_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[b656f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[b693e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_distribute_error_frames
<LI><a href="#[b696f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_read_error
</UL>

<P><STRONG><a name="[b6936c]"></a>mb_error_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b67710]"></a>mb_error_occurred</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b65eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b65eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_sl
<LI><a href="#[b65f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_sl
<LI><a href="#[b65f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread
<LI><a href="#[b683f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_unread_by_all
<LI><a href="#[b69060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_ul
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b690d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_mark_as_read
<LI><a href="#[b69150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_ul
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b691c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_pointer
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
<LI><a href="#[b69240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_data_was_read
<LI><a href="#[b6945c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_bt_pop_receive_packets
<LI><a href="#[b69510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_send_data
<LI><a href="#[b6954c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssp_parse
<LI><a href="#[b695c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_bt_dma_receive
</UL>

<P><STRONG><a name="[b656b8]"></a>mb_error_occurred_irq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text), UNUSED)

<P><STRONG><a name="[b676d4]"></a>mb_error_occurred_fiq</STRONG> (ARM, 68 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b68b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a9_dn_ssel_dma_isr
</UL>

<P><STRONG><a name="[b6567c]"></a>mb_error_push</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_error_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b69330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_update
</UL>

<P><STRONG><a name="[b69330]"></a>mb_error_update</STRONG> (ARM, 224 bytes, Stack size 16 bytes, mb_error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_error_update &rArr; mb_error_push
</UL>
<BR>[Calls]<UL><LI><a href="#[b6567c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_error_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b65640]"></a>error_ulvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mb_error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mb_error.o(.data)
</UL>
<P><STRONG><a name="[b63f0c]"></a>mb_imu_rate_filter</STRONG> (ARM, 556 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_imu_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63ed0]"></a>mb_hip_rate_filter</STRONG> (ARM, 484 bytes, Stack size 40 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mb_hip_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63e94]"></a>mb_new_hip_rate_filter</STRONG> (ARM, 852 bytes, Stack size 64 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mb_new_hip_rate_filter &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b65eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_time
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63e58]"></a>mb_update_FootStatus</STRONG> (ARM, 968 bytes, Stack size 56 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mb_update_FootStatus &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63e1c]"></a>mb_time_since_last_HS</STRONG> (ARM, 112 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_time_since_last_HS &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63de0]"></a>greg_cos</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63da4]"></a>greg_atan</STRONG> (ARM, 252 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63d68]"></a>greg_sqrt</STRONG> (ARM, 240 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63d2c]"></a>greg_sin</STRONG> (ARM, 328 bytes, Stack size 0 bytes, mb_estimator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
</UL>

<P><STRONG><a name="[b63cf0]"></a>mb_update_abs_leg_and_ankle_angles</STRONG> (ARM, 1512 bytes, Stack size 128 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b63d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sin
<LI><a href="#[b63d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_sqrt
<LI><a href="#[b63da4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_atan
<LI><a href="#[b63de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;greg_cos
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b6918c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_time
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b63cb4]"></a>mb_update_midstance_legrate</STRONG> (ARM, 144 bytes, Stack size 8 bytes, mb_estimator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>

<P><STRONG><a name="[b63c78]"></a>mb_send_commands_to_look_for_heelstrike</STRONG> (ARM, 248 bytes, Stack size 8 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mb_send_commands_to_look_for_heelstrike &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[b69204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_get_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[b692f4]"></a>mb_estimator_update</STRONG> (ARM, 104 bytes, Stack size 304 bytes, mb_estimator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mb_estimator_update &rArr; mb_update_abs_leg_and_ankle_angles &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b63c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_send_commands_to_look_for_heelstrike
<LI><a href="#[b63cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_abs_leg_and_ankle_angles
<LI><a href="#[b63e1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_time_since_last_HS
<LI><a href="#[b63e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_update_FootStatus
<LI><a href="#[b63e94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_new_hip_rate_filter
<LI><a href="#[b63ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_hip_rate_filter
<LI><a href="#[b63f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_imu_rate_filter
<LI><a href="#[b6909c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_io_set_float
<LI><a href="#[14483d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[b5df30]"></a>FI_command_current_limiter(float, float)</STRONG> (ARM, 172 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FI_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipdown()
<LI><a href="#[b5dd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_flipup()
<LI><a href="#[b5deb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance()
<LI><a href="#[b5def4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FI_stance_entry()
</UL>

<P><STRONG><a name="[b5def4]"></a>ACT_FI_stance_entry()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5df30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5deb8]"></a>ACT_FI_stance()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FI_stance() &rArr; FI_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b5df30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[b5de7c]"></a>ACT_FI_prepush_entry()</STRONG> (ARM, 224 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5de40]"></a>ACT_FI_prepush()</STRONG> (ARM, 144 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5de04]"></a>ACT_FI_afterpush_entry()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[b5ddc8]"></a>ACT_FI_afterpush()</STRONG> (ARM, 112 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5dd8c]"></a>ACT_FI_flipup_entry()</STRONG> (ARM, 60 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5dd50]"></a>ACT_FI_flipup()</STRONG> (ARM, 72 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5df30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5dd14]"></a>ACT_FI_flipdown_entry()</STRONG> (ARM, 60 bytes, Stack size 16 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5dcd8]"></a>ACT_FI_flipdown()</STRONG> (ARM, 132 bytes, Stack size 32 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5df30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FI_command_current_limiter(float, float)
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[b5dc9c]"></a>ACT_FI_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_inner_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[b5dc60]"></a>def_foot_inner_fsm(fsm*)</STRONG> (ARM, 484 bytes, Stack size 120 bytes, foot_inner_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[b5dc24]"></a>get_foot_inner_input(int*, int)</STRONG> (ARM, 440 bytes, Stack size 24 bytes, foot_inner_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_foot_inner_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_inner_fsm.o(.text)
</UL>
<P><STRONG><a name="[144d964]"></a>FO_command_current_limiter(float, float)</STRONG> (ARM, 164 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[144d70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipdown()
<LI><a href="#[144d784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_flipup()
<LI><a href="#[144d8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance()
<LI><a href="#[144d928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACT_FO_stance_entry()
</UL>

<P><STRONG><a name="[144d928]"></a>ACT_FO_stance_entry()</STRONG> (ARM, 140 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FO_stance_entry() &rArr; FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[144d964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[144d8ec]"></a>ACT_FO_stance()</STRONG> (ARM, 100 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACT_FO_stance() &rArr; FO_command_current_limiter(float, float) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[144d964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[144d8b0]"></a>ACT_FO_prepush_entry()</STRONG> (ARM, 216 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_FO_prepush_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[144d874]"></a>ACT_FO_prepush()</STRONG> (ARM, 144 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144d838]"></a>ACT_FO_afterpush_entry()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[144d7fc]"></a>ACT_FO_afterpush()</STRONG> (ARM, 112 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144d7c0]"></a>ACT_FO_flipup_entry()</STRONG> (ARM, 60 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144d784]"></a>ACT_FO_flipup()</STRONG> (ARM, 72 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[144d964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[144d748]"></a>ACT_FO_flipdown_entry()</STRONG> (ARM, 60 bytes, Stack size 16 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144d70c]"></a>ACT_FO_flipdown()</STRONG> (ARM, 132 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[144d964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FO_command_current_limiter(float, float)
</UL>

<P><STRONG><a name="[144d6d0]"></a>ACT_FO_startstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, foot_outer_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144d694]"></a>ACT_FO_startstance()</STRONG> (ARM, 124 bytes, Stack size 32 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144d658]"></a>ACT_FO_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, foot_outer_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[144d61c]"></a>def_foot_outer_fsm(fsm*)</STRONG> (ARM, 572 bytes, Stack size 120 bytes, foot_outer_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_foot_outer_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[144d5e0]"></a>get_foot_outer_input(int*, int)</STRONG> (ARM, 492 bytes, Stack size 24 bytes, foot_outer_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_foot_outer_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foot_outer_fsm.o(.text)
</UL>
<P><STRONG><a name="[b5dbe8]"></a>copy(fsm*, fsm*)</STRONG> (ARM, 672 bytes, Stack size 16 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = copy(fsm*, fsm*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1447370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[b5da08]"></a>fsm::fsm(int, int, int)</STRONG> (ARM, 576 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1447370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[144cdac]"></a>fsm::fsm__sub_object(int, int, int)</STRONG> (ARM, 0 bytes, Stack size 24 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[144cd70]"></a>fsm::fsm()</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[144cd34]"></a>fsm::fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b5d9cc]"></a>fsm::~fsm()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fsm::~fsm() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14474d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*) (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[144ccf8]"></a>fsm::~fsm__sub_object()</STRONG> (ARM, 0 bytes, Stack size 8 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[144ccbc]"></a>fsm::state_def(int, int(*)())</STRONG> (ARM, 44 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b5dbac]"></a>fsm::exit_state_def(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144cc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)
<LI><a href="#[144cc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[144cc80]"></a>fsm::state_def(int, int(*)(), int)</STRONG> (ARM, 68 bytes, Stack size 20 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[144cc44]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)(), int)</STRONG> (ARM, 124 bytes, Stack size 28 bytes, fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
</UL>

<P><STRONG><a name="[b5da80]"></a>fsm::state_def(int, int(*)(), int(*)(), int(*)())</STRONG> (ARM, 84 bytes, Stack size 4 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fsm::state_def(int, int(*)(), int(*)(), int(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[b5da44]"></a>fsm::trans_def(int, int, int)</STRONG> (ARM, 84 bytes, Stack size 8 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm::trans_def(int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[b5db70]"></a>fsm::set_sensor_input_function(void(*)(int*, int))</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[b5dabc]"></a>fsm::set_name(char*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[b5db34]"></a>fsm::print_state_transition_matrix()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144cc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[144cc08]"></a>fsm::check(int)</STRONG> (ARM, 256 bytes, Stack size 24 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
<LI><a href="#[144cbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[144cbcc]"></a>fsm::run()</STRONG> (ARM, 1256 bytes, Stack size 416 bytes, fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[144cc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6927c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_run
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[144cb90]"></a>fsm::get_current_state()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[144cb54]"></a>fsm::ready_to_exit()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[144cb18]"></a>fsm::stop()</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[b5daf8]"></a>fsm::set_state_communication_variable(int*)</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>

<P><STRONG><a name="[144cadc]"></a>fsm::print_transition_insertion_history()</STRONG> (ARM, 52 bytes, Stack size 0 bytes, fsm.o(.text), UNUSED)

<P><STRONG><a name="[144c17c]"></a>ACT_HI_starthold_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144c140]"></a>ACT_HI_starthold()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144c104]"></a>ACT_HI_preswing()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HI_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144c0c8]"></a>ACT_HI_premid_entry()</STRONG> (ARM, 72 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144c08c]"></a>ACT_HI_premid()</STRONG> (ARM, 108 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144c050]"></a>ACT_HI_aftermid_entry()</STRONG> (ARM, 484 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144c014]"></a>ACT_HI_aftermid()</STRONG> (ARM, 152 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HI_aftermid() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144bfd8]"></a>ACT_HO_preswing()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ACT_HO_preswing() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144bf9c]"></a>ACT_HO_premid_entry()</STRONG> (ARM, 88 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144bf60]"></a>ACT_HO_premid()</STRONG> (ARM, 108 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144bf24]"></a>ACT_HO_aftermid_entry()</STRONG> (ARM, 444 bytes, Stack size 16 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ACT_HO_aftermid_entry() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144bee8]"></a>ACT_HO_aftermid()</STRONG> (ARM, 144 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144beac]"></a>ACT_HI_ehold_entry()</STRONG> (ARM, 116 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144be70]"></a>ACT_HI_ehold()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144be34]"></a>ACT_HO_ehold_entry()</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[144bdf8]"></a>ACT_HO_ehold()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, hip_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144bdbc]"></a>ACT_H_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hip_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[144bd80]"></a>def_hip_fsm(fsm*)</STRONG> (ARM, 688 bytes, Stack size 120 bytes, hip_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_hip_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[144bd44]"></a>get_hip_sensor_input(int*, int)</STRONG> (ARM, 644 bytes, Stack size 24 bytes, hip_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_hip_sensor_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hip_fsm.o(.text)
</UL>
<P><STRONG><a name="[144adcc]"></a>init_global_comm()</STRONG> (ARM, 28 bytes, Stack size 4 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_global_comm()
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[b692b8]"></a>mb_fsm_init</STRONG> (ARM, 348 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mb_fsm_init &rArr; def_foot_inner_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_inner_fsm(fsm*)
<LI><a href="#[1447190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
<LI><a href="#[144ad18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_system_init_fsm(fsm*)
<LI><a href="#[144ad54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_steering_fsm(fsm*)
<LI><a href="#[144ad90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_UI_fsm(fsm*)
<LI><a href="#[144adcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_global_comm()
<LI><a href="#[144bd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_hip_fsm(fsm*)
<LI><a href="#[144cc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::check(int)
<LI><a href="#[144cd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm()
<LI><a href="#[144d61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_foot_outer_fsm(fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6963c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_setup_software
</UL>

<P><STRONG><a name="[b6927c]"></a>mb_fsm_run</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mb_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mb_fsm_run &rArr; fsm::run() &rArr; fsm::check(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[144cbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[144a4e4]"></a>get_steering_input(int*, int)</STRONG> (ARM, 348 bytes, Stack size 24 bytes, steering_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_steering_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> steering_fsm.o(.text)
</UL>
<P><STRONG><a name="[144a0ac]"></a>ACT_S_innerlegfront_entry()</STRONG> (ARM, 24 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144a070]"></a>ACT_S_innerlegfront()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144a034]"></a>ACT_S_innerlegstance_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1449ff8]"></a>ACT_S_innerlegstance()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1449fbc]"></a>ACT_S_innerlegback_entry()</STRONG> (ARM, 260 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1449f80]"></a>ACT_S_innerlegback()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1449f44]"></a>ACT_S_innerlegswing_entry()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, steering_fsm.o(.text), UNUSED)

<P><STRONG><a name="[1449f08]"></a>ACT_S_innerlegswing()</STRONG> (ARM, 52 bytes, Stack size 16 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>

<P><STRONG><a name="[1449ecc]"></a>ACT_S_stop()</STRONG> (ARM, 48 bytes, Stack size 8 bytes, steering_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[144ad54]"></a>def_steering_fsm(fsm*)</STRONG> (ARM, 512 bytes, Stack size 120 bytes, steering_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_steering_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[1449a58]"></a>ACTION_SI_system_start()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[1449a1c]"></a>ACTION_SI_system_run()</STRONG> (ARM, 24 bytes, Stack size 8 bytes, system_init_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>

<P><STRONG><a name="[14499e0]"></a>ACTION_SI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, system_init_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144ad18]"></a>def_system_init_fsm(fsm*)</STRONG> (ARM, 260 bytes, Stack size 120 bytes, system_init_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_system_init_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[14499a4]"></a>get_system_init_conditions_input(int*, int)</STRONG> (ARM, 200 bytes, Stack size 16 bytes, system_init_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_system_init_conditions_input(int*, int) &rArr; get_io_float &rArr; mb_io_get_float
</UL>
<BR>[Calls]<UL><LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_init_fsm.o(.text)
</UL>
<P><STRONG><a name="[1448dec]"></a>motors_off()</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = motors_off() &rArr; set_io_float &rArr; mb_io_set_float &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
</UL>

<P><STRONG><a name="[1448db0]"></a>set_UI_LCD(char*, int)</STRONG> (ARM, 76 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LCD(char*, int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1448d74]"></a>clear_UI_LCD(int)</STRONG> (ARM, 32 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LCD(int) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1448d38]"></a>set_UI_LED(int, char)</STRONG> (ARM, 192 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1448cfc]"></a>detect_error()</STRONG> (ARM, 280 bytes, Stack size 16 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = detect_error() &rArr; data_was_read &rArr; mb_io_data_was_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6972c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_was_read
<LI><a href="#[b69768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mark_as_read
<LI><a href="#[b697e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1448cc0]"></a>clear_UI_LED()</STRONG> (ARM, 80 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clear_UI_LED() &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[1448c84]"></a>ACTION_UI_calibrate()</STRONG> (ARM, 324 bytes, Stack size 8 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ACTION_UI_calibrate() &rArr; set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b698d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1448cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[1448d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[1448d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1448db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[1448c48]"></a>int2ascii(int)</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ui_fsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[1448c0c]"></a>ACTION_UI_walk()</STRONG> (ARM, 812 bytes, Stack size 48 bytes, ui_fsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b6981c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_float
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[b698d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14480cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1448c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[1448cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[1448d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[1448db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[144cbcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::run()
</UL>

<P><STRONG><a name="[1448bd0]"></a>ACTION_UI_standby()</STRONG> (ARM, 1072 bytes, Stack size 48 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ACTION_UI_standby() &rArr; set_UI_LED(int, char) &rArr; set_io_ul &rArr; mb_io_set_ul &rArr; mb_io_get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b697a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_io_ul
<LI><a href="#[b69858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_float
<LI><a href="#[b698d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_get_timestamp
<LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[14480cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1448c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2ascii(int)
<LI><a href="#[1448cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LED()
<LI><a href="#[1448cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_error()
<LI><a href="#[1448d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LED(int, char)
<LI><a href="#[1448d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_UI_LCD(int)
<LI><a href="#[1448db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_UI_LCD(char*, int)
<LI><a href="#[1448dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_off()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[1448b94]"></a>ACTION_UI_stop()</STRONG> (ARM, 8 bytes, Stack size 0 bytes, ui_fsm.o(.text), UNUSED)

<P><STRONG><a name="[144ad90]"></a>def_UI_fsm(fsm*)</STRONG> (ARM, 472 bytes, Stack size 120 bytes, ui_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = def_UI_fsm(fsm*) &rArr; fsm::fsm(int, int, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm()
<LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int)
<LI><a href="#[b5da44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::trans_def(int, int, int)
<LI><a href="#[b5da80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::state_def(int, int(*)(), int(*)(), int(*)())
<LI><a href="#[b5dabc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_name(char*)
<LI><a href="#[b5daf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_state_communication_variable(int*)
<LI><a href="#[b5db34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::print_state_transition_matrix()
<LI><a href="#[b5db70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::set_sensor_input_function(void(*)(int*, int))
<LI><a href="#[b5dbac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::exit_state_def(int)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init
</UL>

<P><STRONG><a name="[144866c]"></a>detect_UI_button_input(int)</STRONG> (ARM, 52 bytes, Stack size 16 bytes, ui_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[b697e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_ul
</UL>
<BR>[Called By]<UL><LI><a href="#[1448b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_UI_conditions_input(int*, int)
</UL>

<P><STRONG><a name="[1448b58]"></a>get_UI_conditions_input(int*, int)</STRONG> (ARM, 216 bytes, Stack size 16 bytes, ui_fsm_conditions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_UI_conditions_input(int*, int) &rArr; detect_UI_button_input(int) &rArr; get_io_ul &rArr; mb_io_get_ul
</UL>
<BR>[Calls]<UL><LI><a href="#[144866c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_UI_button_input(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_fsm.o(.text)
</UL>
<P><STRONG><a name="[14483d8]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b692f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_estimator_update
</UL>

<P><STRONG><a name="[144839c]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1448360]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1448324]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1448108]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[14480cc]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
</UL>

<P><STRONG><a name="[14477a8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[144776c]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1447730]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1446a4c]"></a>__rt_new_handler_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1447190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned) (via BLX)
</UL>

<P><STRONG><a name="[1446740]"></a>malloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1443a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[1443d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1447190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[156565c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1566d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1444ea4]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1441010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[1444850]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1444814]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1568f8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14447d8]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1443d10]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14433b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1443a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
<LI><a href="#[1446740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>

<P><STRONG><a name="[1443c20]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1443be4]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1443af4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1443ab8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1443a7c]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1568a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1446740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1443a40]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15682a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1443a04]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14434dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1443d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[15682a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1568a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[14421e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[14434dc]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1443a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14434a0]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[14433b0]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1443d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1445084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1568a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[1441010]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1566d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1444ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[1568f8c]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b6b5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1444814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[14440d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1568a64]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14433b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1443a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1443a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1568848]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1566520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[15687d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[14442ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15686e0]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1563ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[1565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[1566700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1441010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[1566d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[1566d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
</UL>

<P><STRONG><a name="[15682a8]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1565968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1565da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1443a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1443a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1566d54]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1446740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[156565c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[15660e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr (via BLX)
<LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1441010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1566700]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1565224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1565da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
<LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort (via BLX)
</UL>

<P><STRONG><a name="[1566610]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[15665d4]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15660e8]"></a>__rt_eh_globals_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1566d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals (via BLX)
</UL>

<P><STRONG><a name="[1565da0]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1566700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[15682a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1565cb0]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1564c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1565da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1565968]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1564db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[15682a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[156565c]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1446740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1566d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1565620]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[15655e4]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1564db0]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1564324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1564c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[1565968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1564c84]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1564db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1565cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1564324]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1564db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1448090]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[1448054]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[1448144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[1448180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[14481bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[1448bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_standby()
<LI><a href="#[1448c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_walk()
<LI><a href="#[1448c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACTION_UI_calibrate()
</UL>

<P><STRONG><a name="[14474d8]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1445084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5d9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::~fsm() (via BLX)
</UL>

<P><STRONG><a name="[1445084]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14433b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[14474d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1447370]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1447190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5da08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm::fsm(int, int, int) (via BLX)
<LI><a href="#[b5dbe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(fsm*, fsm*) (via BLX)
</UL>

<P><STRONG><a name="[1447190]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1446740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1446a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b692b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_fsm_init (via BLX)
<LI><a href="#[1447370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[15654b8]"></a>_fp_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1567aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[156547c]"></a>__fplib_config_fpu_vfp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1565440]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b6b748]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b70c]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b6d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[b6b694]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc32x0.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b6b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6b694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc32x0.o(RESET)
</UL>
<P><STRONG><a name="[14481bc]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1448180]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1448144]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1448054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[1566d90]"></a>__default_terminate_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15686e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[15687d0]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1568848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
