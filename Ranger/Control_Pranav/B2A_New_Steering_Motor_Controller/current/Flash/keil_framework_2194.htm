<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\keil_framework_2194.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\keil_framework_2194.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed Jun 19 18:09:19 2013
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
dn_get_steer_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[bc4778]">Reset_Handler</a>
 <LI><a href="#[bc4994]">Undef_Handler</a>
 <LI><a href="#[bc4958]">SWI_Handler</a>
 <LI><a href="#[bc491c]">PAbt_Handler</a>
 <LI><a href="#[bc48e0]">DAbt_Handler</a>
 <LI><a href="#[bc48a4]">IRQ_Handler</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[bc365c]">mutex_lock</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc365c]">mutex_lock</a><BR>
 <LI><a href="#[14762b0]">_float_round</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14762b0]">_float_round</a><BR>
 <LI><a href="#[bc4994]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc4994]">Undef_Handler</a><BR>
 <LI><a href="#[bc4958]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc4958]">SWI_Handler</a><BR>
 <LI><a href="#[bc491c]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc491c]">PAbt_Handler</a><BR>
 <LI><a href="#[bc48e0]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc48e0]">DAbt_Handler</a><BR>
 <LI><a href="#[bc48a4]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bc48a4]">IRQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[bc35e4]">voidvoid</a>
 <LI><a href="#[bc36d4]">intvoid</a>
 <LI><a href="#[bc2b58]">voidint</a>
 <LI><a href="#[bc35e4]">voidvoid</a>
 <LI><a href="#[bc36d4]">intvoid</a>
 <LI><a href="#[bc4778]">Reset_Handler</a>
 <LI><a href="#[bc4994]">Undef_Handler</a>
 <LI><a href="#[bc4958]">SWI_Handler</a>
 <LI><a href="#[bc491c]">PAbt_Handler</a>
 <LI><a href="#[bc48e0]">DAbt_Handler</a>
 <LI><a href="#[bc48a4]">IRQ_Handler</a>
 <LI><a href="#[bc4700]">FIQ_Handler</a>
 <LI><a href="#[bba3a4]">__main</a>
 <LI><a href="#[bc4d18]">main</a>
 <LI><a href="#[bc4034]">asched_get_timestamp</a>
 <LI><a href="#[bc1c58]">dn_error_transmit</a>
 <LI><a href="#[bc1c94]">dn_blue_heartbeat</a>
 <LI><a href="#[bc1c1c]">dn_get_motor_current</a>
 <LI><a href="#[bc1ba4]">dn_get_steer_angle</a>
 <LI><a href="#[bc1be0]">dn_get_raw_motor_current</a>
 <LI><a href="#[bc0e0c]">dn_rx_timestamp</a>
 <LI><a href="#[bc10a0]">can_rx_setter_float_dummy</a>
 <LI><a href="#[bc1064]">can_rx_setter_int_dummy</a>
 <LI><a href="#[bc19c4]">mc_set_command_current</a>
 <LI><a href="#[bc0d94]">mc_set_kp</a>
 <LI><a href="#[bc0dd0]">mc_set_ki</a>
 <LI><a href="#[bc0d1c]">mc_set_sleep</a>
 <LI><a href="#[bc0d58]">mc_set_shutdown</a>
 <LI><a href="#[bc0ce0]">mc_set_target_current</a>
 <LI><a href="#[bc4034]">asched_get_timestamp</a>
 <LI><a href="#[bc1ba4]">dn_get_steer_angle</a>
 <LI><a href="#[bc1c1c]">dn_get_motor_current</a>
 <LI><a href="#[bc0efc]">dn_get_batt_power</a>
 <LI><a href="#[bc383c]">error_get_time</a>
 <LI><a href="#[bc3800]">error_get_info</a>
 <LI><a href="#[bc0e48]">dn_get_status</a>
 <LI><a href="#[bc0ec0]">dn_get_execution_time</a>
 <LI><a href="#[bc0e84]">dn_get_max_execution_time</a>
 <LI><a href="#[bc08a8]">can_rx2_isr</a>
 <LI><a href="#[bc0920]">adcx_isr</a>
 <LI><a href="#[bc095c]">adci_isr</a>
 <LI><a href="#[bc257c]">timer1_isr</a>
 <LI><a href="#[bc08e4]">can_error_isr</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbb14]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
 <LI><a href="#[bbbad8]">__switch$$</a>
 <LI><a href="#[bbf444]">fputc</a>
 <LI><a href="#[1478998]">_sputc</a>
 <LI><a href="#[bc2054]">task_every_row</a>
 <LI><a href="#[bc1e38]">can_transmit1</a>
 <LI><a href="#[bc1b2c]">dn_sched_done</a>
 <LI><a href="#[bc2054]">task_every_row</a>
 <LI><a href="#[bc1dfc]">can_transmit2</a>
 <LI><a href="#[bc1b2c]">dn_sched_done</a>
 <LI><a href="#[bc2054]">task_every_row</a>
 <LI><a href="#[bc1dc0]">can_transmit3</a>
 <LI><a href="#[bc1b2c]">dn_sched_done</a>
 <LI><a href="#[bc2054]">task_every_row</a>
 <LI><a href="#[bc2018]">run_occasionally</a>
 <LI><a href="#[bc1b2c]">dn_sched_done</a>
 <LI><a href="#[bc35e4]">voidvoid</a>
 <LI><a href="#[bc36d4]">intvoid</a>
 <LI><a href="#[bc2b58]">voidint</a>
 <LI><a href="#[bc35e4]">voidvoid</a>
 <LI><a href="#[bc36d4]">intvoid</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bc4778]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bba3a4]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[1476940]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1476850]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1475d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1476814]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1475d4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1476724]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[bbb1f0]"></a>can_rx_push</STRONG> (ARM, 72 bytes, Stack size 0 bytes, can.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[bbad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx4_isr
<LI><a href="#[bbadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx3_isr
<LI><a href="#[bbadf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx1_isr
<LI><a href="#[bc08a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx2_isr
</UL>

<P><STRONG><a name="[bc4d54]"></a>init</STRONG> (ARM, 28 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc4b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[bc4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[bc4c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bc4d18]"></a>main</STRONG> (ARM, 92 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; init_software &rArr; mc_init &rArr; __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[bc4b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
<LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
<LI><a href="#[bc4bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_interrupts
<LI><a href="#[bc4c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_hardware
<LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
<LI><a href="#[bc4ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_run
<LI><a href="#[14787b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[bc40e8]"></a>asched_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc40ac]"></a>asched_tick</STRONG> (ARM, 144 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_isr
</UL>

<P><STRONG><a name="[bc4070]"></a>asched_set_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc0e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_rx_timestamp
</UL>

<P><STRONG><a name="[bc4ca0]"></a>asched_run</STRONG> (ARM, 100 bytes, Stack size 8 bytes, async_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asched_run
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc4034]"></a>asched_get_timestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, async_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc1b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_sched_done
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc392c]"></a>error_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc3ff8]"></a>error_occurred</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bc365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[bc3698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_write
<LI><a href="#[bbc03c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_read_buffer
<LI><a href="#[bbd3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_run_no_control
<LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[bbd554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[bbe058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_efilter_add
<LI><a href="#[bc00ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[bc0920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_isr
<LI><a href="#[bc095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_isr
<LI><a href="#[bc0ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[bc1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[bc1eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[bc1eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[bc1f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[bc1fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[bc2ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floatvoid
<LI><a href="#[bc2b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidint
<LI><a href="#[bc35e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voidvoid
<LI><a href="#[bc36d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intvoid
<LI><a href="#[bc40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>

<P><STRONG><a name="[bc38f0]"></a>error_occurred_irq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bc365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[bc3698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>
<BR>[Called By]<UL><LI><a href="#[bc08e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_error_isr
</UL>

<P><STRONG><a name="[bc38b4]"></a>error_occurred_fiq</STRONG> (ARM, 92 bytes, Stack size 8 bytes, error.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_unlock
<LI><a href="#[bc365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[bc3698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_check
</UL>

<P><STRONG><a name="[bc3878]"></a>error_update</STRONG> (ARM, 388 bytes, Stack size 72 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = error_update
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bc383c]"></a>error_get_time</STRONG> (ARM, 32 bytes, Stack size 0 bytes, error.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc3800]"></a>error_get_info</STRONG> (ARM, 56 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbff0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc37c4]"></a>error_get_board</STRONG> (ARM, 12 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[bc3788]"></a>error_get_id</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[bc374c]"></a>error_get_frequency</STRONG> (ARM, 28 bytes, Stack size 0 bytes, error.o(.text), UNUSED)

<P><STRONG><a name="[bc3710]"></a>error_send_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[bc3698]"></a>mutex_check</STRONG> (ARM, 8 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc38b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[bc38f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc365c]"></a>mutex_lock</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[bc365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_lock
<LI><a href="#[bc38b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[bc38f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc3620]"></a>mutex_unlock</STRONG> (ARM, 12 bytes, Stack size 0 bytes, mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc38b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_fiq
<LI><a href="#[bc38f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc2d74]"></a>float_to_fixed</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc293c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[bc2978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_unsafe_target_current
<LI><a href="#[bc0ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_target_current
<LI><a href="#[bc0d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_kp
<LI><a href="#[bc0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_ki
<LI><a href="#[bc194c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[bc1988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[bc19c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[bc1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[bc2d38]"></a>int_to_fixed</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc2cfc]"></a>fixed_to_float</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fixed_to_float
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[bc2978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_batt_power
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[bc2cc0]"></a>fixed_to_int</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[bc2c84]"></a>fixed_mult</STRONG> (ARM, 16 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[bc0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_batt_power
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[bc1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[bc2c48]"></a>fixed_mult_to_long</STRONG> (ARM, 20 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[bc2c0c]"></a>linear_to_fixed</STRONG> (ARM, 52 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc293c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[bc2978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[bbff48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[bbfffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[bc0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_batt_power
<LI><a href="#[bc1be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
</UL>

<P><STRONG><a name="[bc2bd0]"></a>fixed_abs</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc35e4]"></a>voidvoid</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[bc2b94]"></a>voidvoid_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc2b58]"></a>voidint</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voidint &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(.data)
</UL>
<P><STRONG><a name="[bc2b1c]"></a>voidint_noerror</STRONG> (ARM, 4 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc2ae0]"></a>floatvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc2aa4]"></a>floatvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc36d4]"></a>intvoid</STRONG> (ARM, 20 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intvoid &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 2]<UL><LI> error.o(.data)
<LI> heartbeat.o(.data)
</UL>
<P><STRONG><a name="[bc2a68]"></a>intvoid_noerror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc2a2c]"></a>tic_toc_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc29f0]"></a>tic</STRONG> (ARM, 24 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc29b4]"></a>toc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[bc4c28]"></a>init_hardware</STRONG> (ARM, 1084 bytes, Stack size 16 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_hardware
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bc257c]"></a>timer1_isr</STRONG> (ARM, 40 bytes, Stack size 24 bytes, hardware_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer1_isr &rArr; asched_tick &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[bc2054]"></a>task_every_row</STRONG> (ARM, 44 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = task_every_row &rArr; can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc1910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_update
<LI><a href="#[bc1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
<LI><a href="#[bc1ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_beat
<LI><a href="#[bc1cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
<LI><a href="#[bc1e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
<LI><a href="#[bc1eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[bc1f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_conversion_wait
<LI><a href="#[bc1fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_convert_all
<LI><a href="#[bc3878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc2018]"></a>run_occasionally</STRONG> (ARM, 96 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = run_occasionally &rArr; can_transmit_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc1d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_status
<LI><a href="#[bc1d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit5
<LI><a href="#[bc1d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit4
<LI><a href="#[bc3710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_send_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc4bb0]"></a>init_software</STRONG> (ARM, 248 bytes, Stack size 56 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_software &rArr; mc_init &rArr; __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[bc194c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_stiffness
<LI><a href="#[bc1988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_dampness
<LI><a href="#[bc19c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_command_current
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[bc1a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hb_init
<LI><a href="#[bc1eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_init
<LI><a href="#[bc1f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_add_config
<LI><a href="#[bc1fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_init
<LI><a href="#[bc392c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_init
<LI><a href="#[bc40e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bc4b74]"></a>init_values</STRONG> (ARM, 28 bytes, Stack size 8 bytes, software_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_values &rArr; adcx_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc1b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle_raw
<LI><a href="#[bc1eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_convert_all
<LI><a href="#[bc1f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_conversion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bc4c64]"></a>init_can</STRONG> (ARM, 464 bytes, Stack size 16 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_can &rArr; can_set_tx_descriptor_ii
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_ii
<LI><a href="#[bc0fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_tx_descriptor_fi
<LI><a href="#[bc0fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_ii
<LI><a href="#[bc1028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_set_rx_descriptor_fi
<LI><a href="#[bc10dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_set_descriptors
<LI><a href="#[bc1118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bc1e38]"></a>can_transmit1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit1 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc1dfc]"></a>can_transmit2</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit2 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc1dc0]"></a>can_transmit3</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit3 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc1d84]"></a>can_transmit4</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit4 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[bc1d48]"></a>can_transmit5</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit5 &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[bc1d0c]"></a>can_transmit_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_status &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_occasionally
</UL>

<P><STRONG><a name="[bc4bec]"></a>init_interrupts</STRONG> (ARM, 156 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc4d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[bc4700]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, interrupts.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc1b68]"></a>dn_get_steer_angle_raw</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[bc00ec]"></a>dn_safety</STRONG> (ARM, 136 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_blink
<LI><a href="#[bbfc00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_direction_control
<LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc1c94]"></a>dn_blue_heartbeat</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bbfbc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_blue_blink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[bc00b0]"></a>dn_green_heartbeat</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfb88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_toggle
</UL>

<P><STRONG><a name="[bc0074]"></a>dn_red_heartbeat</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_red_toggle
</UL>

<P><STRONG><a name="[bc0038]"></a>dn_get_battery_voltage</STRONG> (ARM, 40 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[bbfffc]"></a>dn_get_raw_battery_voltage</STRONG> (ARM, 32 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[bbffc0]"></a>dn_get_hbridge_raw_temp</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
</UL>

<P><STRONG><a name="[bc1be0]"></a>dn_get_raw_motor_current</STRONG> (ARM, 36 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_get_raw_motor_current &rArr; linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[bc1c1c]"></a>dn_get_motor_current</STRONG> (ARM, 48 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_motor_current
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bbff84]"></a>dn_get_battery_current</STRONG> (ARM, 40 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[bbff48]"></a>dn_get_raw_battery_current</STRONG> (ARM, 36 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
</UL>

<P><STRONG><a name="[bc0efc]"></a>dn_get_batt_power</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dn_get_batt_power &rArr; linear_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bbfc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adci_get_result
<LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[bc2c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[bc2cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc1c58]"></a>dn_error_transmit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = dn_error_transmit &rArr; can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.text)
</UL>
<P><STRONG><a name="[bbff0c]"></a>dn_error_print</STRONG> (ARM, 72 bytes, Stack size 8 bytes, data_nexus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[bc3800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_get_info
<LI><a href="#[1478560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bc1ba4]"></a>dn_get_steer_angle</STRONG> (ARM, 80 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dn_get_steer_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfc3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcx_get_result
<LI><a href="#[bbfe1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bbfe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bbfe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 2]<UL><LI> software_setup.o(.text)
<LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc0e0c]"></a>dn_rx_timestamp</STRONG> (ARM, 4 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_set_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc0e48]"></a>dn_get_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, data_nexus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc1b2c]"></a>dn_sched_done</STRONG> (ARM, 76 bytes, Stack size 16 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dn_sched_done
</UL>
<BR>[Calls]<UL><LI><a href="#[bc4034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asched_get_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> software_setup.o(.constdata)
</UL>
<P><STRONG><a name="[bc0ec0]"></a>dn_get_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc0e84]"></a>dn_get_max_execution_time</STRONG> (ARM, 28 bytes, Stack size 8 bytes, data_nexus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dn_get_max_execution_time
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bbf444]"></a>fputc</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bbf318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[bbf408]"></a>ferror</STRONG> (ARM, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[bbf3cc]"></a>_ttywrch</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbf318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[bbf390]"></a>_sys_exit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bbf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[bc1a78]"></a>hb_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, heartbeat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc1ab4]"></a>hb_beat</STRONG> (ARM, 72 bytes, Stack size 16 bytes, heartbeat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hb_beat
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bbedb4]"></a>hb_get_count</STRONG> (ARM, 52 bytes, Stack size 0 bytes, heartbeat.o(.text), UNUSED)

<P><STRONG><a name="[bbe8c8]"></a>mcu_led_init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe88c]"></a>mcu_led_red_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe850]"></a>mcu_led_blue_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe814]"></a>mcu_led_green_off</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[bc1910]"></a>mcu_led_update</STRONG> (ARM, 124 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bbe7d8]"></a>mcu_led_green_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[bbe79c]"></a>mcu_led_green_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe760]"></a>mcu_led_blue_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbfbc4]"></a>mcu_led_blue_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc1c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_blue_heartbeat
</UL>

<P><STRONG><a name="[bbe724]"></a>mcu_led_red_on</STRONG> (ARM, 20 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbfb4c]"></a>mcu_led_red_blink</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc00ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[bbfb88]"></a>mcu_led_green_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc00b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_green_heartbeat
</UL>

<P><STRONG><a name="[bbfb10]"></a>mcu_led_red_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc0074]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_red_heartbeat
</UL>

<P><STRONG><a name="[bbe6e8]"></a>mcu_led_blue_toggle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe6ac]"></a>mcu_led_all_on</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe670]"></a>mcu_led_all_off</STRONG> (ARM, 36 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bbe634]"></a>mcu_led_all_toggle</STRONG> (ARM, 72 bytes, Stack size 0 bytes, mcu_led.o(.text), UNUSED)

<P><STRONG><a name="[bc1fa0]"></a>adci_init</STRONG> (ARM, 200 bytes, Stack size 24 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adci_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bbe094]"></a>adci_convert_next</STRONG> (ARM, 124 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[bc1fdc]"></a>adci_convert_all</STRONG> (ARM, 144 bytes, Stack size 8 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adci_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bbe058]"></a>adci_efilter_add</STRONG> (ARM, 88 bytes, Stack size 16 bytes, adc_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc095c]"></a>adci_isr</STRONG> (ARM, 240 bytes, Stack size 40 bytes, adc_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adci_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[bbfc78]"></a>adci_get_result</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbffc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_hbridge_raw_temp
<LI><a href="#[bbfffc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_voltage
<LI><a href="#[bc0038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[bc0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_batt_power
</UL>

<P><STRONG><a name="[bbe01c]"></a>adci_get_raw</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[bbdfe0]"></a>adci_get_filter</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_internal.o(.text), UNUSED)

<P><STRONG><a name="[bc1a00]"></a>mc_init</STRONG> (ARM, 332 bytes, Stack size 56 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mc_init &rArr; __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[bbd374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bbfde0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[bc2c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[bc2cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc0ce0]"></a>mc_set_target_current</STRONG> (ARM, 72 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_target_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bbd5cc]"></a>mc_set_unsafe_target_current</STRONG> (ARM, 20 bytes, Stack size 8 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[bbd590]"></a>mc_update_watchdog</STRONG> (ARM, 72 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bbd554]"></a>mc_set_pwm</STRONG> (ARM, 384 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
</UL>

<P><STRONG><a name="[bbd518]"></a>mc_pid_current</STRONG> (ARM, 856 bytes, Stack size 40 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_pwm
<LI><a href="#[bbe7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_on
<LI><a href="#[bbe814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_led_green_off
<LI><a href="#[bc2c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult_to_long
<LI><a href="#[bc2c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[bc2cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_int
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_compliant_control
</UL>

<P><STRONG><a name="[bc1a3c]"></a>mc_compliant_control</STRONG> (ARM, 148 bytes, Stack size 24 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mc_compliant_control &rArr; mc_pid_current &rArr; mc_set_pwm &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_pid_current
<LI><a href="#[bc2c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_mult
<LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
<LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bc19c4]"></a>mc_set_command_current</STRONG> (ARM, 44 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_command_current &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bbd4dc]"></a>mc_get_command_current</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bc194c]"></a>mc_set_stiffness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_stiffness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bbd4a0]"></a>mc_get_stiffness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bc0d94]"></a>mc_set_kp</STRONG> (ARM, 64 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_kp &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc0dd0]"></a>mc_set_ki</STRONG> (ARM, 80 bytes, Stack size 16 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mc_set_ki &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bbd374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc1988]"></a>mc_set_dampness</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motor_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mc_set_dampness &rArr; float_to_fixed
</UL>
<BR>[Calls]<UL><LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bbd464]"></a>mc_get_dampness</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bbfc00]"></a>mc_direction_control</STRONG> (ARM, 28 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc00ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
</UL>

<P><STRONG><a name="[bbd428]"></a>mc_get_parameters</STRONG> (ARM, 8 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bbd3ec]"></a>mc_get_pwm</STRONG> (ARM, 12 bytes, Stack size 0 bytes, motor_controller.o(.text), UNUSED)

<P><STRONG><a name="[bc0d58]"></a>mc_set_shutdown</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc0d1c]"></a>mc_set_sleep</STRONG> (ARM, 20 bytes, Stack size 0 bytes, motor_controller.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bbd3b0]"></a>mc_run_no_control</STRONG> (ARM, 152 bytes, Stack size 16 bytes, motor_controller.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bbf318]"></a>sendchar</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[bbf444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bbcfb4]"></a>getkey</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[bbc99c]"></a>uarti_tx_set_empty_callback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, uart_int.o(.text), UNUSED)

<P><STRONG><a name="[bbc960]"></a>uarti_tx_refill</STRONG> (ARM, 108 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)

<P><STRONG><a name="[bbfad4]"></a>uarti_tx_buf</STRONG> (ARM, 160 bytes, Stack size 16 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[bbc870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[bbc8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int
<LI><a href="#[bbc8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int2
<LI><a href="#[bbff0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_print
</UL>

<P><STRONG><a name="[bbc924]"></a>uarti_isr</STRONG> (ARM, 148 bytes, Stack size 40 bytes, uart_int.o(.text), UNUSED)

<P><STRONG><a name="[bbc8e8]"></a>uarti_print_int2</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[1478560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bbc8ac]"></a>uarti_print_int</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[1478560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bbc870]"></a>uarti_print_float</STRONG> (ARM, 64 bytes, Stack size 8 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[bbfe1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1478560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bbc834]"></a>uarti_print_2float</STRONG> (ARM, 100 bytes, Stack size 24 bytes, uart_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_tx_buf
<LI><a href="#[bbfe1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1478560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[bbc12c]"></a>adcx_register_write</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[bbc0f0]"></a>adcx_convert_cfg</STRONG> (ARM, 72 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[bbc0b4]"></a>adcx_convert_next</STRONG> (ARM, 132 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[bbc078]"></a>adcx_register_read</STRONG> (ARM, 56 bytes, Stack size 0 bytes, adc_external.o(.text), UNUSED)

<P><STRONG><a name="[bbc03c]"></a>adcx_read_buffer</STRONG> (ARM, 56 bytes, Stack size 8 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bc0920]"></a>adcx_isr</STRONG> (ARM, 336 bytes, Stack size 40 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adcx_isr &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[bc1eec]"></a>adcx_convert_all</STRONG> (ARM, 148 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_convert_all &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[bc4b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[bbc000]"></a>adcx_write</STRONG> (ARM, 40 bytes, Stack size 16 bytes, adc_external.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>

<P><STRONG><a name="[bbfc3c]"></a>adcx_get_result</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbff48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_battery_current
<LI><a href="#[bbff84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[bc00ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_safety
<LI><a href="#[bc0efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_batt_power
<LI><a href="#[bc1b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle_raw
<LI><a href="#[bc1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle
<LI><a href="#[bc1be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_raw_motor_current
<LI><a href="#[bc1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
</UL>

<P><STRONG><a name="[bc1eb0]"></a>adcx_init</STRONG> (ARM, 136 bytes, Stack size 8 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adcx_init &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc1f64]"></a>adcx_add_config</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcx_add_config &rArr; error_occurred
</UL>
<BR>[Calls]<UL><LI><a href="#[bc3ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_software
</UL>

<P><STRONG><a name="[bc1f28]"></a>adcx_conversion_wait</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adc_external.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
<LI><a href="#[bc4b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_values
</UL>

<P><STRONG><a name="[bc1118]"></a>can_init</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bbb1b4]"></a>can_tx1_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbb178]"></a>can_tx1</STRONG> (ARM, 340 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx1
</UL>
<BR>[Called By]<UL><LI><a href="#[bbaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[bbb13c]"></a>can_tx2_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bc1cd0]"></a>can_tx2</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[bbaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
<LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bbb100]"></a>can_tx3_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbb0c4]"></a>can_tx3</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx3
</UL>
<BR>[Called By]<UL><LI><a href="#[bbaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[bbb088]"></a>can_tx4_push_frame</STRONG> (ARM, 96 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbb04c]"></a>can_tx4</STRONG> (ARM, 352 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_tx4
</UL>
<BR>[Called By]<UL><LI><a href="#[bbaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>

<P><STRONG><a name="[bbb010]"></a>can_tx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbafd4]"></a>can_tx_get_frame_count_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbaf98]"></a>can_tx_get_frame_count_3</STRONG> (ARM, 112 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbaf5c]"></a>can_tx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbaf20]"></a>can_tx_set_chan_cfg</STRONG> (ARM, 32 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbaee4]"></a>can_transmit_frame</STRONG> (ARM, 404 bytes, Stack size 12 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx4
<LI><a href="#[bbb0c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx3
<LI><a href="#[bbb178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx1
<LI><a href="#[bc1cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tx2
</UL>
<BR>[Called By]<UL><LI><a href="#[bbaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[bbaea8]"></a>can_transmit_alt</STRONG> (ARM, 400 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbab24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[bbaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[bbae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[bc0f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit
</UL>

<P><STRONG><a name="[bc0f38]"></a>can_transmit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = can_transmit &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_transmit
<LI><a href="#[bc1d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_status
<LI><a href="#[bc1d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit5
<LI><a href="#[bc1d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit4
<LI><a href="#[bc1dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit3
<LI><a href="#[bc1dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit2
<LI><a href="#[bc1e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit1
</UL>

<P><STRONG><a name="[bbae6c]"></a>can_rx_dispatch_frame</STRONG> (ARM, 400 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbab24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8_arm
<LI><a href="#[bbaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_all
</UL>

<P><STRONG><a name="[bbae30]"></a>can_rx_pop_frame</STRONG> (ARM, 232 bytes, Stack size 12 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bc1e74]"></a>can_rx_dispatch_all</STRONG> (ARM, 236 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = can_rx_dispatch_all &rArr; can_rx_dispatch_frame &rArr; can_transmit_alt &rArr; can_transmit_frame &rArr; can_tx4
</UL>
<BR>[Calls]<UL><LI><a href="#[bbae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_every_row
</UL>

<P><STRONG><a name="[bbadf4]"></a>can_rx1_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbb1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[bc08a8]"></a>can_rx2_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_rx2_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[bbb1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[bbadb8]"></a>can_rx3_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbb1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[bbad7c]"></a>can_rx4_isr</STRONG> (ARM, 44 bytes, Stack size 24 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbb1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_push
</UL>

<P><STRONG><a name="[bbad40]"></a>can_rx_get_frame_count_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbad04]"></a>can_rx_get_frame_count_2</STRONG> (ARM, 92 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbacc8]"></a>can_rx_get_frame_count_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbac8c]"></a>can_rx_get_frame_count_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bc10dc]"></a>can_rx_set_descriptors</STRONG> (ARM, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bbac50]"></a>can_rx_set_chan_cfg</STRONG> (ARM, 24 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbac14]"></a>can_get_error_1</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbabd8]"></a>can_get_error_2</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbab9c]"></a>can_get_error_3</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bbab60]"></a>can_get_error_4</STRONG> (ARM, 84 bytes, Stack size 0 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[bc08e4]"></a>can_error_isr</STRONG> (ARM, 200 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_error_isr &rArr; error_occurred_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc38f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_occurred_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interrupts.o(.text)
</UL>
<P><STRONG><a name="[bba7a0]"></a>can_rx_setter_double_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bc10a0]"></a>can_rx_setter_float_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bc1064]"></a>can_rx_setter_int_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_setup.o(.text)
</UL>
<P><STRONG><a name="[bba764]"></a>can_rx_setter_short_dummy</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba728]"></a>can_tx_getter_double_dummy</STRONG> (ARM, 20 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba6ec]"></a>can_tx_getter_float_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba6b0]"></a>can_tx_getter_int_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba674]"></a>can_tx_getter_short_dummy</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba638]"></a>can_set_tx_descriptor_d</STRONG> (ARM, 52 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba5fc]"></a>can_set_tx_descriptor_ff</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bc0f74]"></a>can_set_tx_descriptor_ii</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_ii
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bc0fb0]"></a>can_set_tx_descriptor_fi</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = can_set_tx_descriptor_fi
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bba5c0]"></a>can_set_tx_descriptor_iss</STRONG> (ARM, 80 bytes, Stack size 8 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba584]"></a>can_set_tx_descriptor_rtr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba548]"></a>can_set_rx_descriptor_d</STRONG> (ARM, 48 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bba50c]"></a>can_set_rx_descriptor_ff</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[bc0fec]"></a>can_set_rx_descriptor_ii</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bc1028]"></a>can_set_rx_descriptor_fi</STRONG> (ARM, 56 bytes, Stack size 0 bytes, can_types.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc4c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_can
</UL>

<P><STRONG><a name="[bba4d0]"></a>can_set_rx_descriptor_iss</STRONG> (ARM, 72 bytes, Stack size 4 bytes, can_types.o(.text), UNUSED)

<P><STRONG><a name="[14771b0]"></a>__aeabi_fadd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14771ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[1477174]"></a>__aeabi_fsub</STRONG> (ARM, 20 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14771ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[bbd338]"></a>__aeabi_frsub</STRONG> (ARM, 32 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_frsub &rArr; _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[14771ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[bbfde0]"></a>__aeabi_fmul</STRONG> (ARM, 136 bytes, Stack size 0 bytes, fmul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbff84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[bc0038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[bc0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[bc0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[bc1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
</UL>

<P><STRONG><a name="[bbd374]"></a>__aeabi_fdiv</STRONG> (ARM, 140 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_ki
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
</UL>

<P><STRONG><a name="[bc2978]"></a>__ARM_scalbnf</STRONG> (ARM, 12 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[bc2cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
<LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[1476ee0]"></a>scalbnf</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[bbfe58]"></a>__aeabi_dmul</STRONG> (ARM, 360 bytes, Stack size 80 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1476df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle
<LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bc2900]"></a>__aeabi_i2f</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bbff84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_current
<LI><a href="#[bc0038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_battery_voltage
<LI><a href="#[bc0dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_set_ki
<LI><a href="#[bc1a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_init
<LI><a href="#[bc1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle
<LI><a href="#[bc1c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_motor_current
<LI><a href="#[bc2cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixed_to_float
</UL>

<P><STRONG><a name="[bbfda4]"></a>__aeabi_ui2f</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_max_execution_time
<LI><a href="#[bc0ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_execution_time
</UL>

<P><STRONG><a name="[bc293c]"></a>__aeabi_f2iz</STRONG> (ARM, 64 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_to_fixed
<LI><a href="#[bc2d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;float_to_fixed
</UL>

<P><STRONG><a name="[bbfe1c]"></a>__aeabi_f2d</STRONG> (ARM, 56 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[bbc870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[bc1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle
</UL>

<P><STRONG><a name="[bbfe94]"></a>__aeabi_d2f</STRONG> (ARM, 92 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_get_steer_angle
</UL>

<P><STRONG><a name="[14765f8]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[14765bc]"></a>__aeabi_uidivmod</STRONG> (ARM, 60 bytes, Stack size 4 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14764cc]"></a>__aeabi_uldivmod</STRONG> (ARM, 144 bytes, Stack size 32 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1475a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1475b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14763a0]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[14762b0]"></a>_float_round</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14762b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14762b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>

<P><STRONG><a name="[1477138]"></a>_float_epilogue</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14762b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bbfda4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bbfe94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc2900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14771ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_addcore
</UL>

<P><STRONG><a name="[14761c0]"></a>_double_round</STRONG> (ARM, 84 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1476df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1476df0]"></a>_double_epilogue</STRONG> (ARM, 204 bytes, Stack size 28 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14761c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bbfe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
<LI><a href="#[1477f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[1477f48]"></a>__aeabi_dadd</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>
<BR>[Called By]<UL><LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1476094]"></a>__aeabi_dsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1476058]"></a>__aeabi_drsub</STRONG> (ARM, 80 bytes, Stack size 24 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
</UL>

<P><STRONG><a name="[1477f0c]"></a>__aeabi_ddiv</STRONG> (ARM, 380 bytes, Stack size 72 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1476df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1477f84]"></a>__aeabi_d2ulz</STRONG> (ARM, 68 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1475a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1475b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1477fc0]"></a>__aeabi_cdrcmple</STRONG> (ARM, 112 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1475d4c]"></a>__scatterload</STRONG> (ARM, 40 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1476814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1476850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1475d10]"></a>__scatterload_rt2</STRONG> (ARM, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1475b30]"></a>__aeabi_llsl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
<LI><a href="#[14764cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1477f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1475af4]"></a>_ll_shift_l</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1475a04]"></a>__aeabi_llsr</STRONG> (ARM, 36 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14760d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_addcore
<LI><a href="#[14764cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1477f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[14759c8]"></a>_ll_ushift_r</STRONG> (ARM, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[14755cc]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1475590]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1478830]"></a>__0printf</STRONG> (ARM, 36 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14787f4]"></a>__1printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14787b8]"></a>__2printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147877c]"></a>__c89printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1478740]"></a>printf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[14785d8]"></a>__0sprintf</STRONG> (ARM, 56 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1478998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[147859c]"></a>__1sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1478560]"></a>__2sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_2float
<LI><a href="#[bbc870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_float
<LI><a href="#[bbc8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int
<LI><a href="#[bbc8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarti_print_int2
<LI><a href="#[bbff0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dn_error_print
</UL>

<P><STRONG><a name="[1478524]"></a>__c89sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[14784e8]"></a>sprintf</STRONG> (ARM, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[bbab24]"></a>__ARM_common_memcpy1_8_arm</STRONG> (ARM, 68 bytes, Stack size 0 bytes, can.o(i.__ARM_common_memcpy1_8_arm))
<BR><BR>[Called By]<UL><LI><a href="#[bbae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rx_dispatch_frame
<LI><a href="#[bbaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_transmit_alt
</UL>

<P><STRONG><a name="[1475734]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1475734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1475734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[14756f8]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14756bc]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc4994]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bc4994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc4958]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bc4958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc491c]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bc491c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc491c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc48e0]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bc48e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc48e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bc48a4]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[bc48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc48a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bbbb14]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[bbbad8]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1478ac4]"></a>_fp_digits</STRONG> (ARM, 612 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfe58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14764cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1477f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1477f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1477f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1477fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1478a88]"></a>_printf_core</STRONG> (ARM, 2724 bytes, Stack size 152 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14764cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[14765bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1478a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1478a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1478ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14785d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1478830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1478a4c]"></a>_printf_post_padding</STRONG> (ARM, 68 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1478a10]"></a>_printf_pre_padding</STRONG> (ARM, 80 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1478a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1478998]"></a>_sputc</STRONG> (ARM, 20 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[14785d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[14771ec]"></a>_float_addcore</STRONG> (ARM, 164 bytes, Stack size 8 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _float_addcore
</UL>
<BR>[Calls]<UL><LI><a href="#[1477138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bbd338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1477174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[14771b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[14760d0]"></a>_double_addcore</STRONG> (ARM, 428 bytes, Stack size 64 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1475a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1475b30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1476df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1476058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1476094]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1477f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
